

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Nov 15 12:48:49 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	intentry,global,class=CODE,delta=2
    13                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Version 2.40
    18                           ; Generated 17/11/2021 GMT
    19                           ; 
    20                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC16F628A Definitions
    50                           ; 
    51                           ; SFR Addresses
    52     0000                     	;# 
    53     0001                     	;# 
    54     0002                     	;# 
    55     0003                     	;# 
    56     0004                     	;# 
    57     0005                     	;# 
    58     0006                     	;# 
    59     000A                     	;# 
    60     000B                     	;# 
    61     000C                     	;# 
    62     000E                     	;# 
    63     000E                     	;# 
    64     000F                     	;# 
    65     0010                     	;# 
    66     0011                     	;# 
    67     0012                     	;# 
    68     0015                     	;# 
    69     0015                     	;# 
    70     0016                     	;# 
    71     0017                     	;# 
    72     0018                     	;# 
    73     0019                     	;# 
    74     001A                     	;# 
    75     001F                     	;# 
    76     0081                     	;# 
    77     0085                     	;# 
    78     0086                     	;# 
    79     008C                     	;# 
    80     008E                     	;# 
    81     0092                     	;# 
    82     0098                     	;# 
    83     0099                     	;# 
    84     009A                     	;# 
    85     009B                     	;# 
    86     009C                     	;# 
    87     009D                     	;# 
    88     009F                     	;# 
    89     0000                     	;# 
    90     0001                     	;# 
    91     0002                     	;# 
    92     0003                     	;# 
    93     0004                     	;# 
    94     0005                     	;# 
    95     0006                     	;# 
    96     000A                     	;# 
    97     000B                     	;# 
    98     000C                     	;# 
    99     000E                     	;# 
   100     000E                     	;# 
   101     000F                     	;# 
   102     0010                     	;# 
   103     0011                     	;# 
   104     0012                     	;# 
   105     0015                     	;# 
   106     0015                     	;# 
   107     0016                     	;# 
   108     0017                     	;# 
   109     0018                     	;# 
   110     0019                     	;# 
   111     001A                     	;# 
   112     001F                     	;# 
   113     0081                     	;# 
   114     0085                     	;# 
   115     0086                     	;# 
   116     008C                     	;# 
   117     008E                     	;# 
   118     0092                     	;# 
   119     0098                     	;# 
   120     0099                     	;# 
   121     009A                     	;# 
   122     009B                     	;# 
   123     009C                     	;# 
   124     009D                     	;# 
   125     009F                     	;# 
   126                           
   127                           	psect	strings
   128     009A                     __pstrings:
   129     009A                     stringtab:
   130     009A                     __stringtab:
   131     009A                     stringcode:	
   132                           ;	String table - string pointers are 1 byte each
   133                           
   134     009A                     stringdir:
   135     009A  3000               	movlw	high stringdir
   136     009B  008A               	movwf	10
   137     009C  0804               	movf	4,w
   138     009D  0A84               	incf	4,f
   139     009E  0782               	addwf	2,f
   140     009F                     __stringbase:
   141     009F  3400               	retlw	0
   142     00A0                     __end_of__stringtab:
   143     00A0                     _tempi:
   144     00A0  3410               	retlw	16
   145     00A1  3400               	retlw	0
   146     00A2  341F               	retlw	31
   147     00A3  3400               	retlw	0
   148     00A4  343E               	retlw	62
   149     00A5  3400               	retlw	0
   150     00A6  347B               	retlw	123
   151     00A7  3400               	retlw	0
   152     00A8                     __end_of_tempi:
   153     0005                     _PORTA	set	5
   154     0001                     _TMR0	set	1
   155     000B                     _INTCONbits	set	11
   156     0005                     _PORTAbits	set	5
   157     000B                     _INTCON	set	11
   158     0081                     _OPTION_REG	set	129
   159     0086                     _TRISB	set	134
   160     0085                     _TRISA	set	133
   161                           
   162                           	psect	cinit
   163     000F                     start_initialization:	
   164                           ; #config settings
   165                           
   166     000F                     __initialization:
   167                           
   168                           ; Clear objects allocated to COMMON
   169     000F  01F8               	clrf	__pbssCOMMON& (0+127)
   170     0010  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   171                           
   172                           ; Clear objects allocated to BANK0
   173     0011  1283               	bcf	3,5	;RP0=0, select bank0
   174     0012  1303               	bcf	3,6	;RP1=0, select bank0
   175     0013  01A5               	clrf	__pbssBANK0& (0+127)
   176     0014                     end_of_initialization:	
   177                           ;End of C runtime variable initialization code
   178                           
   179     0014                     __end_of__initialization:
   180     0014  0183               	clrf	3
   181     0015  2816               	ljmp	_main	;jump to C main() function
   182                           
   183                           	psect	bssCOMMON
   184     0078                     __pbssCOMMON:
   185     0078                     _InterruptCounter:
   186     0078                     	ds	2
   187                           
   188                           	psect	bssBANK0
   189     0025                     __pbssBANK0:
   190     0025                     _TempoSelezionato:
   191     0025                     	ds	1
   192                           
   193                           	psect	cstackCOMMON
   194     0070                     __pcstackCOMMON:
   195     0070                     ?_main:
   196     0070                     ?_ISR:	
   197                           ; 1 bytes @ 0x0
   198                           
   199     0070                     ??_ISR:	
   200                           ; 1 bytes @ 0x0
   201                           
   202                           
   203                           ; 1 bytes @ 0x0
   204     0070                     	ds	8
   205                           
   206                           	psect	cstackBANK0
   207     0020                     __pcstackBANK0:
   208     0020                     ??_main:
   209                           
   210                           ; 1 bytes @ 0x0
   211     0020                     	ds	3
   212     0023                     main@old_button:
   213                           
   214                           ; 1 bytes @ 0x3
   215     0023                     	ds	1
   216     0024                     main@button:
   217                           
   218                           ; 1 bytes @ 0x4
   219     0024                     	ds	1
   220                           
   221                           	psect	maintext
   222     0016                     __pmaintext:	
   223 ;;
   224 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   225 ;;
   226 ;; *************** function _main *****************
   227 ;; Defined at:
   228 ;;		line 29 in file "main.c"
   229 ;; Parameters:    Size  Location     Type
   230 ;;		None
   231 ;; Auto vars:     Size  Location     Type
   232 ;;  button          1    4[BANK0 ] unsigned char 
   233 ;;  old_button      1    3[BANK0 ] unsigned char 
   234 ;; Return value:  Size  Location     Type
   235 ;;                  1    wreg      void 
   236 ;; Registers used:
   237 ;;		wreg, status,2, status,0
   238 ;; Tracked objects:
   239 ;;		On entry : B00/0
   240 ;;		On exit  : 0/0
   241 ;;		Unchanged: 0/0
   242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   243 ;;      Params:         0       0       0       0
   244 ;;      Locals:         0       2       0       0
   245 ;;      Temps:          0       3       0       0
   246 ;;      Totals:         0       5       0       0
   247 ;;Total ram usage:        5 bytes
   248 ;; Hardware stack levels required when called: 2
   249 ;; This function calls:
   250 ;;		Nothing
   251 ;; This function is called by:
   252 ;;		Startup code after reset
   253 ;; This function uses a non-reentrant model
   254 ;;
   255                           
   256     0016                     _main:	
   257                           ;psect for function _main
   258                           
   259     0016                     l682:	
   260                           ;incstack = 0
   261                           ; Regs used in _main: [wreg+status,2+status,0]
   262                           
   263                           
   264                           ;main.c: 30:     TRISA = 0xFE;
   265     0016  30FE               	movlw	254
   266     0017  1683               	bsf	3,5	;RP0=1, select bank1
   267     0018  1303               	bcf	3,6	;RP1=0, select bank1
   268     0019  0085               	movwf	5	;volatile
   269     001A                     l684:
   270                           
   271                           ;main.c: 31:     TRISB = 0x00;
   272     001A  0186               	clrf	6	;volatile
   273     001B                     l686:
   274                           
   275                           ;main.c: 32:     INTCON = 0xA0;
   276     001B  30A0               	movlw	160
   277     001C  008B               	movwf	11	;volatile
   278     001D                     l688:
   279                           
   280                           ;main.c: 33:     OPTION_REG = 0x86;
   281     001D  3086               	movlw	134
   282     001E  0081               	movwf	1	;volatile
   283     001F                     l29:	
   284                           ;main.c: 35:     char button, old_button;;main.c: 38:     while (1) {
   285                           
   286                           
   287                           ;main.c: 39:         button = PORTAbits.RA1;
   288     001F  3000               	movlw	0
   289     0020  1283               	bcf	3,5	;RP0=0, select bank0
   290     0021  1885               	btfsc	5,1	;volatile
   291     0022  3001               	movlw	1
   292     0023  00A4               	movwf	main@button
   293     0024                     l690:
   294                           
   295                           ;main.c: 42:         if (!button && old_button) {
   296     0024  0824               	movf	main@button,w
   297     0025  1D03               	btfss	3,2
   298     0026  2828               	goto	u91
   299     0027  2829               	goto	u90
   300     0028                     u91:
   301     0028  2857               	goto	l30
   302     0029                     u90:
   303     0029                     l692:
   304     0029  0823               	movf	main@old_button,w
   305     002A  1903               	btfsc	3,2
   306     002B  282D               	goto	u101
   307     002C  282E               	goto	u100
   308     002D                     u101:
   309     002D  2857               	goto	l30
   310     002E                     u100:
   311     002E                     l694:
   312                           
   313                           ;main.c: 43:             _delay((unsigned long)((200)*(8000000/4000.0)));
   314     002E  3003               	movlw	3
   315     002F  1283               	bcf	3,5	;RP0=0, select bank0
   316     0030  1303               	bcf	3,6	;RP1=0, select bank0
   317     0031  00A2               	movwf	??_main+2
   318     0032  3008               	movlw	8
   319     0033  00A1               	movwf	??_main+1
   320     0034  3076               	movlw	118
   321     0035  00A0               	movwf	??_main
   322     0036                     u177:
   323     0036  0BA0               	decfsz	??_main,f
   324     0037  2836               	goto	u177
   325     0038  0BA1               	decfsz	??_main+1,f
   326     0039  2836               	goto	u177
   327     003A  0BA2               	decfsz	??_main+2,f
   328     003B  2836               	goto	u177
   329     003C  283D               	nop2
   330     003D                     l696:
   331                           
   332                           ;main.c: 44:             if (!button && old_button) {
   333     003D  1283               	bcf	3,5	;RP0=0, select bank0
   334     003E  1303               	bcf	3,6	;RP1=0, select bank0
   335     003F  0824               	movf	main@button,w
   336     0040  1D03               	btfss	3,2
   337     0041  2843               	goto	u111
   338     0042  2844               	goto	u110
   339     0043                     u111:
   340     0043  2855               	goto	l706
   341     0044                     u110:
   342     0044                     l698:
   343     0044  0823               	movf	main@old_button,w
   344     0045  1903               	btfsc	3,2
   345     0046  2848               	goto	u121
   346     0047  2849               	goto	u120
   347     0048                     u121:
   348     0048  2855               	goto	l706
   349     0049                     u120:
   350     0049                     l700:
   351                           
   352                           ;main.c: 45:                 TempoSelezionato++;
   353     0049  3001               	movlw	1
   354     004A  00A0               	movwf	??_main
   355     004B  0820               	movf	??_main,w
   356     004C  07A5               	addwf	_TempoSelezionato,f
   357     004D                     l702:
   358                           
   359                           ;main.c: 46:                 if (TempoSelezionato >= 4)TempoSelezionato = 0x00;
   360     004D  3004               	movlw	4
   361     004E  0225               	subwf	_TempoSelezionato,w
   362     004F  1C03               	skipc
   363     0050  2852               	goto	u131
   364     0051  2853               	goto	u130
   365     0052                     u131:
   366     0052  2857               	goto	l30
   367     0053                     u130:
   368     0053                     l704:
   369     0053  01A5               	clrf	_TempoSelezionato
   370     0054  2857               	goto	l30
   371     0055                     l706:
   372                           
   373                           ;main.c: 48:                 TempoSelezionato--;
   374     0055  3001               	movlw	1
   375     0056  02A5               	subwf	_TempoSelezionato,f
   376     0057                     l30:	
   377                           ;main.c: 51:         }
   378                           
   379                           
   380                           ;main.c: 53:         old_button = button;
   381     0057  0824               	movf	main@button,w
   382     0058  00A3               	movwf	main@old_button
   383     0059  281F               	goto	l29
   384     005A  280E               	ljmp	start
   385     005B                     __end_of_main:
   386                           
   387                           	psect	text1
   388     005B                     __ptext1:	
   389 ;; *************** function _ISR *****************
   390 ;; Defined at:
   391 ;;		line 60 in file "main.c"
   392 ;; Parameters:    Size  Location     Type
   393 ;;		None
   394 ;; Auto vars:     Size  Location     Type
   395 ;;		None
   396 ;; Return value:  Size  Location     Type
   397 ;;                  1    wreg      void 
   398 ;; Registers used:
   399 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath
   400 ;; Tracked objects:
   401 ;;		On entry : 0/0
   402 ;;		On exit  : 0/0
   403 ;;		Unchanged: 0/0
   404 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   405 ;;      Params:         0       0       0       0
   406 ;;      Locals:         0       0       0       0
   407 ;;      Temps:          8       0       0       0
   408 ;;      Totals:         8       0       0       0
   409 ;;Total ram usage:        8 bytes
   410 ;; Hardware stack levels used: 2
   411 ;; This function calls:
   412 ;;		Nothing
   413 ;; This function is called by:
   414 ;;		Interrupt level 1
   415 ;; This function uses a non-reentrant model
   416 ;;
   417                           
   418     005B                     _ISR:	
   419                           ;psect for function _ISR
   420                           
   421     005B                     i1l710:
   422                           
   423                           ;main.c: 61:     if (INTCONbits.T0IF) {
   424     005B  1D0B               	btfss	11,2	;volatile
   425     005C  285E               	goto	u14_21
   426     005D  285F               	goto	u14_20
   427     005E                     u14_21:
   428     005E  288F               	goto	i1l46
   429     005F                     u14_20:
   430     005F                     i1l712:
   431                           
   432                           ;main.c: 62:         INTCONbits.T0IF = 0;
   433     005F  110B               	bcf	11,2	;volatile
   434     0060                     i1l714:
   435                           
   436                           ;main.c: 64:         TMR0=4;
   437     0060  3004               	movlw	4
   438     0061  1283               	bcf	3,5	;RP0=0, select bank0
   439     0062  1303               	bcf	3,6	;RP1=0, select bank0
   440     0063  0081               	movwf	1	;volatile
   441                           
   442                           ;main.c: 66:         InterruptCounter++;
   443     0064  3001               	movlw	1
   444     0065  07F8               	addwf	_InterruptCounter,f
   445     0066  1803               	skipnc
   446     0067  0AF9               	incf	_InterruptCounter+1,f
   447     0068  3000               	movlw	0
   448     0069  07F9               	addwf	_InterruptCounter+1,f
   449     006A                     i1l716:
   450                           
   451                           ;main.c: 67:         if (InterruptCounter >= tempi[TempoSelezionato]) {
   452     006A  0825               	movf	_TempoSelezionato,w
   453     006B  00F0               	movwf	??_ISR
   454     006C  0770               	addwf	??_ISR,w
   455     006D  3E01               	addlw	low ((_tempi-__stringbase)| (0+32768))
   456     006E  0084               	movwf	4
   457     006F  209A               	fcall	stringdir
   458     0070  00F1               	movwf	??_ISR+1
   459     0071  209A               	fcall	stringdir
   460     0072  00F2               	movwf	??_ISR+2
   461     0073  0879               	movf	_InterruptCounter+1,w
   462     0074  3A80               	xorlw	128
   463     0075  00F3               	movwf	??_ISR+3
   464     0076  0872               	movf	??_ISR+2,w
   465     0077  3A80               	xorlw	128
   466     0078  0273               	subwf	??_ISR+3,w
   467     0079  1D03               	skipz
   468     007A  287D               	goto	u15_25
   469     007B  0871               	movf	??_ISR+1,w
   470     007C  0278               	subwf	_InterruptCounter,w
   471     007D                     u15_25:
   472     007D  1C03               	skipc
   473     007E  2880               	goto	u15_21
   474     007F  2881               	goto	u15_20
   475     0080                     u15_21:
   476     0080  288F               	goto	i1l46
   477     0081                     u15_20:
   478     0081                     i1l718:
   479                           
   480                           ;main.c: 68:             if (PORTA & (1 << 0x00)) PORTA &= ~(1 << 0x00);
   481     0081  1283               	bcf	3,5	;RP0=0, select bank0
   482     0082  1303               	bcf	3,6	;RP1=0, select bank0
   483     0083  1C05               	btfss	5,0	;volatile
   484     0084  2886               	goto	u16_21
   485     0085  2887               	goto	u16_20
   486     0086                     u16_21:
   487     0086  288C               	goto	i1l44
   488     0087                     u16_20:
   489     0087                     i1l720:
   490     0087  30FE               	movlw	254
   491     0088  00F0               	movwf	??_ISR
   492     0089  0870               	movf	??_ISR,w
   493     008A  0585               	andwf	5,f	;volatile
   494     008B  288D               	goto	i1l722
   495     008C                     i1l44:	
   496                           ;main.c: 69:             else PORTA |= (1 << 0x00);
   497                           
   498     008C  1405               	bsf	5,0	;volatile
   499     008D                     i1l722:
   500                           
   501                           ;main.c: 70:             InterruptCounter = 0;
   502     008D  01F8               	clrf	_InterruptCounter
   503     008E  01F9               	clrf	_InterruptCounter+1
   504     008F                     i1l46:
   505     008F  0877               	movf	??_ISR+7,w
   506     0090  00FF               	movwf	btemp+1
   507     0091  0876               	movf	??_ISR+6,w
   508     0092  008A               	movwf	10
   509     0093  0875               	movf	??_ISR+5,w
   510     0094  0084               	movwf	4
   511     0095  0E74               	swapf	??_ISR+4,w
   512     0096  0083               	movwf	3
   513     0097  0EFE               	swapf	btemp,f
   514     0098  0E7E               	swapf	btemp,w
   515     0099  0009               	retfie
   516     009A                     __end_of_ISR:
   517     007E                     btemp	set	126	;btemp
   518     007E                     wtemp0	set	126
   519                           
   520                           	psect	intentry
   521     0004                     __pintentry:	
   522                           ;incstack = 0
   523                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath]
   524                           
   525     0004                     interrupt_function:
   526     007E                     saved_w	set	btemp
   527     0004  00FE               	movwf	btemp
   528     0005  0E03               	swapf	3,w
   529     0006  00F4               	movwf	??_ISR+4
   530     0007  0804               	movf	4,w
   531     0008  00F5               	movwf	??_ISR+5
   532     0009  080A               	movf	10,w
   533     000A  00F6               	movwf	??_ISR+6
   534     000B  087F               	movf	btemp+1,w
   535     000C  00F7               	movwf	??_ISR+7
   536     000D  285B               	ljmp	_ISR
   537                           
   538                           	psect	idloc
   539                           
   540                           ;Config register IDLOC0 @ 0x2000
   541                           ;	unspecified, using default values
   542     2000                     	org	8192
   543     2000  3FFF               	dw	16383
   544                           
   545                           ;Config register IDLOC1 @ 0x2001
   546                           ;	unspecified, using default values
   547     2001                     	org	8193
   548     2001  3FFF               	dw	16383
   549                           
   550                           ;Config register IDLOC2 @ 0x2002
   551                           ;	unspecified, using default values
   552     2002                     	org	8194
   553     2002  3FFF               	dw	16383
   554                           
   555                           ;Config register IDLOC3 @ 0x2003
   556                           ;	unspecified, using default values
   557     2003                     	org	8195
   558     2003  3FFF               	dw	16383
   559                           
   560                           	psect	config
   561                           
   562                           ;Config register CONFIG @ 0x2007
   563                           ;	Oscillator Selection bits
   564                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
   565                           ;	Watchdog Timer Enable bit
   566                           ;	WDTE = OFF, WDT disabled
   567                           ;	Power-up Timer Enable bit
   568                           ;	PWRTE = ON, PWRT enabled
   569                           ;	RA5/MCLR/VPP Pin Function Select bit
   570                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
   571                           ;	Brown-out Detect Enable bit
   572                           ;	BOREN = ON, BOD enabled
   573                           ;	Low-Voltage Programming Enable bit
   574                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
   575                           ;	Data EE Memory Code Protection bit
   576                           ;	CPD = OFF, Data memory code protection off
   577                           ;	Flash Program Memory Code Protection bit
   578                           ;	CP = OFF, Code protection off
   579     2007                     	org	8199
   580     2007  3F62               	dw	16226

Data Sizes:
    Strings     0
    Constant    8
    Data        0
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      10
    BANK0            80      5       6
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 5     5      0     112
                                              0 BANK0      5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 0
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  8     8      0       0
                                              0 COMMON     8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA              80      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      8       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
BANK0               50      5       6       3        7.5%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      10       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK2            30      0       0       8        0.0%
BANK2               30      0       0       9        0.0%
DATA                 0      0      10      10        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Nov 15 12:48:49 2022

                      pc 0002                       l30 0057                       l29 001F  
                     u90 0029                       u91 0028                       fsr 0004  
                    l700 0049                      l702 004D                      l704 0053  
                    l706 0055                      l690 0024                      l682 0016  
                    l692 0029                      l684 001A                      l694 002E  
                    l686 001B                      l696 003D                      l688 001D  
                    l698 0044                      u100 002E                      u101 002D  
                    u110 0044                      u111 0043                      u120 0049  
                    u121 0048                      u130 0053                      u131 0052  
                    u177 0036                      _ISR 005B                      fsr0 0004  
                   ?_ISR 0070                     i1l44 008C                     i1l46 008F  
                   _TMR0 0001         _TempoSelezionato 0025                     _main 0016  
                   btemp 007E                     start 000E                    ??_ISR 0070  
                  ?_main 0070                    i1l710 005B                    i1l720 0087  
                  i1l712 005F                    i1l722 008D                    i1l714 0060  
                  i1l716 006A                    i1l718 0081                    u14_20 005F  
                  u14_21 005E                    u15_20 0081                    u15_21 0080  
                  u15_25 007D                    u16_20 0087                    u16_21 0086  
                  _PORTA 0005                    _TRISA 0085                    _TRISB 0086  
                  _tempi 00A0                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 000F             __end_of_main 005B  
                 ??_main 0020                   _INTCON 000B                   saved_w 007E  
__end_of__initialization 0014           __pcstackCOMMON 0070            __end_of_tempi 00A8  
             __pbssBANK0 0025               __pmaintext 0016               __pintentry 0004  
             __stringtab 009A           main@old_button 0023                  __ptext1 005B  
   end_of_initialization 0014                _PORTAbits 0005         _InterruptCounter 0078  
             main@button 0024      start_initialization 000F              __end_of_ISR 009A  
            __pbssCOMMON 0078                ___latbits 0000            __pcstackBANK0 0020  
              __pstrings 009A        interrupt_function 0004              __stringbase 009F  
     __end_of__stringtab 00A0               _INTCONbits 000B                 intlevel1 0000  
              stringcode 009A               _OPTION_REG 0081                 stringdir 009A  
               stringtab 009A  
