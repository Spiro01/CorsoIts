

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jan 18 21:58:29 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    11                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=2
    15                           	psect	text6,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    17                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    18                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    19                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    20                           	psect	text11,local,class=CODE,merge=1,delta=2,group=1
    21                           	psect	text12,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25     0000                     
    26                           ; Version 2.40
    27                           ; Generated 17/11/2021 GMT
    28                           ; 
    29                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F877A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61     0000                     	;# 
    62     0001                     	;# 
    63     0002                     	;# 
    64     0003                     	;# 
    65     0004                     	;# 
    66     0005                     	;# 
    67     0006                     	;# 
    68     0007                     	;# 
    69     0008                     	;# 
    70     0009                     	;# 
    71     000A                     	;# 
    72     000B                     	;# 
    73     000C                     	;# 
    74     000D                     	;# 
    75     000E                     	;# 
    76     000E                     	;# 
    77     000F                     	;# 
    78     0010                     	;# 
    79     0011                     	;# 
    80     0012                     	;# 
    81     0013                     	;# 
    82     0014                     	;# 
    83     0015                     	;# 
    84     0015                     	;# 
    85     0016                     	;# 
    86     0017                     	;# 
    87     0018                     	;# 
    88     0019                     	;# 
    89     001A                     	;# 
    90     001B                     	;# 
    91     001B                     	;# 
    92     001C                     	;# 
    93     001D                     	;# 
    94     001E                     	;# 
    95     001F                     	;# 
    96     0081                     	;# 
    97     0085                     	;# 
    98     0086                     	;# 
    99     0087                     	;# 
   100     0088                     	;# 
   101     0089                     	;# 
   102     008C                     	;# 
   103     008D                     	;# 
   104     008E                     	;# 
   105     0091                     	;# 
   106     0092                     	;# 
   107     0093                     	;# 
   108     0094                     	;# 
   109     0098                     	;# 
   110     0099                     	;# 
   111     009C                     	;# 
   112     009D                     	;# 
   113     009E                     	;# 
   114     009F                     	;# 
   115     010C                     	;# 
   116     010D                     	;# 
   117     010E                     	;# 
   118     010F                     	;# 
   119     018C                     	;# 
   120     018D                     	;# 
   121     0000                     	;# 
   122     0001                     	;# 
   123     0002                     	;# 
   124     0003                     	;# 
   125     0004                     	;# 
   126     0005                     	;# 
   127     0006                     	;# 
   128     0007                     	;# 
   129     0008                     	;# 
   130     0009                     	;# 
   131     000A                     	;# 
   132     000B                     	;# 
   133     000C                     	;# 
   134     000D                     	;# 
   135     000E                     	;# 
   136     000E                     	;# 
   137     000F                     	;# 
   138     0010                     	;# 
   139     0011                     	;# 
   140     0012                     	;# 
   141     0013                     	;# 
   142     0014                     	;# 
   143     0015                     	;# 
   144     0015                     	;# 
   145     0016                     	;# 
   146     0017                     	;# 
   147     0018                     	;# 
   148     0019                     	;# 
   149     001A                     	;# 
   150     001B                     	;# 
   151     001B                     	;# 
   152     001C                     	;# 
   153     001D                     	;# 
   154     001E                     	;# 
   155     001F                     	;# 
   156     0081                     	;# 
   157     0085                     	;# 
   158     0086                     	;# 
   159     0087                     	;# 
   160     0088                     	;# 
   161     0089                     	;# 
   162     008C                     	;# 
   163     008D                     	;# 
   164     008E                     	;# 
   165     0091                     	;# 
   166     0092                     	;# 
   167     0093                     	;# 
   168     0094                     	;# 
   169     0098                     	;# 
   170     0099                     	;# 
   171     009C                     	;# 
   172     009D                     	;# 
   173     009E                     	;# 
   174     009F                     	;# 
   175     010C                     	;# 
   176     010D                     	;# 
   177     010E                     	;# 
   178     010F                     	;# 
   179     018C                     	;# 
   180     018D                     	;# 
   181     0000                     	;# 
   182     0001                     	;# 
   183     0002                     	;# 
   184     0003                     	;# 
   185     0004                     	;# 
   186     0005                     	;# 
   187     0006                     	;# 
   188     0007                     	;# 
   189     0008                     	;# 
   190     0009                     	;# 
   191     000A                     	;# 
   192     000B                     	;# 
   193     000C                     	;# 
   194     000D                     	;# 
   195     000E                     	;# 
   196     000E                     	;# 
   197     000F                     	;# 
   198     0010                     	;# 
   199     0011                     	;# 
   200     0012                     	;# 
   201     0013                     	;# 
   202     0014                     	;# 
   203     0015                     	;# 
   204     0015                     	;# 
   205     0016                     	;# 
   206     0017                     	;# 
   207     0018                     	;# 
   208     0019                     	;# 
   209     001A                     	;# 
   210     001B                     	;# 
   211     001B                     	;# 
   212     001C                     	;# 
   213     001D                     	;# 
   214     001E                     	;# 
   215     001F                     	;# 
   216     0081                     	;# 
   217     0085                     	;# 
   218     0086                     	;# 
   219     0087                     	;# 
   220     0088                     	;# 
   221     0089                     	;# 
   222     008C                     	;# 
   223     008D                     	;# 
   224     008E                     	;# 
   225     0091                     	;# 
   226     0092                     	;# 
   227     0093                     	;# 
   228     0094                     	;# 
   229     0098                     	;# 
   230     0099                     	;# 
   231     009C                     	;# 
   232     009D                     	;# 
   233     009E                     	;# 
   234     009F                     	;# 
   235     010C                     	;# 
   236     010D                     	;# 
   237     010E                     	;# 
   238     010F                     	;# 
   239     018C                     	;# 
   240     018D                     	;# 
   241     0000                     	;# 
   242     0001                     	;# 
   243     0002                     	;# 
   244     0003                     	;# 
   245     0004                     	;# 
   246     0005                     	;# 
   247     0006                     	;# 
   248     0007                     	;# 
   249     0008                     	;# 
   250     0009                     	;# 
   251     000A                     	;# 
   252     000B                     	;# 
   253     000C                     	;# 
   254     000D                     	;# 
   255     000E                     	;# 
   256     000E                     	;# 
   257     000F                     	;# 
   258     0010                     	;# 
   259     0011                     	;# 
   260     0012                     	;# 
   261     0013                     	;# 
   262     0014                     	;# 
   263     0015                     	;# 
   264     0015                     	;# 
   265     0016                     	;# 
   266     0017                     	;# 
   267     0018                     	;# 
   268     0019                     	;# 
   269     001A                     	;# 
   270     001B                     	;# 
   271     001B                     	;# 
   272     001C                     	;# 
   273     001D                     	;# 
   274     001E                     	;# 
   275     001F                     	;# 
   276     0081                     	;# 
   277     0085                     	;# 
   278     0086                     	;# 
   279     0087                     	;# 
   280     0088                     	;# 
   281     0089                     	;# 
   282     008C                     	;# 
   283     008D                     	;# 
   284     008E                     	;# 
   285     0091                     	;# 
   286     0092                     	;# 
   287     0093                     	;# 
   288     0094                     	;# 
   289     0098                     	;# 
   290     0099                     	;# 
   291     009C                     	;# 
   292     009D                     	;# 
   293     009E                     	;# 
   294     009F                     	;# 
   295     010C                     	;# 
   296     010D                     	;# 
   297     010E                     	;# 
   298     010F                     	;# 
   299     018C                     	;# 
   300     018D                     	;# 
   301                           
   302                           	psect	strings
   303     0003                     __pstrings:
   304     0003                     stringtab:
   305     0003                     __stringtab:
   306                           
   307                           ;	String table - string pointers are 1 byte each
   308     0003  1BFF               	btfsc	btemp+1,7
   309     0004  280D               	ljmp	stringcode
   310     0005  1383               	bcf	3,7
   311     0006  187F               	btfsc	btemp+1,0
   312     0007  1783               	bsf	3,7
   313     0008  0800               	movf	0,w
   314     0009  0A84               	incf	4,f
   315     000A  1903               	skipnz
   316     000B  0AFF               	incf	btemp+1,f
   317     000C  0008               	return
   318     000D                     stringcode:
   319     000D                     stringdir:
   320     000D  3000               	movlw	high stringdir
   321     000E  008A               	movwf	10
   322     000F  0804               	movf	4,w
   323     0010  0A84               	incf	4,f
   324     0011  0782               	addwf	2,f
   325     0012                     __stringbase:
   326     0012  3400               	retlw	0
   327     0013                     __end_of__stringtab:
   328     0013                     _keypad:
   329     0013  342A               	retlw	42
   330     0014  3407               	retlw	7
   331     0015  3404               	retlw	4
   332     0016  3401               	retlw	1
   333     0017  3400               	retlw	0
   334     0018  3408               	retlw	8
   335     0019  3405               	retlw	5
   336     001A  3402               	retlw	2
   337     001B  3423               	retlw	35
   338     001C  3409               	retlw	9
   339     001D  3406               	retlw	6
   340     001E  3403               	retlw	3
   341     001F                     __end_of_keypad:
   342     0008                     _PORTD	set	8
   343     0006                     _PORTB	set	6
   344     0009                     _PORTEbits	set	9
   345     0008                     _PORTDbits	set	8
   346     0086                     _TRISB	set	134
   347     0089                     _TRISE	set	137
   348     0088                     _TRISD	set	136
   349     001F                     STR_1:
   350     001F  3442               	retlw	66	;'B'
   351     0020  3465               	retlw	101	;'e'
   352     0021  346E               	retlw	110	;'n'
   353     0022  3476               	retlw	118	;'v'
   354     0023  3465               	retlw	101	;'e'
   355     0024  346E               	retlw	110	;'n'
   356     0025  3475               	retlw	117	;'u'
   357     0026  3474               	retlw	116	;'t'
   358     0027  346F               	retlw	111	;'o'
   359     0028  3400               	retlw	0
   360                           
   361                           	psect	cinit
   362     07F9                     start_initialization:	
   363                           ; #config settings
   364                           
   365     07F9                     __initialization:
   366                           
   367                           ; Clear objects allocated to BANK0
   368     07F9  1283               	bcf	3,5	;RP0=0, select bank0
   369     07FA  1303               	bcf	3,6	;RP1=0, select bank0
   370     07FB  01E5               	clrf	__pbssBANK0& (0+127)
   371     07FC                     end_of_initialization:	
   372                           ;End of C runtime variable initialization code
   373                           
   374     07FC                     __end_of__initialization:
   375     07FC  0183               	clrf	3
   376     07FD  120A  118A  2E84   	ljmp	_main	;jump to C main() function
   377                           
   378                           	psect	bssBANK0
   379     0065                     __pbssBANK0:
   380     0065                     Numpad_Read@oldKeyVal:
   381     0065                     	ds	1
   382                           
   383                           	psect	cstackCOMMON
   384     0070                     __pcstackCOMMON:
   385     0070                     ?_Lcd_Init:
   386     0070                     ?_Numpad_Read:	
   387                           ; 1 bytes @ 0x0
   388                           
   389     0070                     ??_Numpad_Read:	
   390                           ; 1 bytes @ 0x0
   391                           
   392     0070                     ?_Lcd_Clear:	
   393                           ; 1 bytes @ 0x0
   394                           
   395     0070                     ?_Lcd_Write_Char:	
   396                           ; 1 bytes @ 0x0
   397                           
   398     0070                     ?_main:	
   399                           ; 1 bytes @ 0x0
   400                           
   401     0070                     ?_Lcd_Port:	
   402                           ; 1 bytes @ 0x0
   403                           
   404     0070                     ??_Lcd_Port:	
   405                           ; 1 bytes @ 0x0
   406                           
   407     0070                     ?_Lcd_Cmd:	
   408                           ; 1 bytes @ 0x0
   409                           
   410     0070                     ?___awdiv:	
   411                           ; 1 bytes @ 0x0
   412                           
   413     0070                     ?___lwdiv:	
   414                           ; 2 bytes @ 0x0
   415                           
   416     0070                     ?___lwmod:	
   417                           ; 2 bytes @ 0x0
   418                           
   419     0070                     Lcd_Port@a:	
   420                           ; 2 bytes @ 0x0
   421                           
   422     0070                     ___awdiv@divisor:	
   423                           ; 1 bytes @ 0x0
   424                           
   425     0070                     ___lwdiv@divisor:	
   426                           ; 2 bytes @ 0x0
   427                           
   428     0070                     ___lwmod@divisor:	
   429                           ; 2 bytes @ 0x0
   430                           
   431                           
   432                           ; 2 bytes @ 0x0
   433     0070                     	ds	1
   434     0071                     ??_Lcd_Write_Char:
   435     0071                     ??_Lcd_Cmd:	
   436                           ; 1 bytes @ 0x1
   437                           
   438                           
   439                           ; 1 bytes @ 0x1
   440     0071                     	ds	1
   441     0072                     Lcd_Write_Char@temp:
   442     0072                     Numpad_Read@currentKey:	
   443                           ; 1 bytes @ 0x2
   444                           
   445     0072                     ___awdiv@dividend:	
   446                           ; 1 bytes @ 0x2
   447                           
   448     0072                     ___lwdiv@dividend:	
   449                           ; 2 bytes @ 0x2
   450                           
   451     0072                     ___lwmod@dividend:	
   452                           ; 2 bytes @ 0x2
   453                           
   454                           
   455                           ; 2 bytes @ 0x2
   456     0072                     	ds	1
   457     0073                     Lcd_Cmd@a:
   458     0073                     Lcd_Write_Char@y:	
   459                           ; 1 bytes @ 0x3
   460                           
   461     0073                     Numpad_Read@currentKeyVal:	
   462                           ; 1 bytes @ 0x3
   463                           
   464                           
   465                           ; 1 bytes @ 0x3
   466     0073                     	ds	1
   467     0074                     ??_Lcd_Init:
   468     0074                     ?_Lcd_Set_Cursor:	
   469                           ; 1 bytes @ 0x4
   470                           
   471     0074                     ??_Lcd_Clear:	
   472                           ; 1 bytes @ 0x4
   473                           
   474     0074                     ??___awdiv:	
   475                           ; 1 bytes @ 0x4
   476                           
   477     0074                     ??___lwdiv:	
   478                           ; 1 bytes @ 0x4
   479                           
   480     0074                     ??___lwmod:	
   481                           ; 1 bytes @ 0x4
   482                           
   483     0074                     Lcd_Set_Cursor@colonna:	
   484                           ; 1 bytes @ 0x4
   485                           
   486     0074                     Lcd_Write_Char@a:	
   487                           ; 1 bytes @ 0x4
   488                           
   489     0074                     Numpad_Read@colScan:	
   490                           ; 1 bytes @ 0x4
   491                           
   492                           
   493                           ; 1 bytes @ 0x4
   494     0074                     	ds	1
   495     0075                     ??_Lcd_Set_Cursor:
   496     0075                     ?_Lcd_Write_String:	
   497                           ; 1 bytes @ 0x5
   498                           
   499     0075                     Numpad_Read@rowScan:	
   500                           ; 1 bytes @ 0x5
   501                           
   502     0075                     ___awdiv@counter:	
   503                           ; 1 bytes @ 0x5
   504                           
   505     0075                     ___lwmod@counter:	
   506                           ; 1 bytes @ 0x5
   507                           
   508     0075                     Lcd_Write_String@a:	
   509                           ; 1 bytes @ 0x5
   510                           
   511     0075                     ___lwdiv@quotient:	
   512                           ; 2 bytes @ 0x5
   513                           
   514                           
   515                           ; 2 bytes @ 0x5
   516     0075                     	ds	1
   517     0076                     Lcd_Set_Cursor@riga:
   518     0076                     ___awdiv@sign:	
   519                           ; 1 bytes @ 0x6
   520                           
   521                           
   522                           ; 1 bytes @ 0x6
   523     0076                     	ds	1
   524     0077                     ??_Lcd_Write_String:
   525     0077                     Lcd_Set_Cursor@z:	
   526                           ; 1 bytes @ 0x7
   527                           
   528     0077                     ___lwdiv@counter:	
   529                           ; 1 bytes @ 0x7
   530                           
   531     0077                     ___awdiv@quotient:	
   532                           ; 1 bytes @ 0x7
   533                           
   534                           
   535                           ; 2 bytes @ 0x7
   536     0077                     	ds	1
   537     0078                     Lcd_Set_Cursor@y:
   538                           
   539                           ; 1 bytes @ 0x8
   540     0078                     	ds	1
   541     0079                     Lcd_Set_Cursor@temp:
   542                           
   543                           ; 1 bytes @ 0x9
   544     0079                     	ds	1
   545     007A                     Lcd_Write_String@i:
   546                           
   547                           ; 2 bytes @ 0xA
   548     007A                     	ds	2
   549     007C                     ?_Lcd_Write_Int:
   550     007C                     Lcd_Write_Int@val:	
   551                           ; 2 bytes @ 0xC
   552                           
   553                           
   554                           ; 2 bytes @ 0xC
   555     007C                     	ds	2
   556                           
   557                           	psect	cstackBANK0
   558     0020                     __pcstackBANK0:
   559     0020                     ??_Lcd_Write_Int:
   560                           
   561                           ; 1 bytes @ 0x0
   562     0020                     	ds	3
   563     0023                     Lcd_Write_Int@buffer:
   564                           
   565                           ; 50 bytes @ 0x3
   566     0023                     	ds	50
   567     0055                     Lcd_Write_Int@isNeg:
   568                           
   569                           ; 1 bytes @ 0x35
   570     0055                     	ds	1
   571     0056                     Lcd_Write_Int@n1:
   572                           
   573                           ; 2 bytes @ 0x36
   574     0056                     	ds	2
   575     0058                     Lcd_Write_Int@n:
   576                           
   577                           ; 2 bytes @ 0x38
   578     0058                     	ds	2
   579     005A                     Lcd_Write_Int@t:
   580                           
   581                           ; 2 bytes @ 0x3A
   582     005A                     	ds	2
   583     005C                     Lcd_Write_Int@i:
   584                           
   585                           ; 2 bytes @ 0x3C
   586     005C                     	ds	2
   587     005E                     ??_main:
   588                           
   589                           ; 1 bytes @ 0x3E
   590     005E                     	ds	2
   591     0060                     main@risultato:
   592                           
   593                           ; 1 bytes @ 0x40
   594     0060                     	ds	1
   595     0061                     main@operatore:
   596                           
   597                           ; 2 bytes @ 0x41
   598     0061                     	ds	2
   599     0063                     main@read:
   600                           
   601                           ; 1 bytes @ 0x43
   602     0063                     	ds	1
   603     0064                     main@selettore:
   604                           
   605                           ; 1 bytes @ 0x44
   606     0064                     	ds	1
   607                           
   608                           	psect	maintext
   609     0684                     __pmaintext:	
   610 ;;
   611 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   612 ;;
   613 ;; *************** function _main *****************
   614 ;; Defined at:
   615 ;;		line 23 in file "main.c"
   616 ;; Parameters:    Size  Location     Type
   617 ;;		None
   618 ;; Auto vars:     Size  Location     Type
   619 ;;  operatore       2   65[BANK0 ] unsigned char [2]
   620 ;;  selettore       1   68[BANK0 ] unsigned char 
   621 ;;  read            1   67[BANK0 ] unsigned char 
   622 ;;  risultato       1   64[BANK0 ] unsigned char 
   623 ;; Return value:  Size  Location     Type
   624 ;;                  1    wreg      void 
   625 ;; Registers used:
   626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   627 ;; Tracked objects:
   628 ;;		On entry : B00/0
   629 ;;		On exit  : 0/0
   630 ;;		Unchanged: 0/0
   631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   632 ;;      Params:         0       0       0       0       0
   633 ;;      Locals:         0       5       0       0       0
   634 ;;      Temps:          0       2       0       0       0
   635 ;;      Totals:         0       7       0       0       0
   636 ;;Total ram usage:        7 bytes
   637 ;; Hardware stack levels required when called: 4
   638 ;; This function calls:
   639 ;;		_Lcd_Clear
   640 ;;		_Lcd_Init
   641 ;;		_Lcd_Set_Cursor
   642 ;;		_Lcd_Write_Char
   643 ;;		_Lcd_Write_Int
   644 ;;		_Lcd_Write_String
   645 ;;		_Numpad_Read
   646 ;; This function is called by:
   647 ;;		Startup code after reset
   648 ;; This function uses a non-reentrant model
   649 ;;
   650                           
   651     0684                     _main:	
   652                           ;psect for function _main
   653                           
   654     0684                     l1338:	
   655                           ;incstack = 0
   656                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   657                           
   658                           
   659                           ;main.c: 26:     Lcd_Init();
   660     0684  120A  118A  252C  120A  118A  	fcall	_Lcd_Init
   661                           
   662                           ;main.c: 28:     Lcd_Set_Cursor(0, 3);
   663     0689  3003               	movlw	3
   664     068A  00F4               	movwf	Lcd_Set_Cursor@colonna
   665     068B  3000               	movlw	0
   666     068C  120A  118A  24E7  120A  118A  	fcall	_Lcd_Set_Cursor
   667     0691                     l1340:
   668                           
   669                           ;main.c: 29:     Lcd_Write_String("Benvenuto");
   670     0691  300D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   671     0692  00F5               	movwf	Lcd_Write_String@a
   672     0693  3080               	movlw	128
   673     0694  00F6               	movwf	Lcd_Write_String@a+1
   674     0695  120A  118A  2461  120A  118A  	fcall	_Lcd_Write_String
   675     069A                     l1342:
   676     069A                     l1344:
   677                           
   678                           ;main.c: 36:         read = Numpad_Read();
   679     069A  120A  118A  25F8  120A  118A  	fcall	_Numpad_Read
   680     069F  1283               	bcf	3,5	;RP0=0, select bank0
   681     06A0  1303               	bcf	3,6	;RP1=0, select bank0
   682     06A1  00E3               	movwf	main@read
   683     06A2                     l1346:
   684                           
   685                           ;main.c: 37:         if (read >= 0 && read <= 9) {
   686     06A2  300A               	movlw	10
   687     06A3  0263               	subwf	main@read,w
   688     06A4  1803               	skipnc
   689     06A5  2EA7               	goto	u1101
   690     06A6  2EA8               	goto	u1100
   691     06A7                     u1101:
   692     06A7  2ED9               	goto	l1360
   693     06A8                     u1100:
   694     06A8                     l1348:
   695                           
   696                           ;main.c: 38:             if (!selettore) Lcd_Clear();
   697     06A8  0864               	movf	main@selettore,w
   698     06A9  1D03               	btfss	3,2
   699     06AA  2EAC               	goto	u1111
   700     06AB  2EAD               	goto	u1110
   701     06AC                     u1111:
   702     06AC  2EB2               	goto	l1352
   703     06AD                     u1110:
   704     06AD                     l1350:
   705     06AD  120A  118A  23A2  120A  118A  	fcall	_Lcd_Clear
   706     06B2                     l1352:
   707                           
   708                           ;main.c: 39:             if (selettore) Lcd_Set_Cursor(0, 2);
   709     06B2  1283               	bcf	3,5	;RP0=0, select bank0
   710     06B3  1303               	bcf	3,6	;RP1=0, select bank0
   711     06B4  0864               	movf	main@selettore,w
   712     06B5  1903               	btfsc	3,2
   713     06B6  2EB8               	goto	u1121
   714     06B7  2EB9               	goto	u1120
   715     06B8                     u1121:
   716     06B8  2EC1               	goto	l1356
   717     06B9                     u1120:
   718     06B9                     l1354:
   719     06B9  3002               	movlw	2
   720     06BA  00F4               	movwf	Lcd_Set_Cursor@colonna
   721     06BB  3000               	movlw	0
   722     06BC  120A  118A  24E7  120A  118A  	fcall	_Lcd_Set_Cursor
   723     06C1                     l1356:
   724                           
   725                           ;main.c: 40:             operatore[selettore] = read;
   726     06C1  1283               	bcf	3,5	;RP0=0, select bank0
   727     06C2  1303               	bcf	3,6	;RP1=0, select bank0
   728     06C3  0864               	movf	main@selettore,w
   729     06C4  3E61               	addlw	(low (main@operatore| 0))& (0+255)
   730     06C5  0084               	movwf	4
   731     06C6  0863               	movf	main@read,w
   732     06C7  1383               	bcf	3,7	;select IRP bank0
   733     06C8  0080               	movwf	0
   734     06C9                     l1358:
   735                           
   736                           ;main.c: 41:             Lcd_Write_Int(operatore[selettore]);
   737     06C9  0864               	movf	main@selettore,w
   738     06CA  3E61               	addlw	(low (main@operatore| 0))& (0+255)
   739     06CB  0084               	movwf	4
   740     06CC  0800               	movf	0,w
   741     06CD  00DE               	movwf	??_main
   742     06CE  01DF               	clrf	??_main+1
   743     06CF  085E               	movf	??_main,w
   744     06D0  00FC               	movwf	Lcd_Write_Int@val
   745     06D1  085F               	movf	??_main+1,w
   746     06D2  00FD               	movwf	Lcd_Write_Int@val+1
   747     06D3  120A  118A  2718  120A  118A  	fcall	_Lcd_Write_Int
   748                           
   749                           ;main.c: 42:         } else if (read == '*') {
   750     06D8  2E9A               	goto	l1344
   751     06D9                     l1360:
   752     06D9  302A               	movlw	42
   753     06DA  0663               	xorwf	main@read,w
   754     06DB  1D03               	btfss	3,2
   755     06DC  2EDE               	goto	u1131
   756     06DD  2EDF               	goto	u1130
   757     06DE                     u1131:
   758     06DE  2EEF               	goto	l1368
   759     06DF                     u1130:
   760     06DF                     l1362:
   761                           
   762                           ;main.c: 43:             if (selettore < 1) {
   763     06DF  0864               	movf	main@selettore,w
   764     06E0  1D03               	btfss	3,2
   765     06E1  2EE3               	goto	u1141
   766     06E2  2EE4               	goto	u1140
   767     06E3                     u1141:
   768     06E3  2EFB               	goto	l1372
   769     06E4                     u1140:
   770     06E4                     l1364:
   771                           
   772                           ;main.c: 44:                 selettore++;
   773     06E4  3001               	movlw	1
   774     06E5  00DE               	movwf	??_main
   775     06E6  085E               	movf	??_main,w
   776     06E7  07E4               	addwf	main@selettore,f
   777     06E8                     l1366:
   778                           
   779                           ;main.c: 45:                 Lcd_Write_Char('+');
   780     06E8  302B               	movlw	43
   781     06E9  120A  118A  23F2  120A  118A  	fcall	_Lcd_Write_Char
   782     06EE  2E9A               	goto	l1344
   783     06EF                     l1368:
   784     06EF  3023               	movlw	35
   785     06F0  0663               	xorwf	main@read,w
   786     06F1  1D03               	btfss	3,2
   787     06F2  2EF4               	goto	u1151
   788     06F3  2EF5               	goto	u1150
   789     06F4                     u1151:
   790     06F4  2E9A               	goto	l1344
   791     06F5                     u1150:
   792     06F5                     l1370:
   793                           
   794                           ;main.c: 48:             if (selettore < 1) continue;
   795     06F5  0864               	movf	main@selettore,w
   796     06F6  1D03               	btfss	3,2
   797     06F7  2EF9               	goto	u1161
   798     06F8  2EFA               	goto	u1160
   799     06F9                     u1161:
   800     06F9  2EFC               	goto	l1374
   801     06FA                     u1160:
   802     06FA  2E9A               	goto	l1344
   803     06FB                     l1372:
   804     06FB  2E9A               	goto	l1344
   805     06FC                     l1374:
   806                           
   807                           ;main.c: 49:             risultato = operatore[0] + operatore[1];
   808     06FC  0861               	movf	main@operatore,w
   809     06FD  0762               	addwf	main@operatore+1,w
   810     06FE  00E0               	movwf	main@risultato
   811     06FF                     l1376:
   812                           
   813                           ;main.c: 50:             selettore = 0;
   814     06FF  01E4               	clrf	main@selettore
   815     0700                     l1378:
   816                           
   817                           ;main.c: 51:             Lcd_Write_Char('=');
   818     0700  303D               	movlw	61
   819     0701  120A  118A  23F2  120A  118A  	fcall	_Lcd_Write_Char
   820     0706                     l1380:
   821                           
   822                           ;main.c: 52:             Lcd_Write_Int(risultato);
   823     0706  1283               	bcf	3,5	;RP0=0, select bank0
   824     0707  1303               	bcf	3,6	;RP1=0, select bank0
   825     0708  0860               	movf	main@risultato,w
   826     0709  00DE               	movwf	??_main
   827     070A  01DF               	clrf	??_main+1
   828     070B  085E               	movf	??_main,w
   829     070C  00FC               	movwf	Lcd_Write_Int@val
   830     070D  085F               	movf	??_main+1,w
   831     070E  00FD               	movwf	Lcd_Write_Int@val+1
   832     070F  120A  118A  2718  120A  118A  	fcall	_Lcd_Write_Int
   833     0714  2E9A               	goto	l1344
   834     0715  120A  118A  2800   	ljmp	start
   835     0718                     __end_of_main:
   836                           
   837                           	psect	text1
   838     05F8                     __ptext1:	
   839 ;; *************** function _Numpad_Read *****************
   840 ;; Defined at:
   841 ;;		line 21 in file "numpad.c"
   842 ;; Parameters:    Size  Location     Type
   843 ;;		None
   844 ;; Auto vars:     Size  Location     Type
   845 ;;  rowScan         1    5[COMMON] unsigned char 
   846 ;;  colScan         1    4[COMMON] unsigned char 
   847 ;;  currentKeyVa    1    3[COMMON] unsigned char 
   848 ;;  currentKey      1    2[COMMON] unsigned char 
   849 ;; Return value:  Size  Location     Type
   850 ;;                  1    wreg      unsigned char 
   851 ;; Registers used:
   852 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   853 ;; Tracked objects:
   854 ;;		On entry : 0/0
   855 ;;		On exit  : 0/0
   856 ;;		Unchanged: 0/0
   857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   858 ;;      Params:         0       0       0       0       0
   859 ;;      Locals:         4       0       0       0       0
   860 ;;      Temps:          2       0       0       0       0
   861 ;;      Totals:         6       0       0       0       0
   862 ;;Total ram usage:        6 bytes
   863 ;; Hardware stack levels used: 2
   864 ;; This function calls:
   865 ;;		Nothing
   866 ;; This function is called by:
   867 ;;		_main
   868 ;; This function uses a non-reentrant model
   869 ;;
   870                           
   871     05F8                     _Numpad_Read:	
   872                           ;psect for function _Numpad_Read
   873                           
   874     05F8                     l1244:	
   875                           ;incstack = 0
   876                           ; Regs used in _Numpad_Read: [wreg-fsr0h+status,2+status,0+pclath]
   877                           
   878                           
   879                           ;numpad.c: 23:     TRISD |= 0x0f;
   880     05F8  300F               	movlw	15
   881     05F9  00F0               	movwf	??_Numpad_Read
   882     05FA  0870               	movf	??_Numpad_Read,w
   883     05FB  1683               	bsf	3,5	;RP0=1, select bank1
   884     05FC  1303               	bcf	3,6	;RP1=0, select bank1
   885     05FD  0488               	iorwf	8,f	;volatile
   886                           
   887                           ;numpad.c: 24:     TRISB &= ~0x07;
   888     05FE  30F8               	movlw	248
   889     05FF  00F0               	movwf	??_Numpad_Read
   890     0600  0870               	movf	??_Numpad_Read,w
   891     0601  0586               	andwf	6,f	;volatile
   892     0602                     l1246:
   893                           
   894                           ;numpad.c: 25:     char colScan, rowScan, currentKeyVal, currentKey;;numpad.c: 26:     s
      +                          tatic char oldKeyVal;;numpad.c: 27:     for (colScan = 0; colScan < 3; colScan++) {
   895     0602  01F4               	clrf	Numpad_Read@colScan
   896     0603                     l1252:
   897                           
   898                           ;numpad.c: 28:         PORTB |= 0x07;
   899     0603  3007               	movlw	7
   900     0604  00F0               	movwf	??_Numpad_Read
   901     0605  0870               	movf	??_Numpad_Read,w
   902     0606  1283               	bcf	3,5	;RP0=0, select bank0
   903     0607  0486               	iorwf	6,f	;volatile
   904                           
   905                           ;numpad.c: 29:         PORTB &= ~(1 << colScan);
   906     0608  3001               	movlw	1
   907     0609  00F0               	movwf	??_Numpad_Read
   908     060A  0A74               	incf	Numpad_Read@colScan,w
   909     060B  2E0E               	goto	u944
   910     060C                     u945:
   911     060C  1003               	clrc
   912     060D  0DF0               	rlf	??_Numpad_Read,f
   913     060E                     u944:
   914     060E  3EFF               	addlw	-1
   915     060F  1D03               	skipz
   916     0610  2E0C               	goto	u945
   917     0611  0870               	movf	??_Numpad_Read,w
   918     0612  3AFF               	xorlw	255
   919     0613  00F1               	movwf	??_Numpad_Read+1
   920     0614  0871               	movf	??_Numpad_Read+1,w
   921     0615  0586               	andwf	6,f	;volatile
   922     0616                     l1254:
   923                           
   924                           ;numpad.c: 30:         _delay((unsigned long)((15)*(20*1000000/4000.0)));
   925     0616  3062               	movlw	98
   926     0617  00F1               	movwf	??_Numpad_Read+1
   927     0618  3065               	movlw	101
   928     0619  00F0               	movwf	??_Numpad_Read
   929     061A                     u1177:
   930     061A  0BF0               	decfsz	??_Numpad_Read,f
   931     061B  2E1A               	goto	u1177
   932     061C  0BF1               	decfsz	??_Numpad_Read+1,f
   933     061D  2E1A               	goto	u1177
   934     061E  2E1F               	nop2
   935     061F                     l1256:
   936                           
   937                           ;numpad.c: 31:         for (rowScan = 0; rowScan < 4; rowScan++) {
   938     061F  01F5               	clrf	Numpad_Read@rowScan
   939     0620                     l1262:
   940                           
   941                           ;numpad.c: 32:             currentKeyVal = (PORTD & (1 << rowScan));
   942     0620  3001               	movlw	1
   943     0621  00F0               	movwf	??_Numpad_Read
   944     0622  0A75               	incf	Numpad_Read@rowScan,w
   945     0623  2E26               	goto	u954
   946     0624                     u955:
   947     0624  1003               	clrc
   948     0625  0DF0               	rlf	??_Numpad_Read,f
   949     0626                     u954:
   950     0626  3EFF               	addlw	-1
   951     0627  1D03               	skipz
   952     0628  2E24               	goto	u955
   953     0629  0870               	movf	??_Numpad_Read,w
   954     062A  1283               	bcf	3,5	;RP0=0, select bank0
   955     062B  1303               	bcf	3,6	;RP1=0, select bank0
   956     062C  0508               	andwf	8,w	;volatile
   957     062D  00F3               	movwf	Numpad_Read@currentKeyVal
   958                           
   959                           ;numpad.c: 34:             if (!currentKeyVal && oldKeyVal) {
   960     062E  0873               	movf	Numpad_Read@currentKeyVal,w
   961     062F  1D03               	btfss	3,2
   962     0630  2E32               	goto	u961
   963     0631  2E33               	goto	u960
   964     0632                     u961:
   965     0632  2E6C               	goto	l200
   966     0633                     u960:
   967     0633                     l1264:
   968     0633  0865               	movf	Numpad_Read@oldKeyVal,w
   969     0634  1903               	btfsc	3,2
   970     0635  2E37               	goto	u971
   971     0636  2E38               	goto	u970
   972     0637                     u971:
   973     0637  2E6C               	goto	l200
   974     0638                     u970:
   975     0638                     l1266:
   976                           
   977                           ;numpad.c: 35:                 currentKey = keypad[rowScan + (4 * colScan)];
   978     0638  0874               	movf	Numpad_Read@colScan,w
   979     0639  00F0               	movwf	??_Numpad_Read
   980     063A  3002               	movlw	2
   981     063B                     u985:
   982     063B  1003               	clrc
   983     063C  0DF0               	rlf	??_Numpad_Read,f
   984     063D  3EFF               	addlw	-1
   985     063E  1D03               	skipz
   986     063F  2E3B               	goto	u985
   987     0640  3001               	movlw	(low ((_keypad-__stringbase)| (0+32768)))& (0+255)
   988     0641  0770               	addwf	??_Numpad_Read,w
   989     0642  00F1               	movwf	??_Numpad_Read+1
   990     0643  0875               	movf	Numpad_Read@rowScan,w
   991     0644  0771               	addwf	??_Numpad_Read+1,w
   992     0645  0084               	movwf	4
   993     0646  120A  118A  200D  120A  118A  	fcall	stringdir
   994     064B  00F2               	movwf	Numpad_Read@currentKey
   995     064C                     l1268:
   996                           
   997                           ;numpad.c: 36:                 oldKeyVal = 0;
   998     064C  01E5               	clrf	Numpad_Read@oldKeyVal
   999                           
  1000                           ;numpad.c: 37:                 while (!currentKeyVal) {
  1001     064D  2E65               	goto	l1274
  1002     064E                     l1270:
  1003                           
  1004                           ;numpad.c: 38:                     currentKeyVal = (PORTD & (1 << rowScan));
  1005     064E  3001               	movlw	1
  1006     064F  00F0               	movwf	??_Numpad_Read
  1007     0650  0A75               	incf	Numpad_Read@rowScan,w
  1008     0651  2E54               	goto	u994
  1009     0652                     u995:
  1010     0652  1003               	clrc
  1011     0653  0DF0               	rlf	??_Numpad_Read,f
  1012     0654                     u994:
  1013     0654  3EFF               	addlw	-1
  1014     0655  1D03               	skipz
  1015     0656  2E52               	goto	u995
  1016     0657  0870               	movf	??_Numpad_Read,w
  1017     0658  1283               	bcf	3,5	;RP0=0, select bank0
  1018     0659  1303               	bcf	3,6	;RP1=0, select bank0
  1019     065A  0508               	andwf	8,w	;volatile
  1020     065B  00F3               	movwf	Numpad_Read@currentKeyVal
  1021     065C                     l1272:
  1022                           
  1023                           ;numpad.c: 39:                     _delay((unsigned long)((20)*(20*1000000/4000.0)));
  1024     065C  3082               	movlw	130
  1025     065D  00F1               	movwf	??_Numpad_Read+1
  1026     065E  30DD               	movlw	221
  1027     065F  00F0               	movwf	??_Numpad_Read
  1028     0660                     u1187:
  1029     0660  0BF0               	decfsz	??_Numpad_Read,f
  1030     0661  2E60               	goto	u1187
  1031     0662  0BF1               	decfsz	??_Numpad_Read+1,f
  1032     0663  2E60               	goto	u1187
  1033     0664  2E65               	nop2
  1034     0665                     l1274:
  1035                           
  1036                           ;numpad.c: 37:                 while (!currentKeyVal) {
  1037     0665  0873               	movf	Numpad_Read@currentKeyVal,w
  1038     0666  1903               	btfsc	3,2
  1039     0667  2E69               	goto	u1001
  1040     0668  2E6A               	goto	u1000
  1041     0669                     u1001:
  1042     0669  2E4E               	goto	l1270
  1043     066A                     u1000:
  1044     066A                     l1276:
  1045                           
  1046                           ;numpad.c: 41:                 return currentKey;
  1047     066A  0872               	movf	Numpad_Read@currentKey,w
  1048     066B  2E83               	goto	l204
  1049     066C                     l200:	
  1050                           ;numpad.c: 42:             }
  1051                           
  1052                           
  1053                           ;numpad.c: 44:             oldKeyVal = 1;
  1054     066C  01E5               	clrf	Numpad_Read@oldKeyVal
  1055     066D  0AE5               	incf	Numpad_Read@oldKeyVal,f
  1056     066E                     l1280:
  1057                           
  1058                           ;numpad.c: 45:         }
  1059     066E  3001               	movlw	1
  1060     066F  00F0               	movwf	??_Numpad_Read
  1061     0670  0870               	movf	??_Numpad_Read,w
  1062     0671  07F5               	addwf	Numpad_Read@rowScan,f
  1063     0672                     l1282:
  1064     0672  3004               	movlw	4
  1065     0673  0275               	subwf	Numpad_Read@rowScan,w
  1066     0674  1C03               	skipc
  1067     0675  2E77               	goto	u1011
  1068     0676  2E78               	goto	u1010
  1069     0677                     u1011:
  1070     0677  2E20               	goto	l1262
  1071     0678                     u1010:
  1072     0678                     l1284:
  1073                           
  1074                           ;numpad.c: 46:     }
  1075     0678  3001               	movlw	1
  1076     0679  00F0               	movwf	??_Numpad_Read
  1077     067A  0870               	movf	??_Numpad_Read,w
  1078     067B  07F4               	addwf	Numpad_Read@colScan,f
  1079     067C                     l1286:
  1080     067C  3003               	movlw	3
  1081     067D  0274               	subwf	Numpad_Read@colScan,w
  1082     067E  1C03               	skipc
  1083     067F  2E81               	goto	u1021
  1084     0680  2E82               	goto	u1020
  1085     0681                     u1021:
  1086     0681  2E03               	goto	l1252
  1087     0682                     u1020:
  1088     0682                     l1288:
  1089                           
  1090                           ;numpad.c: 47:     return 0xff;
  1091     0682  30FF               	movlw	255
  1092     0683                     l204:
  1093     0683  0008               	return
  1094     0684                     __end_of_Numpad_Read:
  1095                           
  1096                           	psect	text2
  1097     0718                     __ptext2:	
  1098 ;; *************** function _Lcd_Write_Int *****************
  1099 ;; Defined at:
  1100 ;;		line 121 in file "lcd.c"
  1101 ;; Parameters:    Size  Location     Type
  1102 ;;  val             2   12[COMMON] int 
  1103 ;; Auto vars:     Size  Location     Type
  1104 ;;  t               2   58[BANK0 ] int 
  1105 ;;  buffer         50    3[BANK0 ] unsigned char [50]
  1106 ;;  i               2   60[BANK0 ] int 
  1107 ;;  n               2   56[BANK0 ] int 
  1108 ;;  n1              2   54[BANK0 ] unsigned int 
  1109 ;;  isNeg           1   53[BANK0 ] unsigned char 
  1110 ;; Return value:  Size  Location     Type
  1111 ;;                  2   12[COMMON] PTR unsigned char 
  1112 ;; Registers used:
  1113 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1114 ;; Tracked objects:
  1115 ;;		On entry : 0/0
  1116 ;;		On exit  : 0/0
  1117 ;;		Unchanged: 0/0
  1118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1119 ;;      Params:         2       0       0       0       0
  1120 ;;      Locals:         0      59       0       0       0
  1121 ;;      Temps:          0       3       0       0       0
  1122 ;;      Totals:         2      62       0       0       0
  1123 ;;Total ram usage:       64 bytes
  1124 ;; Hardware stack levels used: 1
  1125 ;; Hardware stack levels required when called: 3
  1126 ;; This function calls:
  1127 ;;		_Lcd_Write_String
  1128 ;;		___awdiv
  1129 ;;		___lwdiv
  1130 ;;		___lwmod
  1131 ;; This function is called by:
  1132 ;;		_main
  1133 ;; This function uses a non-reentrant model
  1134 ;;
  1135                           
  1136     0718                     _Lcd_Write_Int:	
  1137                           ;psect for function _Lcd_Write_Int
  1138                           
  1139     0718                     l1294:	
  1140                           ;incstack = 0
  1141                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1142                           
  1143                           
  1144                           ;lcd.c: 123:     int n = val;
  1145     0718  087D               	movf	Lcd_Write_Int@val+1,w
  1146     0719  1283               	bcf	3,5	;RP0=0, select bank0
  1147     071A  1303               	bcf	3,6	;RP1=0, select bank0
  1148     071B  00D9               	movwf	Lcd_Write_Int@n+1
  1149     071C  087C               	movf	Lcd_Write_Int@val,w
  1150     071D  00D8               	movwf	Lcd_Write_Int@n
  1151     071E                     l1296:
  1152                           
  1153                           ;lcd.c: 124:     char buffer[50];;lcd.c: 125:     int i = 0;
  1154     071E  01DC               	clrf	Lcd_Write_Int@i
  1155     071F  01DD               	clrf	Lcd_Write_Int@i+1
  1156     0720                     l1298:
  1157                           
  1158                           ;lcd.c: 126:     char isNeg = n < 0;
  1159     0720  1BD9               	btfsc	Lcd_Write_Int@n+1,7
  1160     0721  2F23               	goto	u1031
  1161     0722  2F25               	goto	u1030
  1162     0723                     u1031:
  1163     0723  3001               	movlw	1
  1164     0724  2F26               	goto	u1040
  1165     0725                     u1030:
  1166     0725  3000               	movlw	0
  1167     0726                     u1040:
  1168     0726  00D5               	movwf	Lcd_Write_Int@isNeg
  1169     0727                     l1300:
  1170                           
  1171                           ;lcd.c: 128:     unsigned int n1 = isNeg ? -n : n;
  1172     0727  0855               	movf	Lcd_Write_Int@isNeg,w
  1173     0728  1D03               	btfss	3,2
  1174     0729  2F2B               	goto	u1051
  1175     072A  2F2C               	goto	u1050
  1176     072B                     u1051:
  1177     072B  2F31               	goto	l1304
  1178     072C                     u1050:
  1179     072C                     l1302:
  1180     072C  0859               	movf	Lcd_Write_Int@n+1,w
  1181     072D  00D7               	movwf	Lcd_Write_Int@n1+1
  1182     072E  0858               	movf	Lcd_Write_Int@n,w
  1183     072F  00D6               	movwf	Lcd_Write_Int@n1
  1184     0730  2F6C               	goto	l1312
  1185     0731                     l1304:
  1186     0731  0958               	comf	Lcd_Write_Int@n,w
  1187     0732  00A0               	movwf	??_Lcd_Write_Int
  1188     0733  0959               	comf	Lcd_Write_Int@n+1,w
  1189     0734  00A1               	movwf	??_Lcd_Write_Int+1
  1190     0735  0AA0               	incf	??_Lcd_Write_Int,f
  1191     0736  1903               	skipnz
  1192     0737  0AA1               	incf	??_Lcd_Write_Int+1,f
  1193     0738  0820               	movf	??_Lcd_Write_Int,w
  1194     0739  00D6               	movwf	Lcd_Write_Int@n1
  1195     073A  0821               	movf	??_Lcd_Write_Int+1,w
  1196     073B  00D7               	movwf	Lcd_Write_Int@n1+1
  1197     073C  2F6C               	goto	l1312
  1198     073D                     l1306:
  1199                           
  1200                           ;lcd.c: 131:         buffer[i++] = n1 % 10 + '0';
  1201     073D  085C               	movf	Lcd_Write_Int@i,w
  1202     073E  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1203     073F  0084               	movwf	4
  1204     0740  300A               	movlw	10
  1205     0741  00F0               	movwf	___lwmod@divisor
  1206     0742  3000               	movlw	0
  1207     0743  00F1               	movwf	___lwmod@divisor+1
  1208     0744  0857               	movf	Lcd_Write_Int@n1+1,w
  1209     0745  00F3               	movwf	___lwmod@dividend+1
  1210     0746  0856               	movf	Lcd_Write_Int@n1,w
  1211     0747  00F2               	movwf	___lwmod@dividend
  1212     0748  120A  118A  2427  120A  118A  	fcall	___lwmod
  1213     074D  0870               	movf	?___lwmod,w
  1214     074E  3E30               	addlw	48
  1215     074F  1383               	bcf	3,7	;select IRP bank0
  1216     0750  0080               	movwf	0
  1217     0751                     l1308:
  1218     0751  3001               	movlw	1
  1219     0752  1283               	bcf	3,5	;RP0=0, select bank0
  1220     0753  1303               	bcf	3,6	;RP1=0, select bank0
  1221     0754  07DC               	addwf	Lcd_Write_Int@i,f
  1222     0755  1803               	skipnc
  1223     0756  0ADD               	incf	Lcd_Write_Int@i+1,f
  1224     0757  3000               	movlw	0
  1225     0758  07DD               	addwf	Lcd_Write_Int@i+1,f
  1226     0759                     l1310:
  1227                           
  1228                           ;lcd.c: 132:         n1 = n1 / 10;
  1229     0759  300A               	movlw	10
  1230     075A  00F0               	movwf	___lwdiv@divisor
  1231     075B  3000               	movlw	0
  1232     075C  00F1               	movwf	___lwdiv@divisor+1
  1233     075D  0857               	movf	Lcd_Write_Int@n1+1,w
  1234     075E  00F3               	movwf	___lwdiv@dividend+1
  1235     075F  0856               	movf	Lcd_Write_Int@n1,w
  1236     0760  00F2               	movwf	___lwdiv@dividend
  1237     0761  120A  118A  24A3  120A  118A  	fcall	___lwdiv
  1238     0766  0871               	movf	?___lwdiv+1,w
  1239     0767  1283               	bcf	3,5	;RP0=0, select bank0
  1240     0768  1303               	bcf	3,6	;RP1=0, select bank0
  1241     0769  00D7               	movwf	Lcd_Write_Int@n1+1
  1242     076A  0870               	movf	?___lwdiv,w
  1243     076B  00D6               	movwf	Lcd_Write_Int@n1
  1244     076C                     l1312:
  1245                           
  1246                           ;lcd.c: 130:     while (n1 != 0) {
  1247     076C  0856               	movf	Lcd_Write_Int@n1,w
  1248     076D  0457               	iorwf	Lcd_Write_Int@n1+1,w
  1249     076E  1D03               	btfss	3,2
  1250     076F  2F71               	goto	u1061
  1251     0770  2F72               	goto	u1060
  1252     0771                     u1061:
  1253     0771  2F3D               	goto	l1306
  1254     0772                     u1060:
  1255     0772                     l1314:
  1256                           
  1257                           ;lcd.c: 135:     if (isNeg)
  1258     0772  0855               	movf	Lcd_Write_Int@isNeg,w
  1259     0773  1903               	btfsc	3,2
  1260     0774  2F76               	goto	u1071
  1261     0775  2F77               	goto	u1070
  1262     0776                     u1071:
  1263     0776  2F83               	goto	l1320
  1264     0777                     u1070:
  1265     0777                     l1316:
  1266                           
  1267                           ;lcd.c: 136:         buffer[i++] = '-';
  1268     0777  085C               	movf	Lcd_Write_Int@i,w
  1269     0778  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1270     0779  0084               	movwf	4
  1271     077A  302D               	movlw	45
  1272     077B  1383               	bcf	3,7	;select IRP bank0
  1273     077C  0080               	movwf	0
  1274     077D                     l1318:
  1275     077D  3001               	movlw	1
  1276     077E  07DC               	addwf	Lcd_Write_Int@i,f
  1277     077F  1803               	skipnc
  1278     0780  0ADD               	incf	Lcd_Write_Int@i+1,f
  1279     0781  3000               	movlw	0
  1280     0782  07DD               	addwf	Lcd_Write_Int@i+1,f
  1281     0783                     l1320:
  1282                           
  1283                           ;lcd.c: 138:     buffer[i] = '\0';
  1284     0783  085C               	movf	Lcd_Write_Int@i,w
  1285     0784  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1286     0785  0084               	movwf	4
  1287     0786  1383               	bcf	3,7	;select IRP bank0
  1288     0787  0180               	clrf	0
  1289     0788                     l1322:
  1290                           
  1291                           ;lcd.c: 140:     for (int t = 0; t < i / 2; t++) {
  1292     0788  01DA               	clrf	Lcd_Write_Int@t
  1293     0789  01DB               	clrf	Lcd_Write_Int@t+1
  1294     078A  2FC7               	goto	l1328
  1295     078B                     l1324:
  1296                           
  1297                           ;lcd.c: 141:         buffer[t] ^= buffer[i - t - 1];
  1298     078B  3023               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1299     078C  1283               	bcf	3,5	;RP0=0, select bank0
  1300     078D  1303               	bcf	3,6	;RP1=0, select bank0
  1301     078E  00A0               	movwf	??_Lcd_Write_Int
  1302     078F  085A               	movf	Lcd_Write_Int@t,w
  1303     0790  02A0               	subwf	??_Lcd_Write_Int,f
  1304     0791  085C               	movf	Lcd_Write_Int@i,w
  1305     0792  0720               	addwf	??_Lcd_Write_Int,w
  1306     0793  00A1               	movwf	??_Lcd_Write_Int+1
  1307     0794  0821               	movf	??_Lcd_Write_Int+1,w
  1308     0795  3EFF               	addlw	255
  1309     0796  0084               	movwf	4
  1310     0797  1383               	bcf	3,7	;select IRP bank0
  1311     0798  0800               	movf	0,w
  1312     0799  00A2               	movwf	??_Lcd_Write_Int+2
  1313     079A  085A               	movf	Lcd_Write_Int@t,w
  1314     079B  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1315     079C  0084               	movwf	4
  1316     079D  0822               	movf	??_Lcd_Write_Int+2,w
  1317     079E  0680               	xorwf	0,f
  1318                           
  1319                           ;lcd.c: 142:         buffer[i - t - 1] ^= buffer[t];
  1320     079F  085A               	movf	Lcd_Write_Int@t,w
  1321     07A0  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1322     07A1  0084               	movwf	4
  1323     07A2  0800               	movf	0,w
  1324     07A3  00A0               	movwf	??_Lcd_Write_Int
  1325     07A4  3023               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1326     07A5  00A1               	movwf	??_Lcd_Write_Int+1
  1327     07A6  085A               	movf	Lcd_Write_Int@t,w
  1328     07A7  02A1               	subwf	??_Lcd_Write_Int+1,f
  1329     07A8  085C               	movf	Lcd_Write_Int@i,w
  1330     07A9  0721               	addwf	??_Lcd_Write_Int+1,w
  1331     07AA  00A2               	movwf	??_Lcd_Write_Int+2
  1332     07AB  0822               	movf	??_Lcd_Write_Int+2,w
  1333     07AC  3EFF               	addlw	255
  1334     07AD  0084               	movwf	4
  1335     07AE  0820               	movf	??_Lcd_Write_Int,w
  1336     07AF  0680               	xorwf	0,f
  1337                           
  1338                           ;lcd.c: 143:         buffer[t] ^= buffer[i - t - 1];
  1339     07B0  3023               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1340     07B1  00A0               	movwf	??_Lcd_Write_Int
  1341     07B2  085A               	movf	Lcd_Write_Int@t,w
  1342     07B3  02A0               	subwf	??_Lcd_Write_Int,f
  1343     07B4  085C               	movf	Lcd_Write_Int@i,w
  1344     07B5  0720               	addwf	??_Lcd_Write_Int,w
  1345     07B6  00A1               	movwf	??_Lcd_Write_Int+1
  1346     07B7  0821               	movf	??_Lcd_Write_Int+1,w
  1347     07B8  3EFF               	addlw	255
  1348     07B9  0084               	movwf	4
  1349     07BA  0800               	movf	0,w
  1350     07BB  00A2               	movwf	??_Lcd_Write_Int+2
  1351     07BC  085A               	movf	Lcd_Write_Int@t,w
  1352     07BD  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1353     07BE  0084               	movwf	4
  1354     07BF  0822               	movf	??_Lcd_Write_Int+2,w
  1355     07C0  0680               	xorwf	0,f
  1356     07C1                     l1326:
  1357                           
  1358                           ;lcd.c: 144:     }
  1359     07C1  3001               	movlw	1
  1360     07C2  07DA               	addwf	Lcd_Write_Int@t,f
  1361     07C3  1803               	skipnc
  1362     07C4  0ADB               	incf	Lcd_Write_Int@t+1,f
  1363     07C5  3000               	movlw	0
  1364     07C6  07DB               	addwf	Lcd_Write_Int@t+1,f
  1365     07C7                     l1328:
  1366     07C7  3002               	movlw	2
  1367     07C8  00F0               	movwf	___awdiv@divisor
  1368     07C9  3000               	movlw	0
  1369     07CA  00F1               	movwf	___awdiv@divisor+1
  1370     07CB  085D               	movf	Lcd_Write_Int@i+1,w
  1371     07CC  00F3               	movwf	___awdiv@dividend+1
  1372     07CD  085C               	movf	Lcd_Write_Int@i,w
  1373     07CE  00F2               	movwf	___awdiv@dividend
  1374     07CF  120A  118A  2591  120A  118A  	fcall	___awdiv
  1375     07D4  1283               	bcf	3,5	;RP0=0, select bank0
  1376     07D5  1303               	bcf	3,6	;RP1=0, select bank0
  1377     07D6  085B               	movf	Lcd_Write_Int@t+1,w
  1378     07D7  3A80               	xorlw	128
  1379     07D8  00A0               	movwf	??_Lcd_Write_Int
  1380     07D9  0871               	movf	?___awdiv+1,w
  1381     07DA  3A80               	xorlw	128
  1382     07DB  0220               	subwf	??_Lcd_Write_Int,w
  1383     07DC  1D03               	skipz
  1384     07DD  2FE0               	goto	u1085
  1385     07DE  0870               	movf	?___awdiv,w
  1386     07DF  025A               	subwf	Lcd_Write_Int@t,w
  1387     07E0                     u1085:
  1388     07E0  1C03               	skipc
  1389     07E1  2FE3               	goto	u1081
  1390     07E2  2FE4               	goto	u1080
  1391     07E3                     u1081:
  1392     07E3  2F8B               	goto	l1324
  1393     07E4                     u1080:
  1394     07E4                     l1330:
  1395                           
  1396                           ;lcd.c: 146:     if (n == 0) {
  1397     07E4  1283               	bcf	3,5	;RP0=0, select bank0
  1398     07E5  1303               	bcf	3,6	;RP1=0, select bank0
  1399     07E6  0858               	movf	Lcd_Write_Int@n,w
  1400     07E7  0459               	iorwf	Lcd_Write_Int@n+1,w
  1401     07E8  1D03               	btfss	3,2
  1402     07E9  2FEB               	goto	u1091
  1403     07EA  2FEC               	goto	u1090
  1404     07EB                     u1091:
  1405     07EB  2FEF               	goto	l1336
  1406     07EC                     u1090:
  1407     07EC                     l1332:
  1408                           
  1409                           ;lcd.c: 147:         buffer[0] = '0';
  1410     07EC  3030               	movlw	48
  1411     07ED  00A3               	movwf	Lcd_Write_Int@buffer
  1412     07EE                     l1334:
  1413                           
  1414                           ;lcd.c: 148:         buffer[1] = '\0';
  1415     07EE  01A4               	clrf	Lcd_Write_Int@buffer+1
  1416     07EF                     l1336:
  1417                           
  1418                           ;lcd.c: 151:     Lcd_Write_String(buffer);
  1419     07EF  3023               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1420     07F0  00F5               	movwf	Lcd_Write_String@a
  1421     07F1  3000               	movlw	0
  1422     07F2  00F6               	movwf	Lcd_Write_String@a+1
  1423     07F3  120A  118A  2461  120A  118A  	fcall	_Lcd_Write_String
  1424     07F8                     l179:
  1425     07F8  0008               	return
  1426     07F9                     __end_of_Lcd_Write_Int:
  1427                           
  1428                           	psect	text3
  1429     0427                     __ptext3:	
  1430 ;; *************** function ___lwmod *****************
  1431 ;; Defined at:
  1432 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;  divisor         2    0[COMMON] unsigned int 
  1435 ;;  dividend        2    2[COMMON] unsigned int 
  1436 ;; Auto vars:     Size  Location     Type
  1437 ;;  counter         1    5[COMMON] unsigned char 
  1438 ;; Return value:  Size  Location     Type
  1439 ;;                  2    0[COMMON] unsigned int 
  1440 ;; Registers used:
  1441 ;;		wreg, status,2, status,0
  1442 ;; Tracked objects:
  1443 ;;		On entry : 0/0
  1444 ;;		On exit  : 0/0
  1445 ;;		Unchanged: 0/0
  1446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1447 ;;      Params:         4       0       0       0       0
  1448 ;;      Locals:         1       0       0       0       0
  1449 ;;      Temps:          1       0       0       0       0
  1450 ;;      Totals:         6       0       0       0       0
  1451 ;;Total ram usage:        6 bytes
  1452 ;; Hardware stack levels used: 1
  1453 ;; This function calls:
  1454 ;;		Nothing
  1455 ;; This function is called by:
  1456 ;;		_Lcd_Write_Int
  1457 ;; This function uses a non-reentrant model
  1458 ;;
  1459                           
  1460     0427                     ___lwmod:	
  1461                           ;psect for function ___lwmod
  1462                           
  1463     0427                     l1170:	
  1464                           ;incstack = 0
  1465                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1466                           
  1467     0427  0870               	movf	___lwmod@divisor,w
  1468     0428  0471               	iorwf	___lwmod@divisor+1,w
  1469     0429  1903               	btfsc	3,2
  1470     042A  2C2C               	goto	u841
  1471     042B  2C2D               	goto	u840
  1472     042C                     u841:
  1473     042C  2C5C               	goto	l1188
  1474     042D                     u840:
  1475     042D                     l1172:
  1476     042D  01F5               	clrf	___lwmod@counter
  1477     042E  0AF5               	incf	___lwmod@counter,f
  1478     042F  2C3B               	goto	l1178
  1479     0430                     l1174:
  1480     0430  3001               	movlw	1
  1481     0431                     u855:
  1482     0431  1003               	clrc
  1483     0432  0DF0               	rlf	___lwmod@divisor,f
  1484     0433  0DF1               	rlf	___lwmod@divisor+1,f
  1485     0434  3EFF               	addlw	-1
  1486     0435  1D03               	skipz
  1487     0436  2C31               	goto	u855
  1488     0437                     l1176:
  1489     0437  3001               	movlw	1
  1490     0438  00F4               	movwf	??___lwmod
  1491     0439  0874               	movf	??___lwmod,w
  1492     043A  07F5               	addwf	___lwmod@counter,f
  1493     043B                     l1178:
  1494     043B  1FF1               	btfss	___lwmod@divisor+1,7
  1495     043C  2C3E               	goto	u861
  1496     043D  2C3F               	goto	u860
  1497     043E                     u861:
  1498     043E  2C30               	goto	l1174
  1499     043F                     u860:
  1500     043F                     l1180:
  1501     043F  0871               	movf	___lwmod@divisor+1,w
  1502     0440  0273               	subwf	___lwmod@dividend+1,w
  1503     0441  1D03               	skipz
  1504     0442  2C45               	goto	u875
  1505     0443  0870               	movf	___lwmod@divisor,w
  1506     0444  0272               	subwf	___lwmod@dividend,w
  1507     0445                     u875:
  1508     0445  1C03               	skipc
  1509     0446  2C48               	goto	u871
  1510     0447  2C49               	goto	u870
  1511     0448                     u871:
  1512     0448  2C4F               	goto	l1184
  1513     0449                     u870:
  1514     0449                     l1182:
  1515     0449  0870               	movf	___lwmod@divisor,w
  1516     044A  02F2               	subwf	___lwmod@dividend,f
  1517     044B  0871               	movf	___lwmod@divisor+1,w
  1518     044C  1C03               	skipc
  1519     044D  03F3               	decf	___lwmod@dividend+1,f
  1520     044E  02F3               	subwf	___lwmod@dividend+1,f
  1521     044F                     l1184:
  1522     044F  3001               	movlw	1
  1523     0450                     u885:
  1524     0450  1003               	clrc
  1525     0451  0CF1               	rrf	___lwmod@divisor+1,f
  1526     0452  0CF0               	rrf	___lwmod@divisor,f
  1527     0453  3EFF               	addlw	-1
  1528     0454  1D03               	skipz
  1529     0455  2C50               	goto	u885
  1530     0456                     l1186:
  1531     0456  3001               	movlw	1
  1532     0457  02F5               	subwf	___lwmod@counter,f
  1533     0458  1D03               	btfss	3,2
  1534     0459  2C5B               	goto	u891
  1535     045A  2C5C               	goto	u890
  1536     045B                     u891:
  1537     045B  2C3F               	goto	l1180
  1538     045C                     u890:
  1539     045C                     l1188:
  1540     045C  0873               	movf	___lwmod@dividend+1,w
  1541     045D  00F1               	movwf	?___lwmod+1
  1542     045E  0872               	movf	___lwmod@dividend,w
  1543     045F  00F0               	movwf	?___lwmod
  1544     0460                     l490:
  1545     0460  0008               	return
  1546     0461                     __end_of___lwmod:
  1547                           
  1548                           	psect	text4
  1549     04A3                     __ptext4:	
  1550 ;; *************** function ___lwdiv *****************
  1551 ;; Defined at:
  1552 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;  divisor         2    0[COMMON] unsigned int 
  1555 ;;  dividend        2    2[COMMON] unsigned int 
  1556 ;; Auto vars:     Size  Location     Type
  1557 ;;  quotient        2    5[COMMON] unsigned int 
  1558 ;;  counter         1    7[COMMON] unsigned char 
  1559 ;; Return value:  Size  Location     Type
  1560 ;;                  2    0[COMMON] unsigned int 
  1561 ;; Registers used:
  1562 ;;		wreg, status,2, status,0
  1563 ;; Tracked objects:
  1564 ;;		On entry : 0/0
  1565 ;;		On exit  : 0/0
  1566 ;;		Unchanged: 0/0
  1567 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1568 ;;      Params:         4       0       0       0       0
  1569 ;;      Locals:         3       0       0       0       0
  1570 ;;      Temps:          1       0       0       0       0
  1571 ;;      Totals:         8       0       0       0       0
  1572 ;;Total ram usage:        8 bytes
  1573 ;; Hardware stack levels used: 1
  1574 ;; This function calls:
  1575 ;;		Nothing
  1576 ;; This function is called by:
  1577 ;;		_Lcd_Write_Int
  1578 ;; This function uses a non-reentrant model
  1579 ;;
  1580                           
  1581     04A3                     ___lwdiv:	
  1582                           ;psect for function ___lwdiv
  1583                           
  1584     04A3                     l1144:	
  1585                           ;incstack = 0
  1586                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1587                           
  1588     04A3  01F5               	clrf	___lwdiv@quotient
  1589     04A4  01F6               	clrf	___lwdiv@quotient+1
  1590     04A5                     l1146:
  1591     04A5  0870               	movf	___lwdiv@divisor,w
  1592     04A6  0471               	iorwf	___lwdiv@divisor+1,w
  1593     04A7  1903               	btfsc	3,2
  1594     04A8  2CAA               	goto	u771
  1595     04A9  2CAB               	goto	u770
  1596     04AA                     u771:
  1597     04AA  2CE2               	goto	l1166
  1598     04AB                     u770:
  1599     04AB                     l1148:
  1600     04AB  01F7               	clrf	___lwdiv@counter
  1601     04AC  0AF7               	incf	___lwdiv@counter,f
  1602     04AD  2CB9               	goto	l1154
  1603     04AE                     l1150:
  1604     04AE  3001               	movlw	1
  1605     04AF                     u785:
  1606     04AF  1003               	clrc
  1607     04B0  0DF0               	rlf	___lwdiv@divisor,f
  1608     04B1  0DF1               	rlf	___lwdiv@divisor+1,f
  1609     04B2  3EFF               	addlw	-1
  1610     04B3  1D03               	skipz
  1611     04B4  2CAF               	goto	u785
  1612     04B5                     l1152:
  1613     04B5  3001               	movlw	1
  1614     04B6  00F4               	movwf	??___lwdiv
  1615     04B7  0874               	movf	??___lwdiv,w
  1616     04B8  07F7               	addwf	___lwdiv@counter,f
  1617     04B9                     l1154:
  1618     04B9  1FF1               	btfss	___lwdiv@divisor+1,7
  1619     04BA  2CBC               	goto	u791
  1620     04BB  2CBD               	goto	u790
  1621     04BC                     u791:
  1622     04BC  2CAE               	goto	l1150
  1623     04BD                     u790:
  1624     04BD                     l1156:
  1625     04BD  3001               	movlw	1
  1626     04BE                     u805:
  1627     04BE  1003               	clrc
  1628     04BF  0DF5               	rlf	___lwdiv@quotient,f
  1629     04C0  0DF6               	rlf	___lwdiv@quotient+1,f
  1630     04C1  3EFF               	addlw	-1
  1631     04C2  1D03               	skipz
  1632     04C3  2CBE               	goto	u805
  1633     04C4  0871               	movf	___lwdiv@divisor+1,w
  1634     04C5  0273               	subwf	___lwdiv@dividend+1,w
  1635     04C6  1D03               	skipz
  1636     04C7  2CCA               	goto	u815
  1637     04C8  0870               	movf	___lwdiv@divisor,w
  1638     04C9  0272               	subwf	___lwdiv@dividend,w
  1639     04CA                     u815:
  1640     04CA  1C03               	skipc
  1641     04CB  2CCD               	goto	u811
  1642     04CC  2CCE               	goto	u810
  1643     04CD                     u811:
  1644     04CD  2CD5               	goto	l1162
  1645     04CE                     u810:
  1646     04CE                     l1158:
  1647     04CE  0870               	movf	___lwdiv@divisor,w
  1648     04CF  02F2               	subwf	___lwdiv@dividend,f
  1649     04D0  0871               	movf	___lwdiv@divisor+1,w
  1650     04D1  1C03               	skipc
  1651     04D2  03F3               	decf	___lwdiv@dividend+1,f
  1652     04D3  02F3               	subwf	___lwdiv@dividend+1,f
  1653     04D4                     l1160:
  1654     04D4  1475               	bsf	___lwdiv@quotient,0
  1655     04D5                     l1162:
  1656     04D5  3001               	movlw	1
  1657     04D6                     u825:
  1658     04D6  1003               	clrc
  1659     04D7  0CF1               	rrf	___lwdiv@divisor+1,f
  1660     04D8  0CF0               	rrf	___lwdiv@divisor,f
  1661     04D9  3EFF               	addlw	-1
  1662     04DA  1D03               	skipz
  1663     04DB  2CD6               	goto	u825
  1664     04DC                     l1164:
  1665     04DC  3001               	movlw	1
  1666     04DD  02F7               	subwf	___lwdiv@counter,f
  1667     04DE  1D03               	btfss	3,2
  1668     04DF  2CE1               	goto	u831
  1669     04E0  2CE2               	goto	u830
  1670     04E1                     u831:
  1671     04E1  2CBD               	goto	l1156
  1672     04E2                     u830:
  1673     04E2                     l1166:
  1674     04E2  0876               	movf	___lwdiv@quotient+1,w
  1675     04E3  00F1               	movwf	?___lwdiv+1
  1676     04E4  0875               	movf	___lwdiv@quotient,w
  1677     04E5  00F0               	movwf	?___lwdiv
  1678     04E6                     l480:
  1679     04E6  0008               	return
  1680     04E7                     __end_of___lwdiv:
  1681                           
  1682                           	psect	text5
  1683     0591                     __ptext5:	
  1684 ;; *************** function ___awdiv *****************
  1685 ;; Defined at:
  1686 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  1687 ;; Parameters:    Size  Location     Type
  1688 ;;  divisor         2    0[COMMON] int 
  1689 ;;  dividend        2    2[COMMON] int 
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;  quotient        2    7[COMMON] int 
  1692 ;;  sign            1    6[COMMON] unsigned char 
  1693 ;;  counter         1    5[COMMON] unsigned char 
  1694 ;; Return value:  Size  Location     Type
  1695 ;;                  2    0[COMMON] int 
  1696 ;; Registers used:
  1697 ;;		wreg, status,2, status,0
  1698 ;; Tracked objects:
  1699 ;;		On entry : 0/0
  1700 ;;		On exit  : 0/0
  1701 ;;		Unchanged: 0/0
  1702 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1703 ;;      Params:         4       0       0       0       0
  1704 ;;      Locals:         4       0       0       0       0
  1705 ;;      Temps:          1       0       0       0       0
  1706 ;;      Totals:         9       0       0       0       0
  1707 ;;Total ram usage:        9 bytes
  1708 ;; Hardware stack levels used: 1
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_Lcd_Write_Int
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715                           
  1716     0591                     ___awdiv:	
  1717                           ;psect for function ___awdiv
  1718                           
  1719     0591                     l1100:	
  1720                           ;incstack = 0
  1721                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1722                           
  1723     0591  01F6               	clrf	___awdiv@sign
  1724     0592                     l1102:
  1725     0592  1FF1               	btfss	___awdiv@divisor+1,7
  1726     0593  2D95               	goto	u671
  1727     0594  2D96               	goto	u670
  1728     0595                     u671:
  1729     0595  2D9D               	goto	l1108
  1730     0596                     u670:
  1731     0596                     l1104:
  1732     0596  09F0               	comf	___awdiv@divisor,f
  1733     0597  09F1               	comf	___awdiv@divisor+1,f
  1734     0598  0AF0               	incf	___awdiv@divisor,f
  1735     0599  1903               	skipnz
  1736     059A  0AF1               	incf	___awdiv@divisor+1,f
  1737     059B                     l1106:
  1738     059B  01F6               	clrf	___awdiv@sign
  1739     059C  0AF6               	incf	___awdiv@sign,f
  1740     059D                     l1108:
  1741     059D  1FF3               	btfss	___awdiv@dividend+1,7
  1742     059E  2DA0               	goto	u681
  1743     059F  2DA1               	goto	u680
  1744     05A0                     u681:
  1745     05A0  2DAA               	goto	l1114
  1746     05A1                     u680:
  1747     05A1                     l1110:
  1748     05A1  09F2               	comf	___awdiv@dividend,f
  1749     05A2  09F3               	comf	___awdiv@dividend+1,f
  1750     05A3  0AF2               	incf	___awdiv@dividend,f
  1751     05A4  1903               	skipnz
  1752     05A5  0AF3               	incf	___awdiv@dividend+1,f
  1753     05A6                     l1112:
  1754     05A6  3001               	movlw	1
  1755     05A7  00F4               	movwf	??___awdiv
  1756     05A8  0874               	movf	??___awdiv,w
  1757     05A9  06F6               	xorwf	___awdiv@sign,f
  1758     05AA                     l1114:
  1759     05AA  01F7               	clrf	___awdiv@quotient
  1760     05AB  01F8               	clrf	___awdiv@quotient+1
  1761     05AC                     l1116:
  1762     05AC  0870               	movf	___awdiv@divisor,w
  1763     05AD  0471               	iorwf	___awdiv@divisor+1,w
  1764     05AE  1903               	btfsc	3,2
  1765     05AF  2DB1               	goto	u691
  1766     05B0  2DB2               	goto	u690
  1767     05B1                     u691:
  1768     05B1  2DE9               	goto	l1136
  1769     05B2                     u690:
  1770     05B2                     l1118:
  1771     05B2  01F5               	clrf	___awdiv@counter
  1772     05B3  0AF5               	incf	___awdiv@counter,f
  1773     05B4  2DC0               	goto	l1124
  1774     05B5                     l1120:
  1775     05B5  3001               	movlw	1
  1776     05B6                     u705:
  1777     05B6  1003               	clrc
  1778     05B7  0DF0               	rlf	___awdiv@divisor,f
  1779     05B8  0DF1               	rlf	___awdiv@divisor+1,f
  1780     05B9  3EFF               	addlw	-1
  1781     05BA  1D03               	skipz
  1782     05BB  2DB6               	goto	u705
  1783     05BC                     l1122:
  1784     05BC  3001               	movlw	1
  1785     05BD  00F4               	movwf	??___awdiv
  1786     05BE  0874               	movf	??___awdiv,w
  1787     05BF  07F5               	addwf	___awdiv@counter,f
  1788     05C0                     l1124:
  1789     05C0  1FF1               	btfss	___awdiv@divisor+1,7
  1790     05C1  2DC3               	goto	u711
  1791     05C2  2DC4               	goto	u710
  1792     05C3                     u711:
  1793     05C3  2DB5               	goto	l1120
  1794     05C4                     u710:
  1795     05C4                     l1126:
  1796     05C4  3001               	movlw	1
  1797     05C5                     u725:
  1798     05C5  1003               	clrc
  1799     05C6  0DF7               	rlf	___awdiv@quotient,f
  1800     05C7  0DF8               	rlf	___awdiv@quotient+1,f
  1801     05C8  3EFF               	addlw	-1
  1802     05C9  1D03               	skipz
  1803     05CA  2DC5               	goto	u725
  1804     05CB  0871               	movf	___awdiv@divisor+1,w
  1805     05CC  0273               	subwf	___awdiv@dividend+1,w
  1806     05CD  1D03               	skipz
  1807     05CE  2DD1               	goto	u735
  1808     05CF  0870               	movf	___awdiv@divisor,w
  1809     05D0  0272               	subwf	___awdiv@dividend,w
  1810     05D1                     u735:
  1811     05D1  1C03               	skipc
  1812     05D2  2DD4               	goto	u731
  1813     05D3  2DD5               	goto	u730
  1814     05D4                     u731:
  1815     05D4  2DDC               	goto	l1132
  1816     05D5                     u730:
  1817     05D5                     l1128:
  1818     05D5  0870               	movf	___awdiv@divisor,w
  1819     05D6  02F2               	subwf	___awdiv@dividend,f
  1820     05D7  0871               	movf	___awdiv@divisor+1,w
  1821     05D8  1C03               	skipc
  1822     05D9  03F3               	decf	___awdiv@dividend+1,f
  1823     05DA  02F3               	subwf	___awdiv@dividend+1,f
  1824     05DB                     l1130:
  1825     05DB  1477               	bsf	___awdiv@quotient,0
  1826     05DC                     l1132:
  1827     05DC  3001               	movlw	1
  1828     05DD                     u745:
  1829     05DD  1003               	clrc
  1830     05DE  0CF1               	rrf	___awdiv@divisor+1,f
  1831     05DF  0CF0               	rrf	___awdiv@divisor,f
  1832     05E0  3EFF               	addlw	-1
  1833     05E1  1D03               	skipz
  1834     05E2  2DDD               	goto	u745
  1835     05E3                     l1134:
  1836     05E3  3001               	movlw	1
  1837     05E4  02F5               	subwf	___awdiv@counter,f
  1838     05E5  1D03               	btfss	3,2
  1839     05E6  2DE8               	goto	u751
  1840     05E7  2DE9               	goto	u750
  1841     05E8                     u751:
  1842     05E8  2DC4               	goto	l1126
  1843     05E9                     u750:
  1844     05E9                     l1136:
  1845     05E9  0876               	movf	___awdiv@sign,w
  1846     05EA  1903               	btfsc	3,2
  1847     05EB  2DED               	goto	u761
  1848     05EC  2DEE               	goto	u760
  1849     05ED                     u761:
  1850     05ED  2DF3               	goto	l1140
  1851     05EE                     u760:
  1852     05EE                     l1138:
  1853     05EE  09F7               	comf	___awdiv@quotient,f
  1854     05EF  09F8               	comf	___awdiv@quotient+1,f
  1855     05F0  0AF7               	incf	___awdiv@quotient,f
  1856     05F1  1903               	skipnz
  1857     05F2  0AF8               	incf	___awdiv@quotient+1,f
  1858     05F3                     l1140:
  1859     05F3  0878               	movf	___awdiv@quotient+1,w
  1860     05F4  00F1               	movwf	?___awdiv+1
  1861     05F5  0877               	movf	___awdiv@quotient,w
  1862     05F6  00F0               	movwf	?___awdiv
  1863     05F7                     l361:
  1864     05F7  0008               	return
  1865     05F8                     __end_of___awdiv:
  1866                           
  1867                           	psect	text6
  1868     0461                     __ptext6:	
  1869 ;; *************** function _Lcd_Write_String *****************
  1870 ;; Defined at:
  1871 ;;		line 105 in file "lcd.c"
  1872 ;; Parameters:    Size  Location     Type
  1873 ;;  a               2    5[COMMON] PTR unsigned char 
  1874 ;;		 -> Lcd_Write_Int@buffer(50), STR_1(10), 
  1875 ;; Auto vars:     Size  Location     Type
  1876 ;;  i               2   10[COMMON] int 
  1877 ;; Return value:  Size  Location     Type
  1878 ;;                  1    wreg      void 
  1879 ;; Registers used:
  1880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1881 ;; Tracked objects:
  1882 ;;		On entry : 0/0
  1883 ;;		On exit  : 0/0
  1884 ;;		Unchanged: 0/0
  1885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1886 ;;      Params:         2       0       0       0       0
  1887 ;;      Locals:         2       0       0       0       0
  1888 ;;      Temps:          3       0       0       0       0
  1889 ;;      Totals:         7       0       0       0       0
  1890 ;;Total ram usage:        7 bytes
  1891 ;; Hardware stack levels used: 1
  1892 ;; Hardware stack levels required when called: 2
  1893 ;; This function calls:
  1894 ;;		_Lcd_Write_Char
  1895 ;; This function is called by:
  1896 ;;		_main
  1897 ;;		_Lcd_Write_Int
  1898 ;; This function uses a non-reentrant model
  1899 ;;
  1900                           
  1901     0461                     _Lcd_Write_String:	
  1902                           ;psect for function _Lcd_Write_String
  1903                           
  1904     0461                     l1078:	
  1905                           ;incstack = 0
  1906                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1907                           
  1908                           
  1909                           ;lcd.c: 106:     int i;;lcd.c: 107:     for (i = 0; a[i] != '\0'; i++)
  1910     0461  01FA               	clrf	Lcd_Write_String@i
  1911     0462  01FB               	clrf	Lcd_Write_String@i+1
  1912     0463  2C86               	goto	l1084
  1913     0464                     l1080:
  1914                           
  1915                           ;lcd.c: 108:         Lcd_Write_Char(a[i]);
  1916     0464  087A               	movf	Lcd_Write_String@i,w
  1917     0465  0775               	addwf	Lcd_Write_String@a,w
  1918     0466  00F8               	movwf	??_Lcd_Write_String+1
  1919     0467  0876               	movf	Lcd_Write_String@a+1,w
  1920     0468  00F7               	movwf	??_Lcd_Write_String
  1921     0469  1803               	skipnc
  1922     046A  0AF7               	incf	??_Lcd_Write_String,f
  1923     046B  1FFA               	btfss	Lcd_Write_String@i,7
  1924     046C  2C6E               	goto	u640
  1925     046D  03F7               	decf	??_Lcd_Write_String,f
  1926     046E                     u640:
  1927     046E  0877               	movf	??_Lcd_Write_String,w
  1928     046F  00F9               	movwf	??_Lcd_Write_String+2
  1929     0470  0879               	movf	??_Lcd_Write_String+2,w
  1930     0471  1283               	bcf	3,5	;RP0=0, select bank0
  1931     0472  1303               	bcf	3,6	;RP1=0, select bank0
  1932     0473  00FF               	movwf	btemp+1
  1933     0474  0878               	movf	??_Lcd_Write_String+1,w
  1934     0475  0084               	movwf	4
  1935     0476  120A  118A  2003  120A  118A  	fcall	stringtab
  1936     047B  120A  118A  23F2  120A  118A  	fcall	_Lcd_Write_Char
  1937     0480                     l1082:
  1938     0480  3001               	movlw	1
  1939     0481  07FA               	addwf	Lcd_Write_String@i,f
  1940     0482  1803               	skipnc
  1941     0483  0AFB               	incf	Lcd_Write_String@i+1,f
  1942     0484  3000               	movlw	0
  1943     0485  07FB               	addwf	Lcd_Write_String@i+1,f
  1944     0486                     l1084:
  1945     0486  087A               	movf	Lcd_Write_String@i,w
  1946     0487  0775               	addwf	Lcd_Write_String@a,w
  1947     0488  00F8               	movwf	??_Lcd_Write_String+1
  1948     0489  0876               	movf	Lcd_Write_String@a+1,w
  1949     048A  00F7               	movwf	??_Lcd_Write_String
  1950     048B  1803               	skipnc
  1951     048C  0AF7               	incf	??_Lcd_Write_String,f
  1952     048D  1FFA               	btfss	Lcd_Write_String@i,7
  1953     048E  2C90               	goto	u650
  1954     048F  03F7               	decf	??_Lcd_Write_String,f
  1955     0490                     u650:
  1956     0490  0877               	movf	??_Lcd_Write_String,w
  1957     0491  00F9               	movwf	??_Lcd_Write_String+2
  1958     0492  0879               	movf	??_Lcd_Write_String+2,w
  1959     0493  1283               	bcf	3,5	;RP0=0, select bank0
  1960     0494  1303               	bcf	3,6	;RP1=0, select bank0
  1961     0495  00FF               	movwf	btemp+1
  1962     0496  0878               	movf	??_Lcd_Write_String+1,w
  1963     0497  0084               	movwf	4
  1964     0498  120A  118A  2003  120A  118A  	fcall	stringtab
  1965     049D  3A00               	xorlw	0
  1966     049E  1D03               	skipz
  1967     049F  2CA1               	goto	u661
  1968     04A0  2CA2               	goto	u660
  1969     04A1                     u661:
  1970     04A1  2C64               	goto	l1080
  1971     04A2                     u660:
  1972     04A2                     l158:
  1973     04A2  0008               	return
  1974     04A3                     __end_of_Lcd_Write_String:
  1975                           
  1976                           	psect	text7
  1977     03F2                     __ptext7:	
  1978 ;; *************** function _Lcd_Write_Char *****************
  1979 ;; Defined at:
  1980 ;;		line 88 in file "lcd.c"
  1981 ;; Parameters:    Size  Location     Type
  1982 ;;  a               1    wreg     unsigned char 
  1983 ;; Auto vars:     Size  Location     Type
  1984 ;;  a               1    4[COMMON] unsigned char 
  1985 ;;  y               1    3[COMMON] unsigned char 
  1986 ;;  temp            1    2[COMMON] unsigned char 
  1987 ;; Return value:  Size  Location     Type
  1988 ;;                  1    wreg      void 
  1989 ;; Registers used:
  1990 ;;		wreg, status,2, status,0, pclath, cstack
  1991 ;; Tracked objects:
  1992 ;;		On entry : 0/0
  1993 ;;		On exit  : 0/0
  1994 ;;		Unchanged: 0/0
  1995 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1996 ;;      Params:         0       0       0       0       0
  1997 ;;      Locals:         3       0       0       0       0
  1998 ;;      Temps:          1       0       0       0       0
  1999 ;;      Totals:         4       0       0       0       0
  2000 ;;Total ram usage:        4 bytes
  2001 ;; Hardware stack levels used: 1
  2002 ;; Hardware stack levels required when called: 1
  2003 ;; This function calls:
  2004 ;;		_Lcd_Port
  2005 ;; This function is called by:
  2006 ;;		_main
  2007 ;;		_Lcd_Write_String
  2008 ;; This function uses a non-reentrant model
  2009 ;;
  2010                           
  2011     03F2                     _Lcd_Write_Char:	
  2012                           ;psect for function _Lcd_Write_Char
  2013                           
  2014                           
  2015                           ;incstack = 0
  2016                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2017                           ;Lcd_Write_Char@a stored from wreg
  2018     03F2  00F4               	movwf	Lcd_Write_Char@a
  2019     03F3                     l1058:
  2020                           
  2021                           ;lcd.c: 89:     char temp, y;;lcd.c: 90:     temp = a & 0x0F;
  2022     03F3  0874               	movf	Lcd_Write_Char@a,w
  2023     03F4  390F               	andlw	15
  2024     03F5  00F2               	movwf	Lcd_Write_Char@temp
  2025                           
  2026                           ;lcd.c: 91:     y = a & 0xF0;
  2027     03F6  0874               	movf	Lcd_Write_Char@a,w
  2028     03F7  39F0               	andlw	240
  2029     03F8  00F3               	movwf	Lcd_Write_Char@y
  2030     03F9                     l1060:
  2031                           
  2032                           ;lcd.c: 93:     PORTEbits.RE2 = 1;
  2033     03F9  1283               	bcf	3,5	;RP0=0, select bank0
  2034     03FA  1303               	bcf	3,6	;RP1=0, select bank0
  2035     03FB  1509               	bsf	9,2	;volatile
  2036     03FC                     l1062:
  2037                           
  2038                           ;lcd.c: 95:     Lcd_Port(y >> 4);
  2039     03FC  0873               	movf	Lcd_Write_Char@y,w
  2040     03FD  00F1               	movwf	??_Lcd_Write_Char
  2041     03FE  3004               	movlw	4
  2042     03FF                     u635:
  2043     03FF  1003               	clrc
  2044     0400  0CF1               	rrf	??_Lcd_Write_Char,f
  2045     0401  3EFF               	addlw	-1
  2046     0402  1D03               	skipz
  2047     0403  2BFF               	goto	u635
  2048     0404  0871               	movf	??_Lcd_Write_Char,w
  2049     0405  120A  118A  23D0  120A  118A  	fcall	_Lcd_Port
  2050     040A                     l1064:
  2051                           
  2052                           ;lcd.c: 96:     PORTEbits.RE1 = 1;
  2053     040A  1283               	bcf	3,5	;RP0=0, select bank0
  2054     040B  1303               	bcf	3,6	;RP1=0, select bank0
  2055     040C  1489               	bsf	9,1	;volatile
  2056     040D                     l1066:
  2057                           
  2058                           ;lcd.c: 97:     _delay((unsigned long)((4)*(20*1000000/4000000.0)));
  2059     040D  3006               	movlw	6
  2060     040E  00F1               	movwf	??_Lcd_Write_Char
  2061     040F                     u1197:
  2062     040F  0BF1               	decfsz	??_Lcd_Write_Char,f
  2063     0410  2C0F               	goto	u1197
  2064     0411  0000               	nop
  2065     0412                     l1068:
  2066                           
  2067                           ;lcd.c: 98:     PORTEbits.RE1 = 0;
  2068     0412  1283               	bcf	3,5	;RP0=0, select bank0
  2069     0413  1303               	bcf	3,6	;RP1=0, select bank0
  2070     0414  1089               	bcf	9,1	;volatile
  2071     0415                     l1070:
  2072                           
  2073                           ;lcd.c: 99:     Lcd_Port(temp);
  2074     0415  0872               	movf	Lcd_Write_Char@temp,w
  2075     0416  120A  118A  23D0  120A  118A  	fcall	_Lcd_Port
  2076     041B                     l1072:
  2077                           
  2078                           ;lcd.c: 100:     PORTEbits.RE1 = 1;
  2079     041B  1283               	bcf	3,5	;RP0=0, select bank0
  2080     041C  1303               	bcf	3,6	;RP1=0, select bank0
  2081     041D  1489               	bsf	9,1	;volatile
  2082     041E                     l1074:
  2083                           
  2084                           ;lcd.c: 101:     _delay((unsigned long)((4)*(20*1000000/4000000.0)));
  2085     041E  3006               	movlw	6
  2086     041F  00F1               	movwf	??_Lcd_Write_Char
  2087     0420                     u1207:
  2088     0420  0BF1               	decfsz	??_Lcd_Write_Char,f
  2089     0421  2C20               	goto	u1207
  2090     0422  0000               	nop
  2091     0423                     l1076:
  2092                           
  2093                           ;lcd.c: 102:     PORTEbits.RE1 = 0;
  2094     0423  1283               	bcf	3,5	;RP0=0, select bank0
  2095     0424  1303               	bcf	3,6	;RP1=0, select bank0
  2096     0425  1089               	bcf	9,1	;volatile
  2097     0426                     l152:
  2098     0426  0008               	return
  2099     0427                     __end_of_Lcd_Write_Char:
  2100                           
  2101                           	psect	text8
  2102     04E7                     __ptext8:	
  2103 ;; *************** function _Lcd_Set_Cursor *****************
  2104 ;; Defined at:
  2105 ;;		line 70 in file "lcd.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;  riga            1    wreg     unsigned char 
  2108 ;;  colonna         1    4[COMMON] unsigned char 
  2109 ;; Auto vars:     Size  Location     Type
  2110 ;;  riga            1    6[COMMON] unsigned char 
  2111 ;;  temp            1    9[COMMON] unsigned char 
  2112 ;;  y               1    8[COMMON] unsigned char 
  2113 ;;  z               1    7[COMMON] unsigned char 
  2114 ;; Return value:  Size  Location     Type
  2115 ;;                  1    wreg      void 
  2116 ;; Registers used:
  2117 ;;		wreg, status,2, status,0, pclath, cstack
  2118 ;; Tracked objects:
  2119 ;;		On entry : 0/0
  2120 ;;		On exit  : 0/0
  2121 ;;		Unchanged: 0/0
  2122 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2123 ;;      Params:         1       0       0       0       0
  2124 ;;      Locals:         4       0       0       0       0
  2125 ;;      Temps:          1       0       0       0       0
  2126 ;;      Totals:         6       0       0       0       0
  2127 ;;Total ram usage:        6 bytes
  2128 ;; Hardware stack levels used: 1
  2129 ;; Hardware stack levels required when called: 2
  2130 ;; This function calls:
  2131 ;;		_Lcd_Cmd
  2132 ;; This function is called by:
  2133 ;;		_main
  2134 ;; This function uses a non-reentrant model
  2135 ;;
  2136                           
  2137     04E7                     _Lcd_Set_Cursor:	
  2138                           ;psect for function _Lcd_Set_Cursor
  2139                           
  2140                           
  2141                           ;incstack = 0
  2142                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2143                           ;Lcd_Set_Cursor@riga stored from wreg
  2144     04E7  00F6               	movwf	Lcd_Set_Cursor@riga
  2145     04E8                     l1224:
  2146                           
  2147                           ;lcd.c: 70: void Lcd_Set_Cursor(char riga, char colonna);lcd.c: 71: {;lcd.c: 72:     cha
      +                          r temp, z, y;;lcd.c: 73:     if (riga == 0) {
  2148     04E8  0876               	movf	Lcd_Set_Cursor@riga,w
  2149     04E9  1D03               	btfss	3,2
  2150     04EA  2CEC               	goto	u901
  2151     04EB  2CED               	goto	u900
  2152     04EC                     u901:
  2153     04EC  2D0A               	goto	l1234
  2154     04ED                     u900:
  2155     04ED                     l1226:
  2156                           
  2157                           ;lcd.c: 74:         temp = 0x80 + colonna;
  2158     04ED  0874               	movf	Lcd_Set_Cursor@colonna,w
  2159     04EE  3E80               	addlw	128
  2160     04EF  00F9               	movwf	Lcd_Set_Cursor@temp
  2161                           
  2162                           ;lcd.c: 75:         z = temp >> 4;
  2163     04F0  0879               	movf	Lcd_Set_Cursor@temp,w
  2164     04F1  00F5               	movwf	??_Lcd_Set_Cursor
  2165     04F2  3004               	movlw	4
  2166     04F3                     u915:
  2167     04F3  1003               	clrc
  2168     04F4  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2169     04F5  3EFF               	addlw	-1
  2170     04F6  1D03               	skipz
  2171     04F7  2CF3               	goto	u915
  2172     04F8  0875               	movf	??_Lcd_Set_Cursor,w
  2173     04F9  00F7               	movwf	Lcd_Set_Cursor@z
  2174     04FA                     l1228:
  2175                           
  2176                           ;lcd.c: 76:         y = temp & 0x0F;
  2177     04FA  0879               	movf	Lcd_Set_Cursor@temp,w
  2178     04FB  390F               	andlw	15
  2179     04FC  00F8               	movwf	Lcd_Set_Cursor@y
  2180     04FD                     l1230:
  2181                           
  2182                           ;lcd.c: 77:         Lcd_Cmd(z);
  2183     04FD  0877               	movf	Lcd_Set_Cursor@z,w
  2184     04FE  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2185     0503                     l1232:
  2186                           
  2187                           ;lcd.c: 78:         Lcd_Cmd(y);
  2188     0503  0878               	movf	Lcd_Set_Cursor@y,w
  2189     0504  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2190                           
  2191                           ;lcd.c: 79:     } else if (riga >= 1) {
  2192     0509  2D2B               	goto	l149
  2193     050A                     l1234:
  2194     050A  0876               	movf	Lcd_Set_Cursor@riga,w
  2195     050B  1903               	btfsc	3,2
  2196     050C  2D0E               	goto	u921
  2197     050D  2D0F               	goto	u920
  2198     050E                     u921:
  2199     050E  2D2B               	goto	l149
  2200     050F                     u920:
  2201     050F                     l1236:
  2202                           
  2203                           ;lcd.c: 80:         temp = 0xC0 + colonna;
  2204     050F  0874               	movf	Lcd_Set_Cursor@colonna,w
  2205     0510  3EC0               	addlw	192
  2206     0511  00F9               	movwf	Lcd_Set_Cursor@temp
  2207                           
  2208                           ;lcd.c: 81:         z = temp >> 4;
  2209     0512  0879               	movf	Lcd_Set_Cursor@temp,w
  2210     0513  00F5               	movwf	??_Lcd_Set_Cursor
  2211     0514  3004               	movlw	4
  2212     0515                     u935:
  2213     0515  1003               	clrc
  2214     0516  0CF5               	rrf	??_Lcd_Set_Cursor,f
  2215     0517  3EFF               	addlw	-1
  2216     0518  1D03               	skipz
  2217     0519  2D15               	goto	u935
  2218     051A  0875               	movf	??_Lcd_Set_Cursor,w
  2219     051B  00F7               	movwf	Lcd_Set_Cursor@z
  2220     051C                     l1238:
  2221                           
  2222                           ;lcd.c: 82:         y = temp & 0x0F;
  2223     051C  0879               	movf	Lcd_Set_Cursor@temp,w
  2224     051D  390F               	andlw	15
  2225     051E  00F8               	movwf	Lcd_Set_Cursor@y
  2226     051F                     l1240:
  2227                           
  2228                           ;lcd.c: 83:         Lcd_Cmd(z);
  2229     051F  0877               	movf	Lcd_Set_Cursor@z,w
  2230     0520  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2231     0525                     l1242:
  2232                           
  2233                           ;lcd.c: 84:         Lcd_Cmd(y);
  2234     0525  0878               	movf	Lcd_Set_Cursor@y,w
  2235     0526  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2236     052B                     l149:
  2237     052B  0008               	return
  2238     052C                     __end_of_Lcd_Set_Cursor:
  2239                           
  2240                           	psect	text9
  2241     052C                     __ptext9:	
  2242 ;; *************** function _Lcd_Init *****************
  2243 ;; Defined at:
  2244 ;;		line 41 in file "lcd.c"
  2245 ;; Parameters:    Size  Location     Type
  2246 ;;		None
  2247 ;; Auto vars:     Size  Location     Type
  2248 ;;		None
  2249 ;; Return value:  Size  Location     Type
  2250 ;;                  1    wreg      void 
  2251 ;; Registers used:
  2252 ;;		wreg, status,2, status,0, pclath, cstack
  2253 ;; Tracked objects:
  2254 ;;		On entry : 0/0
  2255 ;;		On exit  : 0/0
  2256 ;;		Unchanged: 0/0
  2257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2258 ;;      Params:         0       0       0       0       0
  2259 ;;      Locals:         0       0       0       0       0
  2260 ;;      Temps:          2       0       0       0       0
  2261 ;;      Totals:         2       0       0       0       0
  2262 ;;Total ram usage:        2 bytes
  2263 ;; Hardware stack levels used: 1
  2264 ;; Hardware stack levels required when called: 2
  2265 ;; This function calls:
  2266 ;;		_Lcd_Cmd
  2267 ;;		_Lcd_Port
  2268 ;; This function is called by:
  2269 ;;		_main
  2270 ;; This function uses a non-reentrant model
  2271 ;;
  2272                           
  2273     052C                     _Lcd_Init:	
  2274                           ;psect for function _Lcd_Init
  2275                           
  2276     052C                     l1192:	
  2277                           ;incstack = 0
  2278                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2279                           
  2280                           
  2281                           ;lcd.c: 42:     TRISD &= ~0xff;
  2282     052C  1683               	bsf	3,5	;RP0=1, select bank1
  2283     052D  1303               	bcf	3,6	;RP1=0, select bank1
  2284     052E  0188               	clrf	8	;volatile
  2285     052F                     l1194:
  2286                           
  2287                           ;lcd.c: 43:     TRISE &= ~0x06;
  2288     052F  30F9               	movlw	249
  2289     0530  00F4               	movwf	??_Lcd_Init
  2290     0531  0874               	movf	??_Lcd_Init,w
  2291     0532  0589               	andwf	9,f	;volatile
  2292     0533                     l1196:
  2293                           
  2294                           ;lcd.c: 44:     Lcd_Port(0x00);
  2295     0533  3000               	movlw	0
  2296     0534  120A  118A  23D0  120A  118A  	fcall	_Lcd_Port
  2297     0539                     l1198:
  2298                           
  2299                           ;lcd.c: 45:     _delay((unsigned long)((20)*(20*1000000/4000.0)));
  2300     0539  3082               	movlw	130
  2301     053A  00F5               	movwf	??_Lcd_Init+1
  2302     053B  30DD               	movlw	221
  2303     053C  00F4               	movwf	??_Lcd_Init
  2304     053D                     u1217:
  2305     053D  0BF4               	decfsz	??_Lcd_Init,f
  2306     053E  2D3D               	goto	u1217
  2307     053F  0BF5               	decfsz	??_Lcd_Init+1,f
  2308     0540  2D3D               	goto	u1217
  2309     0541  2D42               	nop2
  2310     0542                     l1200:
  2311                           
  2312                           ;lcd.c: 46:     Lcd_Cmd(0x03);
  2313     0542  3003               	movlw	3
  2314     0543  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2315     0548                     l1202:
  2316                           
  2317                           ;lcd.c: 47:     _delay((unsigned long)((5)*(20*1000000/4000.0)));
  2318     0548  3021               	movlw	33
  2319     0549  00F5               	movwf	??_Lcd_Init+1
  2320     054A  3076               	movlw	118
  2321     054B  00F4               	movwf	??_Lcd_Init
  2322     054C                     u1227:
  2323     054C  0BF4               	decfsz	??_Lcd_Init,f
  2324     054D  2D4C               	goto	u1227
  2325     054E  0BF5               	decfsz	??_Lcd_Init+1,f
  2326     054F  2D4C               	goto	u1227
  2327     0550  0000               	nop
  2328     0551                     l1204:
  2329                           
  2330                           ;lcd.c: 48:     Lcd_Cmd(0x03);
  2331     0551  3003               	movlw	3
  2332     0552  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2333     0557                     l1206:
  2334                           
  2335                           ;lcd.c: 49:     _delay((unsigned long)((10)*(20*1000000/4000.0)));
  2336     0557  3041               	movlw	65
  2337     0558  00F5               	movwf	??_Lcd_Init+1
  2338     0559  30EE               	movlw	238
  2339     055A  00F4               	movwf	??_Lcd_Init
  2340     055B                     u1237:
  2341     055B  0BF4               	decfsz	??_Lcd_Init,f
  2342     055C  2D5B               	goto	u1237
  2343     055D  0BF5               	decfsz	??_Lcd_Init+1,f
  2344     055E  2D5B               	goto	u1237
  2345     055F  0000               	nop
  2346     0560                     l1208:
  2347                           
  2348                           ;lcd.c: 50:     Lcd_Cmd(0x03);
  2349     0560  3003               	movlw	3
  2350     0561  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2351     0566                     l1210:
  2352                           
  2353                           ;lcd.c: 52:     Lcd_Cmd(0x02);
  2354     0566  3002               	movlw	2
  2355     0567  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2356     056C                     l1212:
  2357                           
  2358                           ;lcd.c: 54:     Lcd_Cmd(0x02);
  2359     056C  3002               	movlw	2
  2360     056D  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2361     0572                     l1214:
  2362                           
  2363                           ;lcd.c: 55:     Lcd_Cmd(0x08);
  2364     0572  3008               	movlw	8
  2365     0573  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2366     0578                     l1216:
  2367                           
  2368                           ;lcd.c: 57:     Lcd_Cmd(0x00);
  2369     0578  3000               	movlw	0
  2370     0579  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2371     057E                     l1218:
  2372                           
  2373                           ;lcd.c: 58:     Lcd_Cmd(0x0C);
  2374     057E  300C               	movlw	12
  2375     057F  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2376     0584                     l1220:
  2377                           
  2378                           ;lcd.c: 60:     Lcd_Cmd(0x00);
  2379     0584  3000               	movlw	0
  2380     0585  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2381     058A                     l1222:
  2382                           
  2383                           ;lcd.c: 61:     Lcd_Cmd(0x06);
  2384     058A  3006               	movlw	6
  2385     058B  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2386     0590                     l140:
  2387     0590  0008               	return
  2388     0591                     __end_of_Lcd_Init:
  2389                           
  2390                           	psect	text10
  2391     03A2                     __ptext10:	
  2392 ;; *************** function _Lcd_Clear *****************
  2393 ;; Defined at:
  2394 ;;		line 64 in file "lcd.c"
  2395 ;; Parameters:    Size  Location     Type
  2396 ;;		None
  2397 ;; Auto vars:     Size  Location     Type
  2398 ;;		None
  2399 ;; Return value:  Size  Location     Type
  2400 ;;                  1    wreg      void 
  2401 ;; Registers used:
  2402 ;;		wreg, status,2, status,0, pclath, cstack
  2403 ;; Tracked objects:
  2404 ;;		On entry : 0/0
  2405 ;;		On exit  : 0/0
  2406 ;;		Unchanged: 0/0
  2407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2408 ;;      Params:         0       0       0       0       0
  2409 ;;      Locals:         0       0       0       0       0
  2410 ;;      Temps:          0       0       0       0       0
  2411 ;;      Totals:         0       0       0       0       0
  2412 ;;Total ram usage:        0 bytes
  2413 ;; Hardware stack levels used: 1
  2414 ;; Hardware stack levels required when called: 2
  2415 ;; This function calls:
  2416 ;;		_Lcd_Cmd
  2417 ;; This function is called by:
  2418 ;;		_main
  2419 ;; This function uses a non-reentrant model
  2420 ;;
  2421                           
  2422     03A2                     _Lcd_Clear:	
  2423                           ;psect for function _Lcd_Clear
  2424                           
  2425     03A2                     l1292:	
  2426                           ;incstack = 0
  2427                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2428                           
  2429                           
  2430                           ;lcd.c: 66:     Lcd_Cmd(0);
  2431     03A2  3000               	movlw	0
  2432     03A3  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2433                           
  2434                           ;lcd.c: 67:     Lcd_Cmd(1);
  2435     03A8  3001               	movlw	1
  2436     03A9  120A  118A  23AF  120A  118A  	fcall	_Lcd_Cmd
  2437     03AE                     l143:
  2438     03AE  0008               	return
  2439     03AF                     __end_of_Lcd_Clear:
  2440                           
  2441                           	psect	text11
  2442     03AF                     __ptext11:	
  2443 ;; *************** function _Lcd_Cmd *****************
  2444 ;; Defined at:
  2445 ;;		line 29 in file "lcd.c"
  2446 ;; Parameters:    Size  Location     Type
  2447 ;;  a               1    wreg     unsigned char 
  2448 ;; Auto vars:     Size  Location     Type
  2449 ;;  a               1    3[COMMON] unsigned char 
  2450 ;; Return value:  Size  Location     Type
  2451 ;;                  1    wreg      void 
  2452 ;; Registers used:
  2453 ;;		wreg, status,2, status,0, pclath, cstack
  2454 ;; Tracked objects:
  2455 ;;		On entry : 0/0
  2456 ;;		On exit  : 0/0
  2457 ;;		Unchanged: 0/0
  2458 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2459 ;;      Params:         0       0       0       0       0
  2460 ;;      Locals:         1       0       0       0       0
  2461 ;;      Temps:          2       0       0       0       0
  2462 ;;      Totals:         3       0       0       0       0
  2463 ;;Total ram usage:        3 bytes
  2464 ;; Hardware stack levels used: 1
  2465 ;; Hardware stack levels required when called: 1
  2466 ;; This function calls:
  2467 ;;		_Lcd_Port
  2468 ;; This function is called by:
  2469 ;;		_Lcd_Init
  2470 ;;		_Lcd_Clear
  2471 ;;		_Lcd_Set_Cursor
  2472 ;; This function uses a non-reentrant model
  2473 ;;
  2474                           
  2475     03AF                     _Lcd_Cmd:	
  2476                           ;psect for function _Lcd_Cmd
  2477                           
  2478                           
  2479                           ;incstack = 0
  2480                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2481                           ;Lcd_Cmd@a stored from wreg
  2482     03AF  00F3               	movwf	Lcd_Cmd@a
  2483     03B0                     l1086:
  2484                           
  2485                           ;lcd.c: 30:     TRISD &= ~0xff;
  2486     03B0  1683               	bsf	3,5	;RP0=1, select bank1
  2487     03B1  1303               	bcf	3,6	;RP1=0, select bank1
  2488     03B2  0188               	clrf	8	;volatile
  2489     03B3                     l1088:
  2490                           
  2491                           ;lcd.c: 31:     TRISE &= ~0x06;
  2492     03B3  30F9               	movlw	249
  2493     03B4  00F1               	movwf	??_Lcd_Cmd
  2494     03B5  0871               	movf	??_Lcd_Cmd,w
  2495     03B6  0589               	andwf	9,f	;volatile
  2496     03B7                     l1090:
  2497                           
  2498                           ;lcd.c: 34:     PORTEbits.RE2 = 0;
  2499     03B7  1283               	bcf	3,5	;RP0=0, select bank0
  2500     03B8  1303               	bcf	3,6	;RP1=0, select bank0
  2501     03B9  1109               	bcf	9,2	;volatile
  2502     03BA                     l1092:
  2503                           
  2504                           ;lcd.c: 35:     Lcd_Port(a);
  2505     03BA  0873               	movf	Lcd_Cmd@a,w
  2506     03BB  120A  118A  23D0  120A  118A  	fcall	_Lcd_Port
  2507     03C0                     l1094:
  2508                           
  2509                           ;lcd.c: 36:     PORTEbits.RE1 = 1;
  2510     03C0  1283               	bcf	3,5	;RP0=0, select bank0
  2511     03C1  1303               	bcf	3,6	;RP1=0, select bank0
  2512     03C2  1489               	bsf	9,1	;volatile
  2513     03C3                     l1096:
  2514                           
  2515                           ;lcd.c: 37:     _delay((unsigned long)((4)*(20*1000000/4000.0)));
  2516     03C3  301A               	movlw	26
  2517     03C4  00F2               	movwf	??_Lcd_Cmd+1
  2518     03C5  30F8               	movlw	248
  2519     03C6  00F1               	movwf	??_Lcd_Cmd
  2520     03C7                     u1247:
  2521     03C7  0BF1               	decfsz	??_Lcd_Cmd,f
  2522     03C8  2BC7               	goto	u1247
  2523     03C9  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2524     03CA  2BC7               	goto	u1247
  2525     03CB  0000               	nop
  2526     03CC                     l1098:
  2527                           
  2528                           ;lcd.c: 38:     PORTEbits.RE1 = 0;
  2529     03CC  1283               	bcf	3,5	;RP0=0, select bank0
  2530     03CD  1303               	bcf	3,6	;RP1=0, select bank0
  2531     03CE  1089               	bcf	9,1	;volatile
  2532     03CF                     l137:
  2533     03CF  0008               	return
  2534     03D0                     __end_of_Lcd_Cmd:
  2535                           
  2536                           	psect	text12
  2537     03D0                     __ptext12:	
  2538 ;; *************** function _Lcd_Port *****************
  2539 ;; Defined at:
  2540 ;;		line 14 in file "lcd.c"
  2541 ;; Parameters:    Size  Location     Type
  2542 ;;  a               1    wreg     unsigned char 
  2543 ;; Auto vars:     Size  Location     Type
  2544 ;;  a               1    0[COMMON] unsigned char 
  2545 ;; Return value:  Size  Location     Type
  2546 ;;                  1    wreg      void 
  2547 ;; Registers used:
  2548 ;;		wreg
  2549 ;; Tracked objects:
  2550 ;;		On entry : 0/0
  2551 ;;		On exit  : 0/0
  2552 ;;		Unchanged: 0/0
  2553 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2554 ;;      Params:         0       0       0       0       0
  2555 ;;      Locals:         1       0       0       0       0
  2556 ;;      Temps:          0       0       0       0       0
  2557 ;;      Totals:         1       0       0       0       0
  2558 ;;Total ram usage:        1 bytes
  2559 ;; Hardware stack levels used: 1
  2560 ;; This function calls:
  2561 ;;		Nothing
  2562 ;; This function is called by:
  2563 ;;		_Lcd_Cmd
  2564 ;;		_Lcd_Init
  2565 ;;		_Lcd_Write_Char
  2566 ;; This function uses a non-reentrant model
  2567 ;;
  2568                           
  2569     03D0                     _Lcd_Port:	
  2570                           ;psect for function _Lcd_Port
  2571                           
  2572                           
  2573                           ;incstack = 0
  2574                           ; Regs used in _Lcd_Port: [wreg]
  2575                           ;Lcd_Port@a stored from wreg
  2576     03D0  00F0               	movwf	Lcd_Port@a
  2577     03D1                     l1048:
  2578                           
  2579                           ;lcd.c: 16:     if (a & 1) PORTDbits.RD4 = 1;
  2580     03D1  1C70               	btfss	Lcd_Port@a,0
  2581     03D2  2BD4               	goto	u591
  2582     03D3  2BD5               	goto	u590
  2583     03D4                     u591:
  2584     03D4  2BD9               	goto	l126
  2585     03D5                     u590:
  2586     03D5                     l1050:
  2587     03D5  1283               	bcf	3,5	;RP0=0, select bank0
  2588     03D6  1303               	bcf	3,6	;RP1=0, select bank0
  2589     03D7  1608               	bsf	8,4	;volatile
  2590     03D8  2BDC               	goto	l127
  2591     03D9                     l126:	
  2592                           ;lcd.c: 17:     else PORTDbits.RD4 = 0;
  2593                           
  2594     03D9  1283               	bcf	3,5	;RP0=0, select bank0
  2595     03DA  1303               	bcf	3,6	;RP1=0, select bank0
  2596     03DB  1208               	bcf	8,4	;volatile
  2597     03DC                     l127:
  2598                           
  2599                           ;lcd.c: 19:     if (a & 2) PORTDbits.RD5 = 1;
  2600     03DC  1CF0               	btfss	Lcd_Port@a,1
  2601     03DD  2BDF               	goto	u601
  2602     03DE  2BE0               	goto	u600
  2603     03DF                     u601:
  2604     03DF  2BE2               	goto	l128
  2605     03E0                     u600:
  2606     03E0                     l1052:
  2607     03E0  1688               	bsf	8,5	;volatile
  2608     03E1  2BE3               	goto	l129
  2609     03E2                     l128:	
  2610                           ;lcd.c: 20:     else PORTDbits.RD5 = 0;
  2611                           
  2612     03E2  1288               	bcf	8,5	;volatile
  2613     03E3                     l129:
  2614                           
  2615                           ;lcd.c: 22:     if (a & 4) PORTDbits.RD6 = 1;
  2616     03E3  1D70               	btfss	Lcd_Port@a,2
  2617     03E4  2BE6               	goto	u611
  2618     03E5  2BE7               	goto	u610
  2619     03E6                     u611:
  2620     03E6  2BE9               	goto	l130
  2621     03E7                     u610:
  2622     03E7                     l1054:
  2623     03E7  1708               	bsf	8,6	;volatile
  2624     03E8  2BEA               	goto	l131
  2625     03E9                     l130:	
  2626                           ;lcd.c: 23:     else PORTDbits.RD6 = 0;
  2627                           
  2628     03E9  1308               	bcf	8,6	;volatile
  2629     03EA                     l131:
  2630                           
  2631                           ;lcd.c: 25:     if (a & 8) PORTDbits.RD7 = 1;
  2632     03EA  1DF0               	btfss	Lcd_Port@a,3
  2633     03EB  2BED               	goto	u621
  2634     03EC  2BEE               	goto	u620
  2635     03ED                     u621:
  2636     03ED  2BF0               	goto	l132
  2637     03EE                     u620:
  2638     03EE                     l1056:
  2639     03EE  1788               	bsf	8,7	;volatile
  2640     03EF  2BF1               	goto	l134
  2641     03F0                     l132:	
  2642                           ;lcd.c: 26:     else PORTDbits.RD7 = 0;
  2643                           
  2644     03F0  1388               	bcf	8,7	;volatile
  2645     03F1                     l134:
  2646     03F1  0008               	return
  2647     03F2                     __end_of_Lcd_Port:
  2648     007E                     btemp	set	126	;btemp
  2649     007E                     wtemp0	set	126
  2650                           
  2651                           	psect	idloc
  2652                           
  2653                           ;Config register IDLOC0 @ 0x2000
  2654                           ;	unspecified, using default values
  2655     2000                     	org	8192
  2656     2000  3FFF               	dw	16383
  2657                           
  2658                           ;Config register IDLOC1 @ 0x2001
  2659                           ;	unspecified, using default values
  2660     2001                     	org	8193
  2661     2001  3FFF               	dw	16383
  2662                           
  2663                           ;Config register IDLOC2 @ 0x2002
  2664                           ;	unspecified, using default values
  2665     2002                     	org	8194
  2666     2002  3FFF               	dw	16383
  2667                           
  2668                           ;Config register IDLOC3 @ 0x2003
  2669                           ;	unspecified, using default values
  2670     2003                     	org	8195
  2671     2003  3FFF               	dw	16383
  2672                           
  2673                           	psect	config
  2674                           
  2675                           ;Config register CONFIG @ 0x2007
  2676                           ;	Oscillator Selection bits
  2677                           ;	FOSC = HS, HS oscillator
  2678                           ;	Watchdog Timer Enable bit
  2679                           ;	WDTE = OFF, WDT disabled
  2680                           ;	Power-up Timer Enable bit
  2681                           ;	PWRTE = ON, PWRT enabled
  2682                           ;	Brown-out Reset Enable bit
  2683                           ;	BOREN = ON, BOR enabled
  2684                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2685                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  2686                           ;	Data EEPROM Memory Code Protection bit
  2687                           ;	CPD = OFF, Data EEPROM code protection off
  2688                           ;	Flash Program Memory Write Enable bits
  2689                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2690                           ;	In-Circuit Debugger Mode bit
  2691                           ;	DEBUG = 0x1, unprogrammed default
  2692                           ;	Flash Program Memory Code Protection bit
  2693                           ;	CP = OFF, Code protection off
  2694     2007                     	org	8199
  2695     2007  3FF2               	dw	16370

Data Sizes:
    Strings     10
    Constant    12
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     69      70
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 50
		 -> Lcd_Write_Int@buffer(BANK0[50]), STR_1(CODE[10]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_Int
    _Lcd_Write_Int->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 7     7      0    4497
                                             62 BANK0      7     7      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                     _Lcd_Write_Char
                      _Lcd_Write_Int
                   _Lcd_Write_String
                        _Numpad_Read
 ---------------------------------------------------------------------------------
 (2) _Numpad_Read                                          6     6      0     271
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       64    62      2    2449
                                             12 COMMON     2     0      2
                                              0 BANK0     62    62      0
                   _Lcd_Write_String
                            ___awdiv
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     420
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     532
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Char
     _Lcd_Port
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
     ___awdiv
     ___lwdiv
     ___lwmod
   _Lcd_Write_String
   _Numpad_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      54       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     45      46       5       87.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      54      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jan 18 21:58:29 2023

                       pc 0002              ___awdiv@sign 0076                        fsr 0004  
Numpad_Read@currentKeyVal 0073                       l200 066C                       l130 03E9  
                     l131 03EA                       l132 03F0                       l140 0590  
                     l204 0683                       l134 03F1                       l126 03D9  
                     l127 03DC                       l143 03AE                       l128 03E2  
                     l152 0426                       l129 03E3                       l137 03CF  
                     l149 052B                       l158 04A2                       l361 05F7  
                     l179 07F8                       l480 04E6                       l490 0460  
                     u600 03E0                       u601 03DF                       u610 03E7  
                     u611 03E6                       u620 03EE                       u621 03ED  
                     u710 05C4                       u711 05C3                       u640 046E  
                     u705 05B6                       u650 0490                       u730 05D5  
                     u810 04CE                       u635 03FF                       u731 05D4  
                     u811 04CD                       u900 04ED                       u660 04A2  
                     u901 04EC                       u661 04A1                       u725 05C5  
                     u805 04BE                       u590 03D5                       u750 05E9  
                     u670 0596                       u830 04E2                       u591 03D4  
                     u751 05E8                       u735 05D1                       u671 0595  
                     u831 04E1                       u815 04CA                       u920 050F  
                     u760 05EE                       u680 05A1                       u840 042D  
                     u921 050E                       u761 05ED                       u745 05DD  
                     u681 05A0                       u825 04D6                       u841 042C  
                     u690 05B2                       u770 04AB                       u915 04F3  
                     u691 05B1                       u771 04AA                       u860 043F  
                     u861 043E                       u790 04BD                       u870 0449  
                     u935 0515                       u791 04BC                       u871 0448  
                     u855 0431                       u960 0633                       u944 060E  
                     u785 04AF                       u961 0632                       u945 060C  
                     u890 045C                       u970 0638                       u954 0626  
                     u891 045B                       u875 0445                       u971 0637  
                     u955 0624                       u885 0450                       u985 063B  
                     u994 0654                       u995 0652                       fsr0 0004  
                     indf 0000                      l1100 0591                      l1110 05A1  
                    l1102 0592                      l1200 0542                      l1120 05B5  
                    l1112 05A6                      l1104 0596                      l1050 03D5  
                    l1210 0566                      l1202 0548                      l1130 05DB  
                    l1122 05BC                      l1114 05AA                      l1106 059B  
                    l1052 03E0                      l1220 0584                      l1212 056C  
                    l1204 0551                      l1060 03F9                      l1140 05F3  
                    l1132 05DC                      l1124 05C0                      l1116 05AC  
                    l1108 059D                      l1300 0727                      l1054 03E7  
                    l1222 058A                      l1214 0572                      l1206 0557  
                    l1230 04FD                      l1070 0415                      l1062 03FC  
                    l1134 05E3                      l1126 05C4                      l1118 05B2  
                    l1150 04AE                      l1310 0759                      l1302 072C  
                    l1056 03EE                      l1048 03D1                      l1216 0578  
                    l1208 0560                      l1240 051F                      l1232 0503  
                    l1224 04E8                      l1072 041B                      l1064 040A  
                    l1080 0464                      l1128 05D5                      l1136 05E9  
                    l1160 04D4                      l1152 04B5                      l1144 04A3  
                    l1320 0783                      l1312 076C                      l1304 0731  
                    l1090 03B7                      l1218 057E                      l1242 0525  
                    l1226 04ED                      l1234 050A                      l1074 041E  
                    l1066 040D                      l1058 03F3                      l1082 0480  
                    l1138 05EE                      l1162 04D5                      l1154 04B9  
                    l1146 04A5                      l1170 0427                      l1330 07E4  
                    l1322 0788                      l1314 0772                      l1306 073D  
                    l1092 03BA                      l1236 050F                      l1228 04FA  
                    l1076 0423                      l1068 0412                      l1084 0486  
                    l1164 04DC                      l1156 04BD                      l1148 04AB  
                    l1180 043F                      l1172 042D                      l1332 07EC  
                    l1324 078B                      l1316 0777                      l1308 0751  
                    l1252 0603                      l1244 05F8                      l1340 0691  
                    l1094 03C0                      l1086 03B0                      l1238 051C  
                    l1078 0461                      l1158 04CE                      l1166 04E2  
                    l1182 0449                      l1174 0430                      l1334 07EE  
                    l1326 07C1                      l1318 077D                      l1270 064E  
                    l1262 0620                      l1254 0616                      l1246 0602  
                    l1350 06AD                      l1342 069A                      l1096 03C3  
                    l1088 03B3                      l1192 052C                      l1184 044F  
                    l1176 0437                      l1336 07EF                      l1328 07C7  
                    l1280 066E                      l1272 065C                      l1264 0633  
                    l1256 061F                      l1352 06B2                      l1360 06D9  
                    l1344 069A                      l1098 03CC                      l1194 052F  
                    l1186 0456                      l1178 043B                      l1282 0672  
                    l1274 0665                      l1266 0638                      l1370 06F5  
                    l1362 06DF                      l1354 06B9                      l1346 06A2  
                    l1338 0684                      l1292 03A2                      l1196 0533  
                    l1188 045C                      l1284 0678                      l1276 066A  
                    l1268 064C                      l1380 0706                      l1364 06E4  
                    l1372 06FB                      l1356 06C1                      l1348 06A8  
                    l1198 0539                      l1294 0718                      l1286 067C  
                    l1374 06FC                      l1366 06E8                      l1358 06C9  
                    l1296 071E                      l1288 0682                      l1376 06FF  
                    l1368 06EF                      l1298 0720                      l1378 0700  
                    STR_1 001F                      u1000 066A                      u1001 0669  
                    u1010 0678                      u1011 0677                      u1020 0682  
                    u1100 06A8                      u1021 0681                      u1101 06A7  
                    u1030 0725                      u1110 06AD                      u1031 0723  
                    u1111 06AC                      u1040 0726                      u1120 06B9  
                    u1121 06B8                      u1050 072C                      u1130 06DF  
                    u1051 072B                      u1131 06DE                      u1060 0772  
                    u1140 06E4                      u1061 0771                      u1141 06E3  
                    u1070 0777                      u1150 06F5                      u1207 0420  
                    u1071 0776                      u1151 06F4                      u1080 07E4  
                    u1160 06FA                      u1217 053D                      u1081 07E3  
                    u1161 06F9                      u1090 07EC                      u1227 054C  
                    u1091 07EB                      u1237 055B                      u1085 07E0  
                    u1247 03C7                      u1177 061A                      u1187 0660  
                    u1197 040F         ?_Lcd_Write_String 0075                      _main 0684  
                    btemp 007E                      start 0000        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 03D0                     ?_main 0070           __end_of___awdiv 05F8  
         ___awdiv@divisor 0070           __end_of___lwdiv 04E7           __end_of___lwmod 0461  
         ___awdiv@counter 0075                     _PORTB 0006                     _PORTD 0008  
                   _TRISB 0086                     _TRISD 0088                     _TRISE 0089  
                   pclath 000A                     status 0003                     wtemp0 007E  
        __end_of_Lcd_Init 0591          __end_of_Lcd_Port 03F2           __initialization 07F9  
            __end_of_main 0718                    ??_main 005E          ___awdiv@dividend 0072  
               ??_Lcd_Cmd 0071                 ??___awdiv 0074                 ??___lwdiv 0074  
               ??___lwmod 0074                    _keypad 0013          ___awdiv@quotient 0077  
           main@selettore 0064             main@operatore 0061     __end_of_Lcd_Write_Int 07F9  
           ??_Numpad_Read 0070             main@risultato 0060          Lcd_Write_Int@val 007C  
         Lcd_Set_Cursor@y 0078           Lcd_Set_Cursor@z 0077   __end_of__initialization 07FC  
       __end_of_Lcd_Clear 03AF            __pcstackCOMMON 0070            _Lcd_Set_Cursor 04E7  
               ?_Lcd_Init 0070                 ?_Lcd_Port 0070            Lcd_Write_Int@i 005C  
          Lcd_Write_Int@n 0058            Lcd_Write_Int@t 005A       __end_of_Numpad_Read 0684  
              __pbssBANK0 0065                __pmaintext 0684    __end_of_Lcd_Set_Cursor 052C  
              ??_Lcd_Init 0074                ??_Lcd_Port 0070                __stringtab 0003  
          _Lcd_Write_Char 03F2                   _Lcd_Cmd 03AF                   ___awdiv 0591  
                 ___lwdiv 04A3                   ___lwmod 0427           ?_Lcd_Set_Cursor 0074  
                 __ptext1 05F8                   __ptext2 0718                   __ptext3 0427  
                 __ptext4 04A3                   __ptext5 0591                   __ptext6 0461  
                 __ptext7 03F2                   __ptext8 04E7                   __ptext9 052C  
             _Numpad_Read 05F8      Numpad_Read@oldKeyVal 0065    __end_of_Lcd_Write_Char 0427  
    end_of_initialization 07FC                 Lcd_Port@a 0070                 _PORTDbits 0008  
               _PORTEbits 0009           ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0075  
       Lcd_Write_String@i 007A                 _Lcd_Clear 03A2          _Lcd_Write_String 0461  
          __end_of_keypad 001F       start_initialization 07F9     Lcd_Set_Cursor@colonna 0074  
      Numpad_Read@colScan 0074                ?_Lcd_Clear 0070           Lcd_Write_Char@a 0074  
         Lcd_Write_Char@y 0073           Lcd_Write_Int@n1 0056        Numpad_Read@rowScan 0075  
               ___latbits 0002             __pcstackBANK0 0020                  ?_Lcd_Cmd 0070  
        ___lwdiv@dividend 0072          ??_Lcd_Set_Cursor 0075                  ?___awdiv 0070  
                ?___lwdiv 0070                  ?___lwmod 0070                 __pstrings 0003  
           _Lcd_Write_Int 0718              ?_Numpad_Read 0070          ___lwdiv@quotient 0075  
                Lcd_Cmd@a 0073               ??_Lcd_Clear 0074               __stringbase 0012  
          ?_Lcd_Write_Int 007C          ??_Lcd_Write_Char 0071                  _Lcd_Init 052C  
                _Lcd_Port 03D0  __end_of_Lcd_Write_String 04A3        __end_of__stringtab 0013  
         ___lwdiv@divisor 0070           ___lwdiv@counter 0077                  __ptext10 03A2  
                __ptext11 03AF                  __ptext12 03D0     Numpad_Read@currentKey 0072  
                main@read 0063           ??_Lcd_Write_Int 0020       Lcd_Write_Int@buffer 0023  
      Lcd_Write_Char@temp 0072          ___lwmod@dividend 0072                 stringcode 000D  
      Lcd_Set_Cursor@riga 0076        Lcd_Set_Cursor@temp 0079        Lcd_Write_Int@isNeg 0055  
         ___lwmod@divisor 0070           ___lwmod@counter 0075                  stringdir 000D  
                stringtab 0003  
