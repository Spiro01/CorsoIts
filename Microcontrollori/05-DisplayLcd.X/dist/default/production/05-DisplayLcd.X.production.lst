

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Dec 21 19:58:25 2022

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	maintext,global,class=CODE,split=1,delta=2
    10                           	psect	text1,local,class=CODE,merge=1,delta=2
    11                           	psect	text2,local,class=CODE,merge=1,delta=2
    12                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    13                           	psect	text4,local,class=CODE,merge=1,delta=2,group=1
    14                           	psect	text5,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text6,local,class=CODE,merge=1,delta=2
    16                           	psect	text7,local,class=CODE,merge=1,delta=2
    17                           	psect	text8,local,class=CODE,merge=1,delta=2
    18                           	psect	text9,local,class=CODE,merge=1,delta=2
    19                           	psect	text10,local,class=CODE,merge=1,delta=2
    20                           	psect	text11,local,class=CODE,merge=1,delta=2
    21                           	psect	text12,local,class=CODE,merge=1,delta=2
    22                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    23                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    24                           	dabs	1,0x7E,2
    25     0000                     
    26                           ; Version 2.40
    27                           ; Generated 17/11/2021 GMT
    28                           ; 
    29                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F877A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61     0000                     	;# 
    62     0001                     	;# 
    63     0002                     	;# 
    64     0003                     	;# 
    65     0004                     	;# 
    66     0005                     	;# 
    67     0006                     	;# 
    68     0007                     	;# 
    69     0008                     	;# 
    70     0009                     	;# 
    71     000A                     	;# 
    72     000B                     	;# 
    73     000C                     	;# 
    74     000D                     	;# 
    75     000E                     	;# 
    76     000E                     	;# 
    77     000F                     	;# 
    78     0010                     	;# 
    79     0011                     	;# 
    80     0012                     	;# 
    81     0013                     	;# 
    82     0014                     	;# 
    83     0015                     	;# 
    84     0015                     	;# 
    85     0016                     	;# 
    86     0017                     	;# 
    87     0018                     	;# 
    88     0019                     	;# 
    89     001A                     	;# 
    90     001B                     	;# 
    91     001B                     	;# 
    92     001C                     	;# 
    93     001D                     	;# 
    94     001E                     	;# 
    95     001F                     	;# 
    96     0081                     	;# 
    97     0085                     	;# 
    98     0086                     	;# 
    99     0087                     	;# 
   100     0088                     	;# 
   101     0089                     	;# 
   102     008C                     	;# 
   103     008D                     	;# 
   104     008E                     	;# 
   105     0091                     	;# 
   106     0092                     	;# 
   107     0093                     	;# 
   108     0094                     	;# 
   109     0098                     	;# 
   110     0099                     	;# 
   111     009C                     	;# 
   112     009D                     	;# 
   113     009E                     	;# 
   114     009F                     	;# 
   115     010C                     	;# 
   116     010D                     	;# 
   117     010E                     	;# 
   118     010F                     	;# 
   119     018C                     	;# 
   120     018D                     	;# 
   121     0000                     	;# 
   122     0001                     	;# 
   123     0002                     	;# 
   124     0003                     	;# 
   125     0004                     	;# 
   126     0005                     	;# 
   127     0006                     	;# 
   128     0007                     	;# 
   129     0008                     	;# 
   130     0009                     	;# 
   131     000A                     	;# 
   132     000B                     	;# 
   133     000C                     	;# 
   134     000D                     	;# 
   135     000E                     	;# 
   136     000E                     	;# 
   137     000F                     	;# 
   138     0010                     	;# 
   139     0011                     	;# 
   140     0012                     	;# 
   141     0013                     	;# 
   142     0014                     	;# 
   143     0015                     	;# 
   144     0015                     	;# 
   145     0016                     	;# 
   146     0017                     	;# 
   147     0018                     	;# 
   148     0019                     	;# 
   149     001A                     	;# 
   150     001B                     	;# 
   151     001B                     	;# 
   152     001C                     	;# 
   153     001D                     	;# 
   154     001E                     	;# 
   155     001F                     	;# 
   156     0081                     	;# 
   157     0085                     	;# 
   158     0086                     	;# 
   159     0087                     	;# 
   160     0088                     	;# 
   161     0089                     	;# 
   162     008C                     	;# 
   163     008D                     	;# 
   164     008E                     	;# 
   165     0091                     	;# 
   166     0092                     	;# 
   167     0093                     	;# 
   168     0094                     	;# 
   169     0098                     	;# 
   170     0099                     	;# 
   171     009C                     	;# 
   172     009D                     	;# 
   173     009E                     	;# 
   174     009F                     	;# 
   175     010C                     	;# 
   176     010D                     	;# 
   177     010E                     	;# 
   178     010F                     	;# 
   179     018C                     	;# 
   180     018D                     	;# 
   181                           
   182                           	psect	strings
   183     0003                     __pstrings:
   184     0003                     stringtab:
   185     0003                     __stringtab:
   186                           
   187                           ;	String table - string pointers are 1 byte each
   188     0003  1BFF               	btfsc	btemp+1,7
   189     0004  280D               	ljmp	stringcode
   190     0005  1383               	bcf	3,7
   191     0006  187F               	btfsc	btemp+1,0
   192     0007  1783               	bsf	3,7
   193     0008  0800               	movf	0,w
   194     0009  0A84               	incf	4,f
   195     000A  1903               	skipnz
   196     000B  0AFF               	incf	btemp+1,f
   197     000C  0008               	return
   198     000D                     stringcode:
   199     000D                     stringdir:
   200     000D  3000               	movlw	high stringdir
   201     000E  008A               	movwf	10
   202     000F  0804               	movf	4,w
   203     0010  0A84               	incf	4,f
   204     0011  0782               	addwf	2,f
   205     0012                     __stringbase:
   206     0012  3400               	retlw	0
   207     0013                     __end_of__stringtab:
   208     0013                     _keypad:
   209     0013  342A               	retlw	42
   210     0014  3407               	retlw	7
   211     0015  3404               	retlw	4
   212     0016  3401               	retlw	1
   213     0017  3400               	retlw	0
   214     0018  3408               	retlw	8
   215     0019  3405               	retlw	5
   216     001A  3402               	retlw	2
   217     001B  3423               	retlw	35
   218     001C  3409               	retlw	9
   219     001D  3406               	retlw	6
   220     001E  3403               	retlw	3
   221     001F                     __end_of_keypad:
   222     0008                     _PORTD	set	8
   223     0006                     _PORTB	set	6
   224     0009                     _PORTEbits	set	9
   225     0008                     _PORTDbits	set	8
   226     0086                     _TRISB	set	134
   227     0089                     _TRISE	set	137
   228     0088                     _TRISD	set	136
   229     001F                     STR_1:
   230     001F  3442               	retlw	66	;'B'
   231     0020  3465               	retlw	101	;'e'
   232     0021  346E               	retlw	110	;'n'
   233     0022  3476               	retlw	118	;'v'
   234     0023  3465               	retlw	101	;'e'
   235     0024  346E               	retlw	110	;'n'
   236     0025  3475               	retlw	117	;'u'
   237     0026  3474               	retlw	116	;'t'
   238     0027  346F               	retlw	111	;'o'
   239     0028  3400               	retlw	0
   240                           
   241                           	psect	cinit
   242     07F9                     start_initialization:	
   243                           ; #config settings
   244                           
   245     07F9                     __initialization:
   246                           
   247                           ; Clear objects allocated to BANK0
   248     07F9  1283               	bcf	3,5	;RP0=0, select bank0
   249     07FA  1303               	bcf	3,6	;RP1=0, select bank0
   250     07FB  01E1               	clrf	__pbssBANK0& (0+127)
   251     07FC                     end_of_initialization:	
   252                           ;End of C runtime variable initialization code
   253                           
   254     07FC                     __end_of__initialization:
   255     07FC  0183               	clrf	3
   256     07FD  120A  118A  2D12   	ljmp	_main	;jump to C main() function
   257                           
   258                           	psect	bssBANK0
   259     0061                     __pbssBANK0:
   260     0061                     Numpad_Read@oldKeyVal:
   261     0061                     	ds	1
   262                           
   263                           	psect	cstackCOMMON
   264     0070                     __pcstackCOMMON:
   265     0070                     ?_Lcd_Port:
   266     0070                     ??_Lcd_Port:	
   267                           ; 1 bytes @ 0x0
   268                           
   269     0070                     ?_Lcd_Cmd:	
   270                           ; 1 bytes @ 0x0
   271                           
   272     0070                     ?_Lcd_Init:	
   273                           ; 1 bytes @ 0x0
   274                           
   275     0070                     ?_Lcd_Clear:	
   276                           ; 1 bytes @ 0x0
   277                           
   278     0070                     ?_Lcd_Write_Char:	
   279                           ; 1 bytes @ 0x0
   280                           
   281     0070                     ?_Numpad_Read:	
   282                           ; 1 bytes @ 0x0
   283                           
   284     0070                     ??_Numpad_Read:	
   285                           ; 1 bytes @ 0x0
   286                           
   287     0070                     ?_main:	
   288                           ; 1 bytes @ 0x0
   289                           
   290     0070                     ?___awdiv:	
   291                           ; 1 bytes @ 0x0
   292                           
   293     0070                     ?___lwdiv:	
   294                           ; 2 bytes @ 0x0
   295                           
   296     0070                     ?___lwmod:	
   297                           ; 2 bytes @ 0x0
   298                           
   299     0070                     Lcd_Port@a:	
   300                           ; 2 bytes @ 0x0
   301                           
   302     0070                     ___awdiv@divisor:	
   303                           ; 1 bytes @ 0x0
   304                           
   305     0070                     ___lwdiv@divisor:	
   306                           ; 2 bytes @ 0x0
   307                           
   308     0070                     ___lwmod@divisor:	
   309                           ; 2 bytes @ 0x0
   310                           
   311                           
   312                           ; 2 bytes @ 0x0
   313     0070                     	ds	1
   314     0071                     ??_Lcd_Cmd:
   315     0071                     ??_Lcd_Write_Char:	
   316                           ; 1 bytes @ 0x1
   317                           
   318                           
   319                           ; 1 bytes @ 0x1
   320     0071                     	ds	1
   321     0072                     Lcd_Write_Char@temp:
   322     0072                     Numpad_Read@currentKeyVal:	
   323                           ; 1 bytes @ 0x2
   324                           
   325     0072                     ___awdiv@dividend:	
   326                           ; 1 bytes @ 0x2
   327                           
   328     0072                     ___lwdiv@dividend:	
   329                           ; 2 bytes @ 0x2
   330                           
   331     0072                     ___lwmod@dividend:	
   332                           ; 2 bytes @ 0x2
   333                           
   334                           
   335                           ; 2 bytes @ 0x2
   336     0072                     	ds	1
   337     0073                     Lcd_Cmd@a:
   338     0073                     Lcd_Write_Char@y:	
   339                           ; 1 bytes @ 0x3
   340                           
   341     0073                     Numpad_Read@currentKey:	
   342                           ; 1 bytes @ 0x3
   343                           
   344                           
   345                           ; 1 bytes @ 0x3
   346     0073                     	ds	1
   347     0074                     ??_Lcd_Init:
   348     0074                     ??_Lcd_Clear:	
   349                           ; 1 bytes @ 0x4
   350                           
   351     0074                     ?_Lcd_Set_Cursor:	
   352                           ; 1 bytes @ 0x4
   353                           
   354     0074                     ??___awdiv:	
   355                           ; 1 bytes @ 0x4
   356                           
   357     0074                     ??___lwdiv:	
   358                           ; 1 bytes @ 0x4
   359                           
   360     0074                     ??___lwmod:	
   361                           ; 1 bytes @ 0x4
   362                           
   363     0074                     Lcd_Set_Cursor@b:	
   364                           ; 1 bytes @ 0x4
   365                           
   366     0074                     Lcd_Write_Char@a:	
   367                           ; 1 bytes @ 0x4
   368                           
   369     0074                     Numpad_Read@colScan:	
   370                           ; 1 bytes @ 0x4
   371                           
   372                           
   373                           ; 1 bytes @ 0x4
   374     0074                     	ds	1
   375     0075                     ??_Lcd_Set_Cursor:
   376     0075                     ?_Lcd_Write_String:	
   377                           ; 1 bytes @ 0x5
   378                           
   379     0075                     Numpad_Read@rowScan:	
   380                           ; 1 bytes @ 0x5
   381                           
   382     0075                     ___awdiv@counter:	
   383                           ; 1 bytes @ 0x5
   384                           
   385     0075                     ___lwmod@counter:	
   386                           ; 1 bytes @ 0x5
   387                           
   388     0075                     Lcd_Write_String@a:	
   389                           ; 1 bytes @ 0x5
   390                           
   391     0075                     ___lwdiv@quotient:	
   392                           ; 2 bytes @ 0x5
   393                           
   394                           
   395                           ; 2 bytes @ 0x5
   396     0075                     	ds	1
   397     0076                     Lcd_Set_Cursor@a:
   398     0076                     ___awdiv@sign:	
   399                           ; 1 bytes @ 0x6
   400                           
   401                           
   402                           ; 1 bytes @ 0x6
   403     0076                     	ds	1
   404     0077                     ??_Lcd_Write_String:
   405     0077                     Lcd_Set_Cursor@z:	
   406                           ; 1 bytes @ 0x7
   407                           
   408     0077                     ___lwdiv@counter:	
   409                           ; 1 bytes @ 0x7
   410                           
   411     0077                     ___awdiv@quotient:	
   412                           ; 1 bytes @ 0x7
   413                           
   414                           
   415                           ; 2 bytes @ 0x7
   416     0077                     	ds	1
   417     0078                     Lcd_Set_Cursor@y:
   418                           
   419                           ; 1 bytes @ 0x8
   420     0078                     	ds	1
   421     0079                     Lcd_Set_Cursor@temp:
   422                           
   423                           ; 1 bytes @ 0x9
   424     0079                     	ds	1
   425     007A                     Lcd_Write_String@i:
   426                           
   427                           ; 2 bytes @ 0xA
   428     007A                     	ds	2
   429     007C                     ?_Lcd_Write_Int:
   430     007C                     Lcd_Write_Int@val:	
   431                           ; 1 bytes @ 0xC
   432                           
   433                           
   434                           ; 2 bytes @ 0xC
   435     007C                     	ds	2
   436                           
   437                           	psect	cstackBANK0
   438     0020                     __pcstackBANK0:
   439     0020                     ??_Lcd_Write_Int:
   440                           
   441                           ; 1 bytes @ 0x0
   442     0020                     	ds	3
   443     0023                     Lcd_Write_Int@buffer:
   444                           
   445                           ; 50 bytes @ 0x3
   446     0023                     	ds	50
   447     0055                     Lcd_Write_Int@isNeg:
   448                           
   449                           ; 1 bytes @ 0x35
   450     0055                     	ds	1
   451     0056                     Lcd_Write_Int@n1:
   452                           
   453                           ; 2 bytes @ 0x36
   454     0056                     	ds	2
   455     0058                     Lcd_Write_Int@n:
   456                           
   457                           ; 2 bytes @ 0x38
   458     0058                     	ds	2
   459     005A                     Lcd_Write_Int@t:
   460                           
   461                           ; 2 bytes @ 0x3A
   462     005A                     	ds	2
   463     005C                     Lcd_Write_Int@i:
   464                           
   465                           ; 2 bytes @ 0x3C
   466     005C                     	ds	2
   467     005E                     ??_main:
   468                           
   469                           ; 1 bytes @ 0x3E
   470     005E                     	ds	2
   471     0060                     main@read:
   472                           
   473                           ; 1 bytes @ 0x40
   474     0060                     	ds	1
   475                           
   476                           	psect	maintext
   477     0512                     __pmaintext:	
   478 ;;
   479 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   480 ;;
   481 ;; *************** function _main *****************
   482 ;; Defined at:
   483 ;;		line 22 in file "main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;  read            1   64[BANK0 ] unsigned char 
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : B00/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   497 ;;      Params:         0       0       0       0       0
   498 ;;      Locals:         0       1       0       0       0
   499 ;;      Temps:          0       2       0       0       0
   500 ;;      Totals:         0       3       0       0       0
   501 ;;Total ram usage:        3 bytes
   502 ;; Hardware stack levels required when called: 4
   503 ;; This function calls:
   504 ;;		_Lcd_Clear
   505 ;;		_Lcd_Init
   506 ;;		_Lcd_Set_Cursor
   507 ;;		_Lcd_Write_Int
   508 ;;		_Lcd_Write_String
   509 ;;		_Numpad_Read
   510 ;; This function is called by:
   511 ;;		Startup code after reset
   512 ;; This function uses a non-reentrant model
   513 ;;
   514                           
   515     0512                     _main:	
   516                           ;psect for function _main
   517                           
   518     0512                     l1273:	
   519                           ;incstack = 0
   520                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   521                           
   522                           
   523                           ;main.c: 25:     Lcd_Init();
   524     0512  120A  118A  25DD  120A  118A  	fcall	_Lcd_Init
   525                           
   526                           ;main.c: 27:     Lcd_Set_Cursor(0, 3);
   527     0517  3003               	movlw	3
   528     0518  00F4               	movwf	Lcd_Set_Cursor@b
   529     0519  3000               	movlw	0
   530     051A  120A  118A  2598  120A  118A  	fcall	_Lcd_Set_Cursor
   531     051F                     l1275:
   532                           
   533                           ;main.c: 28:     Lcd_Write_String("Benvenuto");
   534     051F  300D               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   535     0520  00F5               	movwf	Lcd_Write_String@a
   536     0521  3080               	movlw	128
   537     0522  00F6               	movwf	Lcd_Write_String@a+1
   538     0523  120A  118A  24D0  120A  118A  	fcall	_Lcd_Write_String
   539     0528                     l1277:
   540                           
   541                           ;main.c: 33:         char read = Numpad_Read();
   542     0528  120A  118A  26A9  120A  118A  	fcall	_Numpad_Read
   543     052D  1283               	bcf	3,5	;RP0=0, select bank0
   544     052E  1303               	bcf	3,6	;RP1=0, select bank0
   545     052F  00E0               	movwf	main@read
   546     0530                     l1279:
   547                           
   548                           ;main.c: 34:         if(read <0xff){
   549     0530  0A60               	incf	main@read,w
   550     0531  1903               	btfsc	3,2
   551     0532  2D34               	goto	u1001
   552     0533  2D35               	goto	u1000
   553     0534                     u1001:
   554     0534  2D28               	goto	l1277
   555     0535                     u1000:
   556     0535                     l1281:
   557                           
   558                           ;main.c: 35:             Lcd_Clear();
   559     0535  120A  118A  2411  120A  118A  	fcall	_Lcd_Clear
   560                           
   561                           ;main.c: 36:             Lcd_Set_Cursor(0, 3);
   562     053A  3003               	movlw	3
   563     053B  00F4               	movwf	Lcd_Set_Cursor@b
   564     053C  3000               	movlw	0
   565     053D  120A  118A  2598  120A  118A  	fcall	_Lcd_Set_Cursor
   566     0542                     l1283:
   567                           
   568                           ;main.c: 37:             Lcd_Write_Int(read);
   569     0542  1283               	bcf	3,5	;RP0=0, select bank0
   570     0543  1303               	bcf	3,6	;RP1=0, select bank0
   571     0544  0860               	movf	main@read,w
   572     0545  00DE               	movwf	??_main
   573     0546  01DF               	clrf	??_main+1
   574     0547  085E               	movf	??_main,w
   575     0548  00FC               	movwf	Lcd_Write_Int@val
   576     0549  085F               	movf	??_main+1,w
   577     054A  00FD               	movwf	Lcd_Write_Int@val+1
   578     054B  120A  118A  2718  120A  118A  	fcall	_Lcd_Write_Int
   579     0550  2D28               	goto	l1277
   580     0551  120A  118A  2800   	ljmp	start
   581     0554                     __end_of_main:
   582                           
   583                           	psect	text1
   584     06A9                     __ptext1:	
   585 ;; *************** function _Numpad_Read *****************
   586 ;; Defined at:
   587 ;;		line 18 in file "./numpad.h"
   588 ;; Parameters:    Size  Location     Type
   589 ;;		None
   590 ;; Auto vars:     Size  Location     Type
   591 ;;  rowScan         1    5[COMMON] unsigned char 
   592 ;;  colScan         1    4[COMMON] unsigned char 
   593 ;;  currentKey      1    3[COMMON] unsigned char 
   594 ;;  currentKeyVa    1    2[COMMON] unsigned char 
   595 ;; Return value:  Size  Location     Type
   596 ;;                  1    wreg      unsigned char 
   597 ;; Registers used:
   598 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   599 ;; Tracked objects:
   600 ;;		On entry : 0/0
   601 ;;		On exit  : 0/0
   602 ;;		Unchanged: 0/0
   603 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   604 ;;      Params:         0       0       0       0       0
   605 ;;      Locals:         4       0       0       0       0
   606 ;;      Temps:          2       0       0       0       0
   607 ;;      Totals:         6       0       0       0       0
   608 ;;Total ram usage:        6 bytes
   609 ;; Hardware stack levels used: 2
   610 ;; This function calls:
   611 ;;		Nothing
   612 ;; This function is called by:
   613 ;;		_main
   614 ;; This function uses a non-reentrant model
   615 ;;
   616                           
   617     06A9                     _Numpad_Read:	
   618                           ;psect for function _Numpad_Read
   619                           
   620     06A9                     l1227:	
   621                           ;incstack = 0
   622                           ; Regs used in _Numpad_Read: [wreg-fsr0h+status,2+status,0+pclath]
   623                           
   624                           
   625                           ;./numpad.h: 19:     TRISD |= 0x0f;
   626     06A9  300F               	movlw	15
   627     06AA  00F0               	movwf	??_Numpad_Read
   628     06AB  0870               	movf	??_Numpad_Read,w
   629     06AC  1683               	bsf	3,5	;RP0=1, select bank1
   630     06AD  1303               	bcf	3,6	;RP1=0, select bank1
   631     06AE  0488               	iorwf	8,f	;volatile
   632                           
   633                           ;./numpad.h: 20:     TRISB &= ~0x07;
   634     06AF  30F8               	movlw	248
   635     06B0  00F0               	movwf	??_Numpad_Read
   636     06B1  0870               	movf	??_Numpad_Read,w
   637     06B2  0586               	andwf	6,f	;volatile
   638     06B3                     l1229:
   639                           
   640                           ;./numpad.h: 21:     char colScan, rowScan, currentKeyVal, currentKey;;./numpad.h: 22:  
      +                             static char oldKeyVal;;./numpad.h: 23:     for (colScan = 0; colScan < 3; colScan++) 
      +                          {
   641     06B3  01F4               	clrf	Numpad_Read@colScan
   642     06B4                     l1235:
   643                           
   644                           ;./numpad.h: 24:         PORTB |= 0x07;
   645     06B4  3007               	movlw	7
   646     06B5  00F0               	movwf	??_Numpad_Read
   647     06B6  0870               	movf	??_Numpad_Read,w
   648     06B7  1283               	bcf	3,5	;RP0=0, select bank0
   649     06B8  0486               	iorwf	6,f	;volatile
   650                           
   651                           ;./numpad.h: 25:         PORTB &= ~(1UL << colScan);
   652     06B9  3001               	movlw	1
   653     06BA  00F0               	movwf	??_Numpad_Read
   654     06BB  0A74               	incf	Numpad_Read@colScan,w
   655     06BC  2EBF               	goto	u934
   656     06BD                     u935:
   657     06BD  1003               	clrc
   658     06BE  0DF0               	rlf	??_Numpad_Read,f
   659     06BF                     u934:
   660     06BF  3EFF               	addlw	-1
   661     06C0  1D03               	skipz
   662     06C1  2EBD               	goto	u935
   663     06C2  0870               	movf	??_Numpad_Read,w
   664     06C3  3AFF               	xorlw	255
   665     06C4  00F1               	movwf	??_Numpad_Read+1
   666     06C5  0871               	movf	??_Numpad_Read+1,w
   667     06C6  0586               	andwf	6,f	;volatile
   668     06C7                     l1237:
   669                           
   670                           ;./numpad.h: 26:         _delay((unsigned long)((15)*(20*1000000/4000.0)));
   671     06C7  3062               	movlw	98
   672     06C8  00F1               	movwf	??_Numpad_Read+1
   673     06C9  3065               	movlw	101
   674     06CA  00F0               	movwf	??_Numpad_Read
   675     06CB                     u1017:
   676     06CB  0BF0               	decfsz	??_Numpad_Read,f
   677     06CC  2ECB               	goto	u1017
   678     06CD  0BF1               	decfsz	??_Numpad_Read+1,f
   679     06CE  2ECB               	goto	u1017
   680     06CF  2ED0               	nop2
   681     06D0                     l1239:
   682                           
   683                           ;./numpad.h: 27:         for (rowScan = 0; rowScan < 4; rowScan++) {
   684     06D0  01F5               	clrf	Numpad_Read@rowScan
   685     06D1                     l1245:
   686                           
   687                           ;./numpad.h: 28:             currentKeyVal = (PORTD & (1 << rowScan));
   688     06D1  3001               	movlw	1
   689     06D2  00F0               	movwf	??_Numpad_Read
   690     06D3  0A75               	incf	Numpad_Read@rowScan,w
   691     06D4  2ED7               	goto	u944
   692     06D5                     u945:
   693     06D5  1003               	clrc
   694     06D6  0DF0               	rlf	??_Numpad_Read,f
   695     06D7                     u944:
   696     06D7  3EFF               	addlw	-1
   697     06D8  1D03               	skipz
   698     06D9  2ED5               	goto	u945
   699     06DA  0870               	movf	??_Numpad_Read,w
   700     06DB  1283               	bcf	3,5	;RP0=0, select bank0
   701     06DC  1303               	bcf	3,6	;RP1=0, select bank0
   702     06DD  0508               	andwf	8,w	;volatile
   703     06DE  00F2               	movwf	Numpad_Read@currentKeyVal
   704                           
   705                           ;./numpad.h: 30:             if (!currentKeyVal && oldKeyVal) {
   706     06DF  0872               	movf	Numpad_Read@currentKeyVal,w
   707     06E0  1D03               	btfss	3,2
   708     06E1  2EE3               	goto	u951
   709     06E2  2EE4               	goto	u950
   710     06E3                     u951:
   711     06E3  2F00               	goto	l83
   712     06E4                     u950:
   713     06E4                     l1247:
   714     06E4  0861               	movf	Numpad_Read@oldKeyVal,w
   715     06E5  1903               	btfsc	3,2
   716     06E6  2EE8               	goto	u961
   717     06E7  2EE9               	goto	u960
   718     06E8                     u961:
   719     06E8  2F00               	goto	l83
   720     06E9                     u960:
   721     06E9                     l1249:
   722                           
   723                           ;./numpad.h: 31:                 currentKey = keypad[rowScan + (4 * colScan)];
   724     06E9  0874               	movf	Numpad_Read@colScan,w
   725     06EA  00F0               	movwf	??_Numpad_Read
   726     06EB  3002               	movlw	2
   727     06EC                     u975:
   728     06EC  1003               	clrc
   729     06ED  0DF0               	rlf	??_Numpad_Read,f
   730     06EE  3EFF               	addlw	-1
   731     06EF  1D03               	skipz
   732     06F0  2EEC               	goto	u975
   733     06F1  3001               	movlw	(low ((_keypad-__stringbase)| (0+32768)))& (0+255)
   734     06F2  0770               	addwf	??_Numpad_Read,w
   735     06F3  00F1               	movwf	??_Numpad_Read+1
   736     06F4  0875               	movf	Numpad_Read@rowScan,w
   737     06F5  0771               	addwf	??_Numpad_Read+1,w
   738     06F6  0084               	movwf	4
   739     06F7  120A  118A  200D  120A  118A  	fcall	stringdir
   740     06FC  00F3               	movwf	Numpad_Read@currentKey
   741     06FD                     l1251:
   742                           
   743                           ;./numpad.h: 32:                 oldKeyVal = 0;
   744     06FD  01E1               	clrf	Numpad_Read@oldKeyVal
   745     06FE                     l1253:
   746                           
   747                           ;./numpad.h: 33:                 return currentKey;
   748     06FE  0873               	movf	Numpad_Read@currentKey,w
   749     06FF  2F17               	goto	l84
   750     0700                     l83:	
   751                           ;./numpad.h: 34:             }
   752                           
   753                           
   754                           ;./numpad.h: 36:             oldKeyVal = 1;
   755     0700  01E1               	clrf	Numpad_Read@oldKeyVal
   756     0701  0AE1               	incf	Numpad_Read@oldKeyVal,f
   757     0702                     l1257:
   758                           
   759                           ;./numpad.h: 37:         }
   760     0702  3001               	movlw	1
   761     0703  00F0               	movwf	??_Numpad_Read
   762     0704  0870               	movf	??_Numpad_Read,w
   763     0705  07F5               	addwf	Numpad_Read@rowScan,f
   764     0706                     l1259:
   765     0706  3004               	movlw	4
   766     0707  0275               	subwf	Numpad_Read@rowScan,w
   767     0708  1C03               	skipc
   768     0709  2F0B               	goto	u981
   769     070A  2F0C               	goto	u980
   770     070B                     u981:
   771     070B  2ED1               	goto	l1245
   772     070C                     u980:
   773     070C                     l1261:
   774                           
   775                           ;./numpad.h: 38:     }
   776     070C  3001               	movlw	1
   777     070D  00F0               	movwf	??_Numpad_Read
   778     070E  0870               	movf	??_Numpad_Read,w
   779     070F  07F4               	addwf	Numpad_Read@colScan,f
   780     0710                     l1263:
   781     0710  3003               	movlw	3
   782     0711  0274               	subwf	Numpad_Read@colScan,w
   783     0712  1C03               	skipc
   784     0713  2F15               	goto	u991
   785     0714  2F16               	goto	u990
   786     0715                     u991:
   787     0715  2EB4               	goto	l1235
   788     0716                     u990:
   789     0716                     l1265:
   790                           
   791                           ;./numpad.h: 39:     return 0xff;
   792     0716  30FF               	movlw	255
   793     0717                     l84:
   794     0717  0008               	return
   795     0718                     __end_of_Numpad_Read:
   796                           
   797                           	psect	text2
   798     0718                     __ptext2:	
   799 ;; *************** function _Lcd_Write_Int *****************
   800 ;; Defined at:
   801 ;;		line 124 in file "./lcd.h"
   802 ;; Parameters:    Size  Location     Type
   803 ;;  val             2   12[COMMON] int 
   804 ;; Auto vars:     Size  Location     Type
   805 ;;  t               2   58[BANK0 ] int 
   806 ;;  buffer         50    3[BANK0 ] unsigned char [50]
   807 ;;  i               2   60[BANK0 ] int 
   808 ;;  n               2   56[BANK0 ] int 
   809 ;;  n1              2   54[BANK0 ] unsigned int 
   810 ;;  isNeg           1   53[BANK0 ] unsigned char 
   811 ;; Return value:  Size  Location     Type
   812 ;;                  1    wreg      void 
   813 ;; Registers used:
   814 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   815 ;; Tracked objects:
   816 ;;		On entry : 0/0
   817 ;;		On exit  : 0/0
   818 ;;		Unchanged: 0/0
   819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   820 ;;      Params:         2       0       0       0       0
   821 ;;      Locals:         0      59       0       0       0
   822 ;;      Temps:          0       3       0       0       0
   823 ;;      Totals:         2      62       0       0       0
   824 ;;Total ram usage:       64 bytes
   825 ;; Hardware stack levels used: 1
   826 ;; Hardware stack levels required when called: 3
   827 ;; This function calls:
   828 ;;		_Lcd_Write_String
   829 ;;		___awdiv
   830 ;;		___lwdiv
   831 ;;		___lwmod
   832 ;; This function is called by:
   833 ;;		_main
   834 ;; This function uses a non-reentrant model
   835 ;;
   836                           
   837     0718                     _Lcd_Write_Int:	
   838                           ;psect for function _Lcd_Write_Int
   839                           
   840     0718                     l1183:	
   841                           ;incstack = 0
   842                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   843                           
   844                           
   845                           ;./lcd.h: 126:     int n = val;
   846     0718  087D               	movf	Lcd_Write_Int@val+1,w
   847     0719  1283               	bcf	3,5	;RP0=0, select bank0
   848     071A  1303               	bcf	3,6	;RP1=0, select bank0
   849     071B  00D9               	movwf	Lcd_Write_Int@n+1
   850     071C  087C               	movf	Lcd_Write_Int@val,w
   851     071D  00D8               	movwf	Lcd_Write_Int@n
   852     071E                     l1185:
   853                           
   854                           ;./lcd.h: 127:     char buffer[50];;./lcd.h: 128:     int i = 0;
   855     071E  01DC               	clrf	Lcd_Write_Int@i
   856     071F  01DD               	clrf	Lcd_Write_Int@i+1
   857     0720                     l1187:
   858                           
   859                           ;./lcd.h: 130:     char isNeg = n < 0;
   860     0720  1BD9               	btfsc	Lcd_Write_Int@n+1,7
   861     0721  2F23               	goto	u861
   862     0722  2F25               	goto	u860
   863     0723                     u861:
   864     0723  3001               	movlw	1
   865     0724  2F26               	goto	u870
   866     0725                     u860:
   867     0725  3000               	movlw	0
   868     0726                     u870:
   869     0726  00D5               	movwf	Lcd_Write_Int@isNeg
   870     0727                     l1189:
   871                           
   872                           ;./lcd.h: 132:     unsigned int n1 = isNeg ? -n : n;
   873     0727  0855               	movf	Lcd_Write_Int@isNeg,w
   874     0728  1D03               	btfss	3,2
   875     0729  2F2B               	goto	u881
   876     072A  2F2C               	goto	u880
   877     072B                     u881:
   878     072B  2F31               	goto	l1193
   879     072C                     u880:
   880     072C                     l1191:
   881     072C  0859               	movf	Lcd_Write_Int@n+1,w
   882     072D  00D7               	movwf	Lcd_Write_Int@n1+1
   883     072E  0858               	movf	Lcd_Write_Int@n,w
   884     072F  00D6               	movwf	Lcd_Write_Int@n1
   885     0730  2F6C               	goto	l1201
   886     0731                     l1193:
   887     0731  0958               	comf	Lcd_Write_Int@n,w
   888     0732  00A0               	movwf	??_Lcd_Write_Int
   889     0733  0959               	comf	Lcd_Write_Int@n+1,w
   890     0734  00A1               	movwf	??_Lcd_Write_Int+1
   891     0735  0AA0               	incf	??_Lcd_Write_Int,f
   892     0736  1903               	skipnz
   893     0737  0AA1               	incf	??_Lcd_Write_Int+1,f
   894     0738  0820               	movf	??_Lcd_Write_Int,w
   895     0739  00D6               	movwf	Lcd_Write_Int@n1
   896     073A  0821               	movf	??_Lcd_Write_Int+1,w
   897     073B  00D7               	movwf	Lcd_Write_Int@n1+1
   898     073C  2F6C               	goto	l1201
   899     073D                     l1195:
   900                           
   901                           ;./lcd.h: 135:         buffer[i++] = n1 % 10 + '0';
   902     073D  085C               	movf	Lcd_Write_Int@i,w
   903     073E  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
   904     073F  0084               	movwf	4
   905     0740  300A               	movlw	10
   906     0741  00F0               	movwf	___lwmod@divisor
   907     0742  3000               	movlw	0
   908     0743  00F1               	movwf	___lwmod@divisor+1
   909     0744  0857               	movf	Lcd_Write_Int@n1+1,w
   910     0745  00F3               	movwf	___lwmod@dividend+1
   911     0746  0856               	movf	Lcd_Write_Int@n1,w
   912     0747  00F2               	movwf	___lwmod@dividend
   913     0748  120A  118A  2496  120A  118A  	fcall	___lwmod
   914     074D  0870               	movf	?___lwmod,w
   915     074E  3E30               	addlw	48
   916     074F  1383               	bcf	3,7	;select IRP bank0
   917     0750  0080               	movwf	0
   918     0751                     l1197:
   919     0751  3001               	movlw	1
   920     0752  1283               	bcf	3,5	;RP0=0, select bank0
   921     0753  1303               	bcf	3,6	;RP1=0, select bank0
   922     0754  07DC               	addwf	Lcd_Write_Int@i,f
   923     0755  1803               	skipnc
   924     0756  0ADD               	incf	Lcd_Write_Int@i+1,f
   925     0757  3000               	movlw	0
   926     0758  07DD               	addwf	Lcd_Write_Int@i+1,f
   927     0759                     l1199:
   928                           
   929                           ;./lcd.h: 136:         n1 = n1 / 10;
   930     0759  300A               	movlw	10
   931     075A  00F0               	movwf	___lwdiv@divisor
   932     075B  3000               	movlw	0
   933     075C  00F1               	movwf	___lwdiv@divisor+1
   934     075D  0857               	movf	Lcd_Write_Int@n1+1,w
   935     075E  00F3               	movwf	___lwdiv@dividend+1
   936     075F  0856               	movf	Lcd_Write_Int@n1,w
   937     0760  00F2               	movwf	___lwdiv@dividend
   938     0761  120A  118A  2554  120A  118A  	fcall	___lwdiv
   939     0766  0871               	movf	?___lwdiv+1,w
   940     0767  1283               	bcf	3,5	;RP0=0, select bank0
   941     0768  1303               	bcf	3,6	;RP1=0, select bank0
   942     0769  00D7               	movwf	Lcd_Write_Int@n1+1
   943     076A  0870               	movf	?___lwdiv,w
   944     076B  00D6               	movwf	Lcd_Write_Int@n1
   945     076C                     l1201:
   946                           
   947                           ;./lcd.h: 134:     while (n1 != 0) {
   948     076C  0856               	movf	Lcd_Write_Int@n1,w
   949     076D  0457               	iorwf	Lcd_Write_Int@n1+1,w
   950     076E  1D03               	btfss	3,2
   951     076F  2F71               	goto	u891
   952     0770  2F72               	goto	u890
   953     0771                     u891:
   954     0771  2F3D               	goto	l1195
   955     0772                     u890:
   956     0772                     l1203:
   957                           
   958                           ;./lcd.h: 139:     if (isNeg)
   959     0772  0855               	movf	Lcd_Write_Int@isNeg,w
   960     0773  1903               	btfsc	3,2
   961     0774  2F76               	goto	u901
   962     0775  2F77               	goto	u900
   963     0776                     u901:
   964     0776  2F83               	goto	l1209
   965     0777                     u900:
   966     0777                     l1205:
   967                           
   968                           ;./lcd.h: 140:         buffer[i++] = '-';
   969     0777  085C               	movf	Lcd_Write_Int@i,w
   970     0778  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
   971     0779  0084               	movwf	4
   972     077A  302D               	movlw	45
   973     077B  1383               	bcf	3,7	;select IRP bank0
   974     077C  0080               	movwf	0
   975     077D                     l1207:
   976     077D  3001               	movlw	1
   977     077E  07DC               	addwf	Lcd_Write_Int@i,f
   978     077F  1803               	skipnc
   979     0780  0ADD               	incf	Lcd_Write_Int@i+1,f
   980     0781  3000               	movlw	0
   981     0782  07DD               	addwf	Lcd_Write_Int@i+1,f
   982     0783                     l1209:
   983                           
   984                           ;./lcd.h: 142:     buffer[i] = '\0';
   985     0783  085C               	movf	Lcd_Write_Int@i,w
   986     0784  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
   987     0785  0084               	movwf	4
   988     0786  1383               	bcf	3,7	;select IRP bank0
   989     0787  0180               	clrf	0
   990     0788                     l1211:
   991                           
   992                           ;./lcd.h: 144:     for (int t = 0; t < i / 2; t++) {
   993     0788  01DA               	clrf	Lcd_Write_Int@t
   994     0789  01DB               	clrf	Lcd_Write_Int@t+1
   995     078A  2FC7               	goto	l1217
   996     078B                     l1213:
   997                           
   998                           ;./lcd.h: 145:         buffer[t] ^= buffer[i - t - 1];
   999     078B  3023               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1000     078C  1283               	bcf	3,5	;RP0=0, select bank0
  1001     078D  1303               	bcf	3,6	;RP1=0, select bank0
  1002     078E  00A0               	movwf	??_Lcd_Write_Int
  1003     078F  085A               	movf	Lcd_Write_Int@t,w
  1004     0790  02A0               	subwf	??_Lcd_Write_Int,f
  1005     0791  085C               	movf	Lcd_Write_Int@i,w
  1006     0792  0720               	addwf	??_Lcd_Write_Int,w
  1007     0793  00A1               	movwf	??_Lcd_Write_Int+1
  1008     0794  0821               	movf	??_Lcd_Write_Int+1,w
  1009     0795  3EFF               	addlw	255
  1010     0796  0084               	movwf	4
  1011     0797  1383               	bcf	3,7	;select IRP bank0
  1012     0798  0800               	movf	0,w
  1013     0799  00A2               	movwf	??_Lcd_Write_Int+2
  1014     079A  085A               	movf	Lcd_Write_Int@t,w
  1015     079B  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1016     079C  0084               	movwf	4
  1017     079D  0822               	movf	??_Lcd_Write_Int+2,w
  1018     079E  0680               	xorwf	0,f
  1019                           
  1020                           ;./lcd.h: 146:         buffer[i - t - 1] ^= buffer[t];
  1021     079F  085A               	movf	Lcd_Write_Int@t,w
  1022     07A0  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1023     07A1  0084               	movwf	4
  1024     07A2  0800               	movf	0,w
  1025     07A3  00A0               	movwf	??_Lcd_Write_Int
  1026     07A4  3023               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1027     07A5  00A1               	movwf	??_Lcd_Write_Int+1
  1028     07A6  085A               	movf	Lcd_Write_Int@t,w
  1029     07A7  02A1               	subwf	??_Lcd_Write_Int+1,f
  1030     07A8  085C               	movf	Lcd_Write_Int@i,w
  1031     07A9  0721               	addwf	??_Lcd_Write_Int+1,w
  1032     07AA  00A2               	movwf	??_Lcd_Write_Int+2
  1033     07AB  0822               	movf	??_Lcd_Write_Int+2,w
  1034     07AC  3EFF               	addlw	255
  1035     07AD  0084               	movwf	4
  1036     07AE  0820               	movf	??_Lcd_Write_Int,w
  1037     07AF  0680               	xorwf	0,f
  1038                           
  1039                           ;./lcd.h: 147:         buffer[t] ^= buffer[i - t - 1];
  1040     07B0  3023               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1041     07B1  00A0               	movwf	??_Lcd_Write_Int
  1042     07B2  085A               	movf	Lcd_Write_Int@t,w
  1043     07B3  02A0               	subwf	??_Lcd_Write_Int,f
  1044     07B4  085C               	movf	Lcd_Write_Int@i,w
  1045     07B5  0720               	addwf	??_Lcd_Write_Int,w
  1046     07B6  00A1               	movwf	??_Lcd_Write_Int+1
  1047     07B7  0821               	movf	??_Lcd_Write_Int+1,w
  1048     07B8  3EFF               	addlw	255
  1049     07B9  0084               	movwf	4
  1050     07BA  0800               	movf	0,w
  1051     07BB  00A2               	movwf	??_Lcd_Write_Int+2
  1052     07BC  085A               	movf	Lcd_Write_Int@t,w
  1053     07BD  3E23               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1054     07BE  0084               	movwf	4
  1055     07BF  0822               	movf	??_Lcd_Write_Int+2,w
  1056     07C0  0680               	xorwf	0,f
  1057     07C1                     l1215:
  1058                           
  1059                           ;./lcd.h: 148:     }
  1060     07C1  3001               	movlw	1
  1061     07C2  07DA               	addwf	Lcd_Write_Int@t,f
  1062     07C3  1803               	skipnc
  1063     07C4  0ADB               	incf	Lcd_Write_Int@t+1,f
  1064     07C5  3000               	movlw	0
  1065     07C6  07DB               	addwf	Lcd_Write_Int@t+1,f
  1066     07C7                     l1217:
  1067     07C7  3002               	movlw	2
  1068     07C8  00F0               	movwf	___awdiv@divisor
  1069     07C9  3000               	movlw	0
  1070     07CA  00F1               	movwf	___awdiv@divisor+1
  1071     07CB  085D               	movf	Lcd_Write_Int@i+1,w
  1072     07CC  00F3               	movwf	___awdiv@dividend+1
  1073     07CD  085C               	movf	Lcd_Write_Int@i,w
  1074     07CE  00F2               	movwf	___awdiv@dividend
  1075     07CF  120A  118A  2642  120A  118A  	fcall	___awdiv
  1076     07D4  1283               	bcf	3,5	;RP0=0, select bank0
  1077     07D5  1303               	bcf	3,6	;RP1=0, select bank0
  1078     07D6  085B               	movf	Lcd_Write_Int@t+1,w
  1079     07D7  3A80               	xorlw	128
  1080     07D8  00A0               	movwf	??_Lcd_Write_Int
  1081     07D9  0871               	movf	?___awdiv+1,w
  1082     07DA  3A80               	xorlw	128
  1083     07DB  0220               	subwf	??_Lcd_Write_Int,w
  1084     07DC  1D03               	skipz
  1085     07DD  2FE0               	goto	u915
  1086     07DE  0870               	movf	?___awdiv,w
  1087     07DF  025A               	subwf	Lcd_Write_Int@t,w
  1088     07E0                     u915:
  1089     07E0  1C03               	skipc
  1090     07E1  2FE3               	goto	u911
  1091     07E2  2FE4               	goto	u910
  1092     07E3                     u911:
  1093     07E3  2F8B               	goto	l1213
  1094     07E4                     u910:
  1095     07E4                     l1219:
  1096                           
  1097                           ;./lcd.h: 150:     if (n == 0) {
  1098     07E4  1283               	bcf	3,5	;RP0=0, select bank0
  1099     07E5  1303               	bcf	3,6	;RP1=0, select bank0
  1100     07E6  0858               	movf	Lcd_Write_Int@n,w
  1101     07E7  0459               	iorwf	Lcd_Write_Int@n+1,w
  1102     07E8  1D03               	btfss	3,2
  1103     07E9  2FEB               	goto	u921
  1104     07EA  2FEC               	goto	u920
  1105     07EB                     u921:
  1106     07EB  2FEF               	goto	l1225
  1107     07EC                     u920:
  1108     07EC                     l1221:
  1109                           
  1110                           ;./lcd.h: 151:         buffer[0] = '0';
  1111     07EC  3030               	movlw	48
  1112     07ED  00A3               	movwf	Lcd_Write_Int@buffer
  1113     07EE                     l1223:
  1114                           
  1115                           ;./lcd.h: 152:         buffer[1] = '\0';
  1116     07EE  01A4               	clrf	Lcd_Write_Int@buffer+1
  1117     07EF                     l1225:
  1118                           
  1119                           ;./lcd.h: 155:     Lcd_Write_String(buffer);
  1120     07EF  3023               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  1121     07F0  00F5               	movwf	Lcd_Write_String@a
  1122     07F1  3000               	movlw	0
  1123     07F2  00F6               	movwf	Lcd_Write_String@a+1
  1124     07F3  120A  118A  24D0  120A  118A  	fcall	_Lcd_Write_String
  1125     07F8                     l72:
  1126     07F8  0008               	return
  1127     07F9                     __end_of_Lcd_Write_Int:
  1128                           
  1129                           	psect	text3
  1130     0496                     __ptext3:	
  1131 ;; *************** function ___lwmod *****************
  1132 ;; Defined at:
  1133 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;  divisor         2    0[COMMON] unsigned int 
  1136 ;;  dividend        2    2[COMMON] unsigned int 
  1137 ;; Auto vars:     Size  Location     Type
  1138 ;;  counter         1    5[COMMON] unsigned char 
  1139 ;; Return value:  Size  Location     Type
  1140 ;;                  2    0[COMMON] unsigned int 
  1141 ;; Registers used:
  1142 ;;		wreg, status,2, status,0
  1143 ;; Tracked objects:
  1144 ;;		On entry : 0/0
  1145 ;;		On exit  : 0/0
  1146 ;;		Unchanged: 0/0
  1147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1148 ;;      Params:         4       0       0       0       0
  1149 ;;      Locals:         1       0       0       0       0
  1150 ;;      Temps:          1       0       0       0       0
  1151 ;;      Totals:         6       0       0       0       0
  1152 ;;Total ram usage:        6 bytes
  1153 ;; Hardware stack levels used: 1
  1154 ;; This function calls:
  1155 ;;		Nothing
  1156 ;; This function is called by:
  1157 ;;		_Lcd_Write_Int
  1158 ;; This function uses a non-reentrant model
  1159 ;;
  1160                           
  1161     0496                     ___lwmod:	
  1162                           ;psect for function ___lwmod
  1163                           
  1164     0496                     l1107:	
  1165                           ;incstack = 0
  1166                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1167                           
  1168     0496  0870               	movf	___lwmod@divisor,w
  1169     0497  0471               	iorwf	___lwmod@divisor+1,w
  1170     0498  1903               	btfsc	3,2
  1171     0499  2C9B               	goto	u761
  1172     049A  2C9C               	goto	u760
  1173     049B                     u761:
  1174     049B  2CCB               	goto	l1125
  1175     049C                     u760:
  1176     049C                     l1109:
  1177     049C  01F5               	clrf	___lwmod@counter
  1178     049D  0AF5               	incf	___lwmod@counter,f
  1179     049E  2CAA               	goto	l1115
  1180     049F                     l1111:
  1181     049F  3001               	movlw	1
  1182     04A0                     u775:
  1183     04A0  1003               	clrc
  1184     04A1  0DF0               	rlf	___lwmod@divisor,f
  1185     04A2  0DF1               	rlf	___lwmod@divisor+1,f
  1186     04A3  3EFF               	addlw	-1
  1187     04A4  1D03               	skipz
  1188     04A5  2CA0               	goto	u775
  1189     04A6                     l1113:
  1190     04A6  3001               	movlw	1
  1191     04A7  00F4               	movwf	??___lwmod
  1192     04A8  0874               	movf	??___lwmod,w
  1193     04A9  07F5               	addwf	___lwmod@counter,f
  1194     04AA                     l1115:
  1195     04AA  1FF1               	btfss	___lwmod@divisor+1,7
  1196     04AB  2CAD               	goto	u781
  1197     04AC  2CAE               	goto	u780
  1198     04AD                     u781:
  1199     04AD  2C9F               	goto	l1111
  1200     04AE                     u780:
  1201     04AE                     l1117:
  1202     04AE  0871               	movf	___lwmod@divisor+1,w
  1203     04AF  0273               	subwf	___lwmod@dividend+1,w
  1204     04B0  1D03               	skipz
  1205     04B1  2CB4               	goto	u795
  1206     04B2  0870               	movf	___lwmod@divisor,w
  1207     04B3  0272               	subwf	___lwmod@dividend,w
  1208     04B4                     u795:
  1209     04B4  1C03               	skipc
  1210     04B5  2CB7               	goto	u791
  1211     04B6  2CB8               	goto	u790
  1212     04B7                     u791:
  1213     04B7  2CBE               	goto	l1121
  1214     04B8                     u790:
  1215     04B8                     l1119:
  1216     04B8  0870               	movf	___lwmod@divisor,w
  1217     04B9  02F2               	subwf	___lwmod@dividend,f
  1218     04BA  0871               	movf	___lwmod@divisor+1,w
  1219     04BB  1C03               	skipc
  1220     04BC  03F3               	decf	___lwmod@dividend+1,f
  1221     04BD  02F3               	subwf	___lwmod@dividend+1,f
  1222     04BE                     l1121:
  1223     04BE  3001               	movlw	1
  1224     04BF                     u805:
  1225     04BF  1003               	clrc
  1226     04C0  0CF1               	rrf	___lwmod@divisor+1,f
  1227     04C1  0CF0               	rrf	___lwmod@divisor,f
  1228     04C2  3EFF               	addlw	-1
  1229     04C3  1D03               	skipz
  1230     04C4  2CBF               	goto	u805
  1231     04C5                     l1123:
  1232     04C5  3001               	movlw	1
  1233     04C6  02F5               	subwf	___lwmod@counter,f
  1234     04C7  1D03               	btfss	3,2
  1235     04C8  2CCA               	goto	u811
  1236     04C9  2CCB               	goto	u810
  1237     04CA                     u811:
  1238     04CA  2CAE               	goto	l1117
  1239     04CB                     u810:
  1240     04CB                     l1125:
  1241     04CB  0873               	movf	___lwmod@dividend+1,w
  1242     04CC  00F1               	movwf	?___lwmod+1
  1243     04CD  0872               	movf	___lwmod@dividend,w
  1244     04CE  00F0               	movwf	?___lwmod
  1245     04CF                     l461:
  1246     04CF  0008               	return
  1247     04D0                     __end_of___lwmod:
  1248                           
  1249                           	psect	text4
  1250     0554                     __ptext4:	
  1251 ;; *************** function ___lwdiv *****************
  1252 ;; Defined at:
  1253 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1254 ;; Parameters:    Size  Location     Type
  1255 ;;  divisor         2    0[COMMON] unsigned int 
  1256 ;;  dividend        2    2[COMMON] unsigned int 
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;  quotient        2    5[COMMON] unsigned int 
  1259 ;;  counter         1    7[COMMON] unsigned char 
  1260 ;; Return value:  Size  Location     Type
  1261 ;;                  2    0[COMMON] unsigned int 
  1262 ;; Registers used:
  1263 ;;		wreg, status,2, status,0
  1264 ;; Tracked objects:
  1265 ;;		On entry : 0/0
  1266 ;;		On exit  : 0/0
  1267 ;;		Unchanged: 0/0
  1268 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1269 ;;      Params:         4       0       0       0       0
  1270 ;;      Locals:         3       0       0       0       0
  1271 ;;      Temps:          1       0       0       0       0
  1272 ;;      Totals:         8       0       0       0       0
  1273 ;;Total ram usage:        8 bytes
  1274 ;; Hardware stack levels used: 1
  1275 ;; This function calls:
  1276 ;;		Nothing
  1277 ;; This function is called by:
  1278 ;;		_Lcd_Write_Int
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281                           
  1282     0554                     ___lwdiv:	
  1283                           ;psect for function ___lwdiv
  1284                           
  1285     0554                     l1081:	
  1286                           ;incstack = 0
  1287                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1288                           
  1289     0554  01F5               	clrf	___lwdiv@quotient
  1290     0555  01F6               	clrf	___lwdiv@quotient+1
  1291     0556                     l1083:
  1292     0556  0870               	movf	___lwdiv@divisor,w
  1293     0557  0471               	iorwf	___lwdiv@divisor+1,w
  1294     0558  1903               	btfsc	3,2
  1295     0559  2D5B               	goto	u691
  1296     055A  2D5C               	goto	u690
  1297     055B                     u691:
  1298     055B  2D93               	goto	l1103
  1299     055C                     u690:
  1300     055C                     l1085:
  1301     055C  01F7               	clrf	___lwdiv@counter
  1302     055D  0AF7               	incf	___lwdiv@counter,f
  1303     055E  2D6A               	goto	l1091
  1304     055F                     l1087:
  1305     055F  3001               	movlw	1
  1306     0560                     u705:
  1307     0560  1003               	clrc
  1308     0561  0DF0               	rlf	___lwdiv@divisor,f
  1309     0562  0DF1               	rlf	___lwdiv@divisor+1,f
  1310     0563  3EFF               	addlw	-1
  1311     0564  1D03               	skipz
  1312     0565  2D60               	goto	u705
  1313     0566                     l1089:
  1314     0566  3001               	movlw	1
  1315     0567  00F4               	movwf	??___lwdiv
  1316     0568  0874               	movf	??___lwdiv,w
  1317     0569  07F7               	addwf	___lwdiv@counter,f
  1318     056A                     l1091:
  1319     056A  1FF1               	btfss	___lwdiv@divisor+1,7
  1320     056B  2D6D               	goto	u711
  1321     056C  2D6E               	goto	u710
  1322     056D                     u711:
  1323     056D  2D5F               	goto	l1087
  1324     056E                     u710:
  1325     056E                     l1093:
  1326     056E  3001               	movlw	1
  1327     056F                     u725:
  1328     056F  1003               	clrc
  1329     0570  0DF5               	rlf	___lwdiv@quotient,f
  1330     0571  0DF6               	rlf	___lwdiv@quotient+1,f
  1331     0572  3EFF               	addlw	-1
  1332     0573  1D03               	skipz
  1333     0574  2D6F               	goto	u725
  1334     0575  0871               	movf	___lwdiv@divisor+1,w
  1335     0576  0273               	subwf	___lwdiv@dividend+1,w
  1336     0577  1D03               	skipz
  1337     0578  2D7B               	goto	u735
  1338     0579  0870               	movf	___lwdiv@divisor,w
  1339     057A  0272               	subwf	___lwdiv@dividend,w
  1340     057B                     u735:
  1341     057B  1C03               	skipc
  1342     057C  2D7E               	goto	u731
  1343     057D  2D7F               	goto	u730
  1344     057E                     u731:
  1345     057E  2D86               	goto	l1099
  1346     057F                     u730:
  1347     057F                     l1095:
  1348     057F  0870               	movf	___lwdiv@divisor,w
  1349     0580  02F2               	subwf	___lwdiv@dividend,f
  1350     0581  0871               	movf	___lwdiv@divisor+1,w
  1351     0582  1C03               	skipc
  1352     0583  03F3               	decf	___lwdiv@dividend+1,f
  1353     0584  02F3               	subwf	___lwdiv@dividend+1,f
  1354     0585                     l1097:
  1355     0585  1475               	bsf	___lwdiv@quotient,0
  1356     0586                     l1099:
  1357     0586  3001               	movlw	1
  1358     0587                     u745:
  1359     0587  1003               	clrc
  1360     0588  0CF1               	rrf	___lwdiv@divisor+1,f
  1361     0589  0CF0               	rrf	___lwdiv@divisor,f
  1362     058A  3EFF               	addlw	-1
  1363     058B  1D03               	skipz
  1364     058C  2D87               	goto	u745
  1365     058D                     l1101:
  1366     058D  3001               	movlw	1
  1367     058E  02F7               	subwf	___lwdiv@counter,f
  1368     058F  1D03               	btfss	3,2
  1369     0590  2D92               	goto	u751
  1370     0591  2D93               	goto	u750
  1371     0592                     u751:
  1372     0592  2D6E               	goto	l1093
  1373     0593                     u750:
  1374     0593                     l1103:
  1375     0593  0876               	movf	___lwdiv@quotient+1,w
  1376     0594  00F1               	movwf	?___lwdiv+1
  1377     0595  0875               	movf	___lwdiv@quotient,w
  1378     0596  00F0               	movwf	?___lwdiv
  1379     0597                     l451:
  1380     0597  0008               	return
  1381     0598                     __end_of___lwdiv:
  1382                           
  1383                           	psect	text5
  1384     0642                     __ptext5:	
  1385 ;; *************** function ___awdiv *****************
  1386 ;; Defined at:
  1387 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  divisor         2    0[COMMON] int 
  1390 ;;  dividend        2    2[COMMON] int 
  1391 ;; Auto vars:     Size  Location     Type
  1392 ;;  quotient        2    7[COMMON] int 
  1393 ;;  sign            1    6[COMMON] unsigned char 
  1394 ;;  counter         1    5[COMMON] unsigned char 
  1395 ;; Return value:  Size  Location     Type
  1396 ;;                  2    0[COMMON] int 
  1397 ;; Registers used:
  1398 ;;		wreg, status,2, status,0
  1399 ;; Tracked objects:
  1400 ;;		On entry : 0/0
  1401 ;;		On exit  : 0/0
  1402 ;;		Unchanged: 0/0
  1403 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1404 ;;      Params:         4       0       0       0       0
  1405 ;;      Locals:         4       0       0       0       0
  1406 ;;      Temps:          1       0       0       0       0
  1407 ;;      Totals:         9       0       0       0       0
  1408 ;;Total ram usage:        9 bytes
  1409 ;; Hardware stack levels used: 1
  1410 ;; This function calls:
  1411 ;;		Nothing
  1412 ;; This function is called by:
  1413 ;;		_Lcd_Write_Int
  1414 ;; This function uses a non-reentrant model
  1415 ;;
  1416                           
  1417     0642                     ___awdiv:	
  1418                           ;psect for function ___awdiv
  1419                           
  1420     0642                     l1037:	
  1421                           ;incstack = 0
  1422                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  1423                           
  1424     0642  01F6               	clrf	___awdiv@sign
  1425     0643                     l1039:
  1426     0643  1FF1               	btfss	___awdiv@divisor+1,7
  1427     0644  2E46               	goto	u591
  1428     0645  2E47               	goto	u590
  1429     0646                     u591:
  1430     0646  2E4E               	goto	l1045
  1431     0647                     u590:
  1432     0647                     l1041:
  1433     0647  09F0               	comf	___awdiv@divisor,f
  1434     0648  09F1               	comf	___awdiv@divisor+1,f
  1435     0649  0AF0               	incf	___awdiv@divisor,f
  1436     064A  1903               	skipnz
  1437     064B  0AF1               	incf	___awdiv@divisor+1,f
  1438     064C                     l1043:
  1439     064C  01F6               	clrf	___awdiv@sign
  1440     064D  0AF6               	incf	___awdiv@sign,f
  1441     064E                     l1045:
  1442     064E  1FF3               	btfss	___awdiv@dividend+1,7
  1443     064F  2E51               	goto	u601
  1444     0650  2E52               	goto	u600
  1445     0651                     u601:
  1446     0651  2E5B               	goto	l1051
  1447     0652                     u600:
  1448     0652                     l1047:
  1449     0652  09F2               	comf	___awdiv@dividend,f
  1450     0653  09F3               	comf	___awdiv@dividend+1,f
  1451     0654  0AF2               	incf	___awdiv@dividend,f
  1452     0655  1903               	skipnz
  1453     0656  0AF3               	incf	___awdiv@dividend+1,f
  1454     0657                     l1049:
  1455     0657  3001               	movlw	1
  1456     0658  00F4               	movwf	??___awdiv
  1457     0659  0874               	movf	??___awdiv,w
  1458     065A  06F6               	xorwf	___awdiv@sign,f
  1459     065B                     l1051:
  1460     065B  01F7               	clrf	___awdiv@quotient
  1461     065C  01F8               	clrf	___awdiv@quotient+1
  1462     065D                     l1053:
  1463     065D  0870               	movf	___awdiv@divisor,w
  1464     065E  0471               	iorwf	___awdiv@divisor+1,w
  1465     065F  1903               	btfsc	3,2
  1466     0660  2E62               	goto	u611
  1467     0661  2E63               	goto	u610
  1468     0662                     u611:
  1469     0662  2E9A               	goto	l1073
  1470     0663                     u610:
  1471     0663                     l1055:
  1472     0663  01F5               	clrf	___awdiv@counter
  1473     0664  0AF5               	incf	___awdiv@counter,f
  1474     0665  2E71               	goto	l1061
  1475     0666                     l1057:
  1476     0666  3001               	movlw	1
  1477     0667                     u625:
  1478     0667  1003               	clrc
  1479     0668  0DF0               	rlf	___awdiv@divisor,f
  1480     0669  0DF1               	rlf	___awdiv@divisor+1,f
  1481     066A  3EFF               	addlw	-1
  1482     066B  1D03               	skipz
  1483     066C  2E67               	goto	u625
  1484     066D                     l1059:
  1485     066D  3001               	movlw	1
  1486     066E  00F4               	movwf	??___awdiv
  1487     066F  0874               	movf	??___awdiv,w
  1488     0670  07F5               	addwf	___awdiv@counter,f
  1489     0671                     l1061:
  1490     0671  1FF1               	btfss	___awdiv@divisor+1,7
  1491     0672  2E74               	goto	u631
  1492     0673  2E75               	goto	u630
  1493     0674                     u631:
  1494     0674  2E66               	goto	l1057
  1495     0675                     u630:
  1496     0675                     l1063:
  1497     0675  3001               	movlw	1
  1498     0676                     u645:
  1499     0676  1003               	clrc
  1500     0677  0DF7               	rlf	___awdiv@quotient,f
  1501     0678  0DF8               	rlf	___awdiv@quotient+1,f
  1502     0679  3EFF               	addlw	-1
  1503     067A  1D03               	skipz
  1504     067B  2E76               	goto	u645
  1505     067C  0871               	movf	___awdiv@divisor+1,w
  1506     067D  0273               	subwf	___awdiv@dividend+1,w
  1507     067E  1D03               	skipz
  1508     067F  2E82               	goto	u655
  1509     0680  0870               	movf	___awdiv@divisor,w
  1510     0681  0272               	subwf	___awdiv@dividend,w
  1511     0682                     u655:
  1512     0682  1C03               	skipc
  1513     0683  2E85               	goto	u651
  1514     0684  2E86               	goto	u650
  1515     0685                     u651:
  1516     0685  2E8D               	goto	l1069
  1517     0686                     u650:
  1518     0686                     l1065:
  1519     0686  0870               	movf	___awdiv@divisor,w
  1520     0687  02F2               	subwf	___awdiv@dividend,f
  1521     0688  0871               	movf	___awdiv@divisor+1,w
  1522     0689  1C03               	skipc
  1523     068A  03F3               	decf	___awdiv@dividend+1,f
  1524     068B  02F3               	subwf	___awdiv@dividend+1,f
  1525     068C                     l1067:
  1526     068C  1477               	bsf	___awdiv@quotient,0
  1527     068D                     l1069:
  1528     068D  3001               	movlw	1
  1529     068E                     u665:
  1530     068E  1003               	clrc
  1531     068F  0CF1               	rrf	___awdiv@divisor+1,f
  1532     0690  0CF0               	rrf	___awdiv@divisor,f
  1533     0691  3EFF               	addlw	-1
  1534     0692  1D03               	skipz
  1535     0693  2E8E               	goto	u665
  1536     0694                     l1071:
  1537     0694  3001               	movlw	1
  1538     0695  02F5               	subwf	___awdiv@counter,f
  1539     0696  1D03               	btfss	3,2
  1540     0697  2E99               	goto	u671
  1541     0698  2E9A               	goto	u670
  1542     0699                     u671:
  1543     0699  2E75               	goto	l1063
  1544     069A                     u670:
  1545     069A                     l1073:
  1546     069A  0876               	movf	___awdiv@sign,w
  1547     069B  1903               	btfsc	3,2
  1548     069C  2E9E               	goto	u681
  1549     069D  2E9F               	goto	u680
  1550     069E                     u681:
  1551     069E  2EA4               	goto	l1077
  1552     069F                     u680:
  1553     069F                     l1075:
  1554     069F  09F7               	comf	___awdiv@quotient,f
  1555     06A0  09F8               	comf	___awdiv@quotient+1,f
  1556     06A1  0AF7               	incf	___awdiv@quotient,f
  1557     06A2  1903               	skipnz
  1558     06A3  0AF8               	incf	___awdiv@quotient+1,f
  1559     06A4                     l1077:
  1560     06A4  0878               	movf	___awdiv@quotient+1,w
  1561     06A5  00F1               	movwf	?___awdiv+1
  1562     06A6  0877               	movf	___awdiv@quotient,w
  1563     06A7  00F0               	movwf	?___awdiv
  1564     06A8                     l332:
  1565     06A8  0008               	return
  1566     06A9                     __end_of___awdiv:
  1567                           
  1568                           	psect	text6
  1569     04D0                     __ptext6:	
  1570 ;; *************** function _Lcd_Write_String *****************
  1571 ;; Defined at:
  1572 ;;		line 108 in file "./lcd.h"
  1573 ;; Parameters:    Size  Location     Type
  1574 ;;  a               2    5[COMMON] PTR unsigned char 
  1575 ;;		 -> STR_1(10), Lcd_Write_Int@buffer(50), 
  1576 ;; Auto vars:     Size  Location     Type
  1577 ;;  i               2   10[COMMON] int 
  1578 ;; Return value:  Size  Location     Type
  1579 ;;                  1    wreg      void 
  1580 ;; Registers used:
  1581 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1582 ;; Tracked objects:
  1583 ;;		On entry : 0/0
  1584 ;;		On exit  : 0/0
  1585 ;;		Unchanged: 0/0
  1586 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1587 ;;      Params:         2       0       0       0       0
  1588 ;;      Locals:         2       0       0       0       0
  1589 ;;      Temps:          3       0       0       0       0
  1590 ;;      Totals:         7       0       0       0       0
  1591 ;;Total ram usage:        7 bytes
  1592 ;; Hardware stack levels used: 1
  1593 ;; Hardware stack levels required when called: 2
  1594 ;; This function calls:
  1595 ;;		_Lcd_Write_Char
  1596 ;; This function is called by:
  1597 ;;		_Lcd_Write_Int
  1598 ;;		_main
  1599 ;; This function uses a non-reentrant model
  1600 ;;
  1601                           
  1602     04D0                     _Lcd_Write_String:	
  1603                           ;psect for function _Lcd_Write_String
  1604                           
  1605     04D0                     l1029:	
  1606                           ;incstack = 0
  1607                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1608                           
  1609                           
  1610                           ;./lcd.h: 109:     int i;;./lcd.h: 110:     for (i = 0; a[i] != '\0'; i++)
  1611     04D0  01FA               	clrf	Lcd_Write_String@i
  1612     04D1  01FB               	clrf	Lcd_Write_String@i+1
  1613     04D2  2CF5               	goto	l1035
  1614     04D3                     l1031:
  1615                           
  1616                           ;./lcd.h: 111:         Lcd_Write_Char(a[i]);
  1617     04D3  087A               	movf	Lcd_Write_String@i,w
  1618     04D4  0775               	addwf	Lcd_Write_String@a,w
  1619     04D5  00F8               	movwf	??_Lcd_Write_String+1
  1620     04D6  0876               	movf	Lcd_Write_String@a+1,w
  1621     04D7  00F7               	movwf	??_Lcd_Write_String
  1622     04D8  1803               	skipnc
  1623     04D9  0AF7               	incf	??_Lcd_Write_String,f
  1624     04DA  1FFA               	btfss	Lcd_Write_String@i,7
  1625     04DB  2CDD               	goto	u560
  1626     04DC  03F7               	decf	??_Lcd_Write_String,f
  1627     04DD                     u560:
  1628     04DD  0877               	movf	??_Lcd_Write_String,w
  1629     04DE  00F9               	movwf	??_Lcd_Write_String+2
  1630     04DF  0879               	movf	??_Lcd_Write_String+2,w
  1631     04E0  1283               	bcf	3,5	;RP0=0, select bank0
  1632     04E1  1303               	bcf	3,6	;RP1=0, select bank0
  1633     04E2  00FF               	movwf	btemp+1
  1634     04E3  0878               	movf	??_Lcd_Write_String+1,w
  1635     04E4  0084               	movwf	4
  1636     04E5  120A  118A  2003  120A  118A  	fcall	stringtab
  1637     04EA  120A  118A  2461  120A  118A  	fcall	_Lcd_Write_Char
  1638     04EF                     l1033:
  1639     04EF  3001               	movlw	1
  1640     04F0  07FA               	addwf	Lcd_Write_String@i,f
  1641     04F1  1803               	skipnc
  1642     04F2  0AFB               	incf	Lcd_Write_String@i+1,f
  1643     04F3  3000               	movlw	0
  1644     04F4  07FB               	addwf	Lcd_Write_String@i+1,f
  1645     04F5                     l1035:
  1646     04F5  087A               	movf	Lcd_Write_String@i,w
  1647     04F6  0775               	addwf	Lcd_Write_String@a,w
  1648     04F7  00F8               	movwf	??_Lcd_Write_String+1
  1649     04F8  0876               	movf	Lcd_Write_String@a+1,w
  1650     04F9  00F7               	movwf	??_Lcd_Write_String
  1651     04FA  1803               	skipnc
  1652     04FB  0AF7               	incf	??_Lcd_Write_String,f
  1653     04FC  1FFA               	btfss	Lcd_Write_String@i,7
  1654     04FD  2CFF               	goto	u570
  1655     04FE  03F7               	decf	??_Lcd_Write_String,f
  1656     04FF                     u570:
  1657     04FF  0877               	movf	??_Lcd_Write_String,w
  1658     0500  00F9               	movwf	??_Lcd_Write_String+2
  1659     0501  0879               	movf	??_Lcd_Write_String+2,w
  1660     0502  1283               	bcf	3,5	;RP0=0, select bank0
  1661     0503  1303               	bcf	3,6	;RP1=0, select bank0
  1662     0504  00FF               	movwf	btemp+1
  1663     0505  0878               	movf	??_Lcd_Write_String+1,w
  1664     0506  0084               	movwf	4
  1665     0507  120A  118A  2003  120A  118A  	fcall	stringtab
  1666     050C  3A00               	xorlw	0
  1667     050D  1D03               	skipz
  1668     050E  2D10               	goto	u581
  1669     050F  2D11               	goto	u580
  1670     0510                     u581:
  1671     0510  2CD3               	goto	l1031
  1672     0511                     u580:
  1673     0511                     l51:
  1674     0511  0008               	return
  1675     0512                     __end_of_Lcd_Write_String:
  1676                           
  1677                           	psect	text7
  1678     0461                     __ptext7:	
  1679 ;; *************** function _Lcd_Write_Char *****************
  1680 ;; Defined at:
  1681 ;;		line 91 in file "./lcd.h"
  1682 ;; Parameters:    Size  Location     Type
  1683 ;;  a               1    wreg     unsigned char 
  1684 ;; Auto vars:     Size  Location     Type
  1685 ;;  a               1    4[COMMON] unsigned char 
  1686 ;;  y               1    3[COMMON] unsigned char 
  1687 ;;  temp            1    2[COMMON] unsigned char 
  1688 ;; Return value:  Size  Location     Type
  1689 ;;                  1    wreg      void 
  1690 ;; Registers used:
  1691 ;;		wreg, status,2, status,0, pclath, cstack
  1692 ;; Tracked objects:
  1693 ;;		On entry : 0/0
  1694 ;;		On exit  : 0/0
  1695 ;;		Unchanged: 0/0
  1696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1697 ;;      Params:         0       0       0       0       0
  1698 ;;      Locals:         3       0       0       0       0
  1699 ;;      Temps:          1       0       0       0       0
  1700 ;;      Totals:         4       0       0       0       0
  1701 ;;Total ram usage:        4 bytes
  1702 ;; Hardware stack levels used: 1
  1703 ;; Hardware stack levels required when called: 1
  1704 ;; This function calls:
  1705 ;;		_Lcd_Port
  1706 ;; This function is called by:
  1707 ;;		_Lcd_Write_String
  1708 ;; This function uses a non-reentrant model
  1709 ;;
  1710                           
  1711     0461                     _Lcd_Write_Char:	
  1712                           ;psect for function _Lcd_Write_Char
  1713                           
  1714                           
  1715                           ;incstack = 0
  1716                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  1717                           ;Lcd_Write_Char@a stored from wreg
  1718     0461  00F4               	movwf	Lcd_Write_Char@a
  1719     0462                     l995:
  1720                           
  1721                           ;./lcd.h: 92:     char temp, y;;./lcd.h: 93:     temp = a & 0x0F;
  1722     0462  0874               	movf	Lcd_Write_Char@a,w
  1723     0463  390F               	andlw	15
  1724     0464  00F2               	movwf	Lcd_Write_Char@temp
  1725                           
  1726                           ;./lcd.h: 94:     y = a & 0xF0;
  1727     0465  0874               	movf	Lcd_Write_Char@a,w
  1728     0466  39F0               	andlw	240
  1729     0467  00F3               	movwf	Lcd_Write_Char@y
  1730     0468                     l997:
  1731                           
  1732                           ;./lcd.h: 96:     PORTEbits.RE2 = 1;
  1733     0468  1283               	bcf	3,5	;RP0=0, select bank0
  1734     0469  1303               	bcf	3,6	;RP1=0, select bank0
  1735     046A  1509               	bsf	9,2	;volatile
  1736     046B                     l999:
  1737                           
  1738                           ;./lcd.h: 98:     Lcd_Port(y >> 4);
  1739     046B  0873               	movf	Lcd_Write_Char@y,w
  1740     046C  00F1               	movwf	??_Lcd_Write_Char
  1741     046D  3004               	movlw	4
  1742     046E                     u555:
  1743     046E  1003               	clrc
  1744     046F  0CF1               	rrf	??_Lcd_Write_Char,f
  1745     0470  3EFF               	addlw	-1
  1746     0471  1D03               	skipz
  1747     0472  2C6E               	goto	u555
  1748     0473  0871               	movf	??_Lcd_Write_Char,w
  1749     0474  120A  118A  243F  120A  118A  	fcall	_Lcd_Port
  1750     0479                     l1001:
  1751                           
  1752                           ;./lcd.h: 99:     PORTEbits.RE1 = 1;
  1753     0479  1283               	bcf	3,5	;RP0=0, select bank0
  1754     047A  1303               	bcf	3,6	;RP1=0, select bank0
  1755     047B  1489               	bsf	9,1	;volatile
  1756     047C                     l1003:
  1757                           
  1758                           ;./lcd.h: 100:     _delay((unsigned long)((4)*(20*1000000/4000000.0)));
  1759     047C  3006               	movlw	6
  1760     047D  00F1               	movwf	??_Lcd_Write_Char
  1761     047E                     u1027:
  1762     047E  0BF1               	decfsz	??_Lcd_Write_Char,f
  1763     047F  2C7E               	goto	u1027
  1764     0480  0000               	nop
  1765     0481                     l1005:
  1766                           
  1767                           ;./lcd.h: 101:     PORTEbits.RE1 = 0;
  1768     0481  1283               	bcf	3,5	;RP0=0, select bank0
  1769     0482  1303               	bcf	3,6	;RP1=0, select bank0
  1770     0483  1089               	bcf	9,1	;volatile
  1771     0484                     l1007:
  1772                           
  1773                           ;./lcd.h: 102:     Lcd_Port(temp);
  1774     0484  0872               	movf	Lcd_Write_Char@temp,w
  1775     0485  120A  118A  243F  120A  118A  	fcall	_Lcd_Port
  1776     048A                     l1009:
  1777                           
  1778                           ;./lcd.h: 103:     PORTEbits.RE1 = 1;
  1779     048A  1283               	bcf	3,5	;RP0=0, select bank0
  1780     048B  1303               	bcf	3,6	;RP1=0, select bank0
  1781     048C  1489               	bsf	9,1	;volatile
  1782     048D                     l1011:
  1783                           
  1784                           ;./lcd.h: 104:     _delay((unsigned long)((4)*(20*1000000/4000000.0)));
  1785     048D  3006               	movlw	6
  1786     048E  00F1               	movwf	??_Lcd_Write_Char
  1787     048F                     u1037:
  1788     048F  0BF1               	decfsz	??_Lcd_Write_Char,f
  1789     0490  2C8F               	goto	u1037
  1790     0491  0000               	nop
  1791     0492                     l1013:
  1792                           
  1793                           ;./lcd.h: 105:     PORTEbits.RE1 = 0;
  1794     0492  1283               	bcf	3,5	;RP0=0, select bank0
  1795     0493  1303               	bcf	3,6	;RP1=0, select bank0
  1796     0494  1089               	bcf	9,1	;volatile
  1797     0495                     l45:
  1798     0495  0008               	return
  1799     0496                     __end_of_Lcd_Write_Char:
  1800                           
  1801                           	psect	text8
  1802     0598                     __ptext8:	
  1803 ;; *************** function _Lcd_Set_Cursor *****************
  1804 ;; Defined at:
  1805 ;;		line 73 in file "./lcd.h"
  1806 ;; Parameters:    Size  Location     Type
  1807 ;;  a               1    wreg     unsigned char 
  1808 ;;  b               1    4[COMMON] unsigned char 
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;  a               1    6[COMMON] unsigned char 
  1811 ;;  temp            1    9[COMMON] unsigned char 
  1812 ;;  y               1    8[COMMON] unsigned char 
  1813 ;;  z               1    7[COMMON] unsigned char 
  1814 ;; Return value:  Size  Location     Type
  1815 ;;                  1    wreg      void 
  1816 ;; Registers used:
  1817 ;;		wreg, status,2, status,0, pclath, cstack
  1818 ;; Tracked objects:
  1819 ;;		On entry : 0/0
  1820 ;;		On exit  : 0/0
  1821 ;;		Unchanged: 0/0
  1822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1823 ;;      Params:         1       0       0       0       0
  1824 ;;      Locals:         4       0       0       0       0
  1825 ;;      Temps:          1       0       0       0       0
  1826 ;;      Totals:         6       0       0       0       0
  1827 ;;Total ram usage:        6 bytes
  1828 ;; Hardware stack levels used: 1
  1829 ;; Hardware stack levels required when called: 2
  1830 ;; This function calls:
  1831 ;;		_Lcd_Cmd
  1832 ;; This function is called by:
  1833 ;;		_main
  1834 ;; This function uses a non-reentrant model
  1835 ;;
  1836                           
  1837     0598                     _Lcd_Set_Cursor:	
  1838                           ;psect for function _Lcd_Set_Cursor
  1839                           
  1840                           
  1841                           ;incstack = 0
  1842                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  1843                           ;Lcd_Set_Cursor@a stored from wreg
  1844     0598  00F6               	movwf	Lcd_Set_Cursor@a
  1845     0599                     l1163:
  1846                           
  1847                           ;./lcd.h: 73: void Lcd_Set_Cursor(char a, char b);./lcd.h: 74: {;./lcd.h: 75:     char t
      +                          emp, z, y;;./lcd.h: 76:     if (a == 0) {
  1848     0599  0876               	movf	Lcd_Set_Cursor@a,w
  1849     059A  1D03               	btfss	3,2
  1850     059B  2D9D               	goto	u821
  1851     059C  2D9E               	goto	u820
  1852     059D                     u821:
  1853     059D  2DBB               	goto	l1173
  1854     059E                     u820:
  1855     059E                     l1165:
  1856                           
  1857                           ;./lcd.h: 77:         temp = 0x80 + b;
  1858     059E  0874               	movf	Lcd_Set_Cursor@b,w
  1859     059F  3E80               	addlw	128
  1860     05A0  00F9               	movwf	Lcd_Set_Cursor@temp
  1861                           
  1862                           ;./lcd.h: 78:         z = temp >> 4;
  1863     05A1  0879               	movf	Lcd_Set_Cursor@temp,w
  1864     05A2  00F5               	movwf	??_Lcd_Set_Cursor
  1865     05A3  3004               	movlw	4
  1866     05A4                     u835:
  1867     05A4  1003               	clrc
  1868     05A5  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1869     05A6  3EFF               	addlw	-1
  1870     05A7  1D03               	skipz
  1871     05A8  2DA4               	goto	u835
  1872     05A9  0875               	movf	??_Lcd_Set_Cursor,w
  1873     05AA  00F7               	movwf	Lcd_Set_Cursor@z
  1874     05AB                     l1167:
  1875                           
  1876                           ;./lcd.h: 79:         y = temp & 0x0F;
  1877     05AB  0879               	movf	Lcd_Set_Cursor@temp,w
  1878     05AC  390F               	andlw	15
  1879     05AD  00F8               	movwf	Lcd_Set_Cursor@y
  1880     05AE                     l1169:
  1881                           
  1882                           ;./lcd.h: 80:         Lcd_Cmd(z);
  1883     05AE  0877               	movf	Lcd_Set_Cursor@z,w
  1884     05AF  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  1885     05B4                     l1171:
  1886                           
  1887                           ;./lcd.h: 81:         Lcd_Cmd(y);
  1888     05B4  0878               	movf	Lcd_Set_Cursor@y,w
  1889     05B5  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  1890                           
  1891                           ;./lcd.h: 82:     } else if (a >= 1) {
  1892     05BA  2DDC               	goto	l42
  1893     05BB                     l1173:
  1894     05BB  0876               	movf	Lcd_Set_Cursor@a,w
  1895     05BC  1903               	btfsc	3,2
  1896     05BD  2DBF               	goto	u841
  1897     05BE  2DC0               	goto	u840
  1898     05BF                     u841:
  1899     05BF  2DDC               	goto	l42
  1900     05C0                     u840:
  1901     05C0                     l1175:
  1902                           
  1903                           ;./lcd.h: 83:         temp = 0xC0 + b;
  1904     05C0  0874               	movf	Lcd_Set_Cursor@b,w
  1905     05C1  3EC0               	addlw	192
  1906     05C2  00F9               	movwf	Lcd_Set_Cursor@temp
  1907                           
  1908                           ;./lcd.h: 84:         z = temp >> 4;
  1909     05C3  0879               	movf	Lcd_Set_Cursor@temp,w
  1910     05C4  00F5               	movwf	??_Lcd_Set_Cursor
  1911     05C5  3004               	movlw	4
  1912     05C6                     u855:
  1913     05C6  1003               	clrc
  1914     05C7  0CF5               	rrf	??_Lcd_Set_Cursor,f
  1915     05C8  3EFF               	addlw	-1
  1916     05C9  1D03               	skipz
  1917     05CA  2DC6               	goto	u855
  1918     05CB  0875               	movf	??_Lcd_Set_Cursor,w
  1919     05CC  00F7               	movwf	Lcd_Set_Cursor@z
  1920     05CD                     l1177:
  1921                           
  1922                           ;./lcd.h: 85:         y = temp & 0x0F;
  1923     05CD  0879               	movf	Lcd_Set_Cursor@temp,w
  1924     05CE  390F               	andlw	15
  1925     05CF  00F8               	movwf	Lcd_Set_Cursor@y
  1926     05D0                     l1179:
  1927                           
  1928                           ;./lcd.h: 86:         Lcd_Cmd(z);
  1929     05D0  0877               	movf	Lcd_Set_Cursor@z,w
  1930     05D1  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  1931     05D6                     l1181:
  1932                           
  1933                           ;./lcd.h: 87:         Lcd_Cmd(y);
  1934     05D6  0878               	movf	Lcd_Set_Cursor@y,w
  1935     05D7  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  1936     05DC                     l42:
  1937     05DC  0008               	return
  1938     05DD                     __end_of_Lcd_Set_Cursor:
  1939                           
  1940                           	psect	text9
  1941     05DD                     __ptext9:	
  1942 ;; *************** function _Lcd_Init *****************
  1943 ;; Defined at:
  1944 ;;		line 44 in file "./lcd.h"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  1    wreg      void 
  1951 ;; Registers used:
  1952 ;;		wreg, status,2, status,0, pclath, cstack
  1953 ;; Tracked objects:
  1954 ;;		On entry : 0/0
  1955 ;;		On exit  : 0/0
  1956 ;;		Unchanged: 0/0
  1957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1958 ;;      Params:         0       0       0       0       0
  1959 ;;      Locals:         0       0       0       0       0
  1960 ;;      Temps:          2       0       0       0       0
  1961 ;;      Totals:         2       0       0       0       0
  1962 ;;Total ram usage:        2 bytes
  1963 ;; Hardware stack levels used: 1
  1964 ;; Hardware stack levels required when called: 2
  1965 ;; This function calls:
  1966 ;;		_Lcd_Cmd
  1967 ;;		_Lcd_Port
  1968 ;; This function is called by:
  1969 ;;		_main
  1970 ;; This function uses a non-reentrant model
  1971 ;;
  1972                           
  1973     05DD                     _Lcd_Init:	
  1974                           ;psect for function _Lcd_Init
  1975                           
  1976     05DD                     l1129:	
  1977                           ;incstack = 0
  1978                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  1979                           
  1980                           
  1981                           ;./lcd.h: 45:     TRISD &= ~0xff;
  1982     05DD  1683               	bsf	3,5	;RP0=1, select bank1
  1983     05DE  1303               	bcf	3,6	;RP1=0, select bank1
  1984     05DF  0188               	clrf	8	;volatile
  1985     05E0                     l1131:
  1986                           
  1987                           ;./lcd.h: 46:     TRISE &= ~0x06;
  1988     05E0  30F9               	movlw	249
  1989     05E1  00F4               	movwf	??_Lcd_Init
  1990     05E2  0874               	movf	??_Lcd_Init,w
  1991     05E3  0589               	andwf	9,f	;volatile
  1992     05E4                     l1133:
  1993                           
  1994                           ;./lcd.h: 47:     Lcd_Port(0x00);
  1995     05E4  3000               	movlw	0
  1996     05E5  120A  118A  243F  120A  118A  	fcall	_Lcd_Port
  1997     05EA                     l1135:
  1998                           
  1999                           ;./lcd.h: 48:     _delay((unsigned long)((20)*(20*1000000/4000.0)));
  2000     05EA  3082               	movlw	130
  2001     05EB  00F5               	movwf	??_Lcd_Init+1
  2002     05EC  30DD               	movlw	221
  2003     05ED  00F4               	movwf	??_Lcd_Init
  2004     05EE                     u1047:
  2005     05EE  0BF4               	decfsz	??_Lcd_Init,f
  2006     05EF  2DEE               	goto	u1047
  2007     05F0  0BF5               	decfsz	??_Lcd_Init+1,f
  2008     05F1  2DEE               	goto	u1047
  2009     05F2  2DF3               	nop2
  2010     05F3                     l1137:
  2011                           
  2012                           ;./lcd.h: 49:     Lcd_Cmd(0x03);
  2013     05F3  3003               	movlw	3
  2014     05F4  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2015     05F9                     l1139:
  2016                           
  2017                           ;./lcd.h: 50:     _delay((unsigned long)((5)*(20*1000000/4000.0)));
  2018     05F9  3021               	movlw	33
  2019     05FA  00F5               	movwf	??_Lcd_Init+1
  2020     05FB  3076               	movlw	118
  2021     05FC  00F4               	movwf	??_Lcd_Init
  2022     05FD                     u1057:
  2023     05FD  0BF4               	decfsz	??_Lcd_Init,f
  2024     05FE  2DFD               	goto	u1057
  2025     05FF  0BF5               	decfsz	??_Lcd_Init+1,f
  2026     0600  2DFD               	goto	u1057
  2027     0601  0000               	nop
  2028     0602                     l1141:
  2029                           
  2030                           ;./lcd.h: 51:     Lcd_Cmd(0x03);
  2031     0602  3003               	movlw	3
  2032     0603  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2033     0608                     l1143:
  2034                           
  2035                           ;./lcd.h: 52:     _delay((unsigned long)((10)*(20*1000000/4000.0)));
  2036     0608  3041               	movlw	65
  2037     0609  00F5               	movwf	??_Lcd_Init+1
  2038     060A  30EE               	movlw	238
  2039     060B  00F4               	movwf	??_Lcd_Init
  2040     060C                     u1067:
  2041     060C  0BF4               	decfsz	??_Lcd_Init,f
  2042     060D  2E0C               	goto	u1067
  2043     060E  0BF5               	decfsz	??_Lcd_Init+1,f
  2044     060F  2E0C               	goto	u1067
  2045     0610  0000               	nop
  2046     0611                     l1145:
  2047                           
  2048                           ;./lcd.h: 53:     Lcd_Cmd(0x03);
  2049     0611  3003               	movlw	3
  2050     0612  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2051     0617                     l1147:
  2052                           
  2053                           ;./lcd.h: 55:     Lcd_Cmd(0x02);
  2054     0617  3002               	movlw	2
  2055     0618  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2056     061D                     l1149:
  2057                           
  2058                           ;./lcd.h: 57:     Lcd_Cmd(0x02);
  2059     061D  3002               	movlw	2
  2060     061E  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2061     0623                     l1151:
  2062                           
  2063                           ;./lcd.h: 58:     Lcd_Cmd(0x08);
  2064     0623  3008               	movlw	8
  2065     0624  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2066     0629                     l1153:
  2067                           
  2068                           ;./lcd.h: 60:     Lcd_Cmd(0x00);
  2069     0629  3000               	movlw	0
  2070     062A  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2071     062F                     l1155:
  2072                           
  2073                           ;./lcd.h: 61:     Lcd_Cmd(0x0C);
  2074     062F  300C               	movlw	12
  2075     0630  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2076     0635                     l1157:
  2077                           
  2078                           ;./lcd.h: 63:     Lcd_Cmd(0x00);
  2079     0635  3000               	movlw	0
  2080     0636  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2081     063B                     l1159:
  2082                           
  2083                           ;./lcd.h: 64:     Lcd_Cmd(0x06);
  2084     063B  3006               	movlw	6
  2085     063C  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2086     0641                     l33:
  2087     0641  0008               	return
  2088     0642                     __end_of_Lcd_Init:
  2089                           
  2090                           	psect	text10
  2091     0411                     __ptext10:	
  2092 ;; *************** function _Lcd_Clear *****************
  2093 ;; Defined at:
  2094 ;;		line 67 in file "./lcd.h"
  2095 ;; Parameters:    Size  Location     Type
  2096 ;;		None
  2097 ;; Auto vars:     Size  Location     Type
  2098 ;;		None
  2099 ;; Return value:  Size  Location     Type
  2100 ;;                  1    wreg      void 
  2101 ;; Registers used:
  2102 ;;		wreg, status,2, status,0, pclath, cstack
  2103 ;; Tracked objects:
  2104 ;;		On entry : 0/0
  2105 ;;		On exit  : 0/0
  2106 ;;		Unchanged: 0/0
  2107 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2108 ;;      Params:         0       0       0       0       0
  2109 ;;      Locals:         0       0       0       0       0
  2110 ;;      Temps:          0       0       0       0       0
  2111 ;;      Totals:         0       0       0       0       0
  2112 ;;Total ram usage:        0 bytes
  2113 ;; Hardware stack levels used: 1
  2114 ;; Hardware stack levels required when called: 2
  2115 ;; This function calls:
  2116 ;;		_Lcd_Cmd
  2117 ;; This function is called by:
  2118 ;;		_main
  2119 ;; This function uses a non-reentrant model
  2120 ;;
  2121                           
  2122     0411                     _Lcd_Clear:	
  2123                           ;psect for function _Lcd_Clear
  2124                           
  2125     0411                     l1161:	
  2126                           ;incstack = 0
  2127                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2128                           
  2129                           
  2130                           ;./lcd.h: 69:     Lcd_Cmd(0);
  2131     0411  3000               	movlw	0
  2132     0412  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2133                           
  2134                           ;./lcd.h: 70:     Lcd_Cmd(1);
  2135     0417  3001               	movlw	1
  2136     0418  120A  118A  241E  120A  118A  	fcall	_Lcd_Cmd
  2137     041D                     l36:
  2138     041D  0008               	return
  2139     041E                     __end_of_Lcd_Clear:
  2140                           
  2141                           	psect	text11
  2142     041E                     __ptext11:	
  2143 ;; *************** function _Lcd_Cmd *****************
  2144 ;; Defined at:
  2145 ;;		line 32 in file "./lcd.h"
  2146 ;; Parameters:    Size  Location     Type
  2147 ;;  a               1    wreg     unsigned char 
  2148 ;; Auto vars:     Size  Location     Type
  2149 ;;  a               1    3[COMMON] unsigned char 
  2150 ;; Return value:  Size  Location     Type
  2151 ;;                  1    wreg      void 
  2152 ;; Registers used:
  2153 ;;		wreg, status,2, status,0, pclath, cstack
  2154 ;; Tracked objects:
  2155 ;;		On entry : 0/0
  2156 ;;		On exit  : 0/0
  2157 ;;		Unchanged: 0/0
  2158 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2159 ;;      Params:         0       0       0       0       0
  2160 ;;      Locals:         1       0       0       0       0
  2161 ;;      Temps:          2       0       0       0       0
  2162 ;;      Totals:         3       0       0       0       0
  2163 ;;Total ram usage:        3 bytes
  2164 ;; Hardware stack levels used: 1
  2165 ;; Hardware stack levels required when called: 1
  2166 ;; This function calls:
  2167 ;;		_Lcd_Port
  2168 ;; This function is called by:
  2169 ;;		_Lcd_Init
  2170 ;;		_Lcd_Clear
  2171 ;;		_Lcd_Set_Cursor
  2172 ;;		_Lcd_Shift_Right
  2173 ;;		_Lcd_Shift_Left
  2174 ;; This function uses a non-reentrant model
  2175 ;;
  2176                           
  2177     041E                     _Lcd_Cmd:	
  2178                           ;psect for function _Lcd_Cmd
  2179                           
  2180                           
  2181                           ;incstack = 0
  2182                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2183                           ;Lcd_Cmd@a stored from wreg
  2184     041E  00F3               	movwf	Lcd_Cmd@a
  2185     041F                     l1015:
  2186                           
  2187                           ;./lcd.h: 33:     TRISD &= ~0xff;
  2188     041F  1683               	bsf	3,5	;RP0=1, select bank1
  2189     0420  1303               	bcf	3,6	;RP1=0, select bank1
  2190     0421  0188               	clrf	8	;volatile
  2191     0422                     l1017:
  2192                           
  2193                           ;./lcd.h: 34:     TRISE &= ~0x06;
  2194     0422  30F9               	movlw	249
  2195     0423  00F1               	movwf	??_Lcd_Cmd
  2196     0424  0871               	movf	??_Lcd_Cmd,w
  2197     0425  0589               	andwf	9,f	;volatile
  2198     0426                     l1019:
  2199                           
  2200                           ;./lcd.h: 37:     PORTEbits.RE2 = 0;
  2201     0426  1283               	bcf	3,5	;RP0=0, select bank0
  2202     0427  1303               	bcf	3,6	;RP1=0, select bank0
  2203     0428  1109               	bcf	9,2	;volatile
  2204     0429                     l1021:
  2205                           
  2206                           ;./lcd.h: 38:     Lcd_Port(a);
  2207     0429  0873               	movf	Lcd_Cmd@a,w
  2208     042A  120A  118A  243F  120A  118A  	fcall	_Lcd_Port
  2209     042F                     l1023:
  2210                           
  2211                           ;./lcd.h: 39:     PORTEbits.RE1 = 1;
  2212     042F  1283               	bcf	3,5	;RP0=0, select bank0
  2213     0430  1303               	bcf	3,6	;RP1=0, select bank0
  2214     0431  1489               	bsf	9,1	;volatile
  2215     0432                     l1025:
  2216                           
  2217                           ;./lcd.h: 40:     _delay((unsigned long)((4)*(20*1000000/4000.0)));
  2218     0432  301A               	movlw	26
  2219     0433  00F2               	movwf	??_Lcd_Cmd+1
  2220     0434  30F8               	movlw	248
  2221     0435  00F1               	movwf	??_Lcd_Cmd
  2222     0436                     u1077:
  2223     0436  0BF1               	decfsz	??_Lcd_Cmd,f
  2224     0437  2C36               	goto	u1077
  2225     0438  0BF2               	decfsz	??_Lcd_Cmd+1,f
  2226     0439  2C36               	goto	u1077
  2227     043A  0000               	nop
  2228     043B                     l1027:
  2229                           
  2230                           ;./lcd.h: 41:     PORTEbits.RE1 = 0;
  2231     043B  1283               	bcf	3,5	;RP0=0, select bank0
  2232     043C  1303               	bcf	3,6	;RP1=0, select bank0
  2233     043D  1089               	bcf	9,1	;volatile
  2234     043E                     l30:
  2235     043E  0008               	return
  2236     043F                     __end_of_Lcd_Cmd:
  2237                           
  2238                           	psect	text12
  2239     043F                     __ptext12:	
  2240 ;; *************** function _Lcd_Port *****************
  2241 ;; Defined at:
  2242 ;;		line 17 in file "./lcd.h"
  2243 ;; Parameters:    Size  Location     Type
  2244 ;;  a               1    wreg     unsigned char 
  2245 ;; Auto vars:     Size  Location     Type
  2246 ;;  a               1    0[COMMON] unsigned char 
  2247 ;; Return value:  Size  Location     Type
  2248 ;;                  1    wreg      void 
  2249 ;; Registers used:
  2250 ;;		wreg
  2251 ;; Tracked objects:
  2252 ;;		On entry : 0/0
  2253 ;;		On exit  : 0/0
  2254 ;;		Unchanged: 0/0
  2255 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2256 ;;      Params:         0       0       0       0       0
  2257 ;;      Locals:         1       0       0       0       0
  2258 ;;      Temps:          0       0       0       0       0
  2259 ;;      Totals:         1       0       0       0       0
  2260 ;;Total ram usage:        1 bytes
  2261 ;; Hardware stack levels used: 1
  2262 ;; This function calls:
  2263 ;;		Nothing
  2264 ;; This function is called by:
  2265 ;;		_Lcd_Cmd
  2266 ;;		_Lcd_Init
  2267 ;;		_Lcd_Write_Char
  2268 ;; This function uses a non-reentrant model
  2269 ;;
  2270                           
  2271     043F                     _Lcd_Port:	
  2272                           ;psect for function _Lcd_Port
  2273                           
  2274                           
  2275                           ;incstack = 0
  2276                           ; Regs used in _Lcd_Port: [wreg]
  2277                           ;Lcd_Port@a stored from wreg
  2278     043F  00F0               	movwf	Lcd_Port@a
  2279     0440                     l985:
  2280                           
  2281                           ;./lcd.h: 19:     if (a & 1) PORTDbits.RD4 = 1;
  2282     0440  1C70               	btfss	Lcd_Port@a,0
  2283     0441  2C43               	goto	u511
  2284     0442  2C44               	goto	u510
  2285     0443                     u511:
  2286     0443  2C48               	goto	l19
  2287     0444                     u510:
  2288     0444                     l987:
  2289     0444  1283               	bcf	3,5	;RP0=0, select bank0
  2290     0445  1303               	bcf	3,6	;RP1=0, select bank0
  2291     0446  1608               	bsf	8,4	;volatile
  2292     0447  2C4B               	goto	l20
  2293     0448                     l19:	
  2294                           ;./lcd.h: 20:     else PORTDbits.RD4 = 0;
  2295                           
  2296     0448  1283               	bcf	3,5	;RP0=0, select bank0
  2297     0449  1303               	bcf	3,6	;RP1=0, select bank0
  2298     044A  1208               	bcf	8,4	;volatile
  2299     044B                     l20:
  2300                           
  2301                           ;./lcd.h: 22:     if (a & 2) PORTDbits.RD5 = 1;
  2302     044B  1CF0               	btfss	Lcd_Port@a,1
  2303     044C  2C4E               	goto	u521
  2304     044D  2C4F               	goto	u520
  2305     044E                     u521:
  2306     044E  2C51               	goto	l21
  2307     044F                     u520:
  2308     044F                     l989:
  2309     044F  1688               	bsf	8,5	;volatile
  2310     0450  2C52               	goto	l22
  2311     0451                     l21:	
  2312                           ;./lcd.h: 23:     else PORTDbits.RD5 = 0;
  2313                           
  2314     0451  1288               	bcf	8,5	;volatile
  2315     0452                     l22:
  2316                           
  2317                           ;./lcd.h: 25:     if (a & 4) PORTDbits.RD6 = 1;
  2318     0452  1D70               	btfss	Lcd_Port@a,2
  2319     0453  2C55               	goto	u531
  2320     0454  2C56               	goto	u530
  2321     0455                     u531:
  2322     0455  2C58               	goto	l23
  2323     0456                     u530:
  2324     0456                     l991:
  2325     0456  1708               	bsf	8,6	;volatile
  2326     0457  2C59               	goto	l24
  2327     0458                     l23:	
  2328                           ;./lcd.h: 26:     else PORTDbits.RD6 = 0;
  2329                           
  2330     0458  1308               	bcf	8,6	;volatile
  2331     0459                     l24:
  2332                           
  2333                           ;./lcd.h: 28:     if (a & 8) PORTDbits.RD7 = 1;
  2334     0459  1DF0               	btfss	Lcd_Port@a,3
  2335     045A  2C5C               	goto	u541
  2336     045B  2C5D               	goto	u540
  2337     045C                     u541:
  2338     045C  2C5F               	goto	l25
  2339     045D                     u540:
  2340     045D                     l993:
  2341     045D  1788               	bsf	8,7	;volatile
  2342     045E  2C60               	goto	l27
  2343     045F                     l25:	
  2344                           ;./lcd.h: 29:     else PORTDbits.RD7 = 0;
  2345                           
  2346     045F  1388               	bcf	8,7	;volatile
  2347     0460                     l27:
  2348     0460  0008               	return
  2349     0461                     __end_of_Lcd_Port:
  2350     007E                     btemp	set	126	;btemp
  2351     007E                     wtemp0	set	126
  2352                           
  2353                           	psect	idloc
  2354                           
  2355                           ;Config register IDLOC0 @ 0x2000
  2356                           ;	unspecified, using default values
  2357     2000                     	org	8192
  2358     2000  3FFF               	dw	16383
  2359                           
  2360                           ;Config register IDLOC1 @ 0x2001
  2361                           ;	unspecified, using default values
  2362     2001                     	org	8193
  2363     2001  3FFF               	dw	16383
  2364                           
  2365                           ;Config register IDLOC2 @ 0x2002
  2366                           ;	unspecified, using default values
  2367     2002                     	org	8194
  2368     2002  3FFF               	dw	16383
  2369                           
  2370                           ;Config register IDLOC3 @ 0x2003
  2371                           ;	unspecified, using default values
  2372     2003                     	org	8195
  2373     2003  3FFF               	dw	16383
  2374                           
  2375                           	psect	config
  2376                           
  2377                           ;Config register CONFIG @ 0x2007
  2378                           ;	Oscillator Selection bits
  2379                           ;	FOSC = HS, HS oscillator
  2380                           ;	Watchdog Timer Enable bit
  2381                           ;	WDTE = OFF, WDT disabled
  2382                           ;	Power-up Timer Enable bit
  2383                           ;	PWRTE = ON, PWRT enabled
  2384                           ;	Brown-out Reset Enable bit
  2385                           ;	BOREN = ON, BOR enabled
  2386                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  2387                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  2388                           ;	Data EEPROM Memory Code Protection bit
  2389                           ;	CPD = OFF, Data EEPROM code protection off
  2390                           ;	Flash Program Memory Write Enable bits
  2391                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  2392                           ;	In-Circuit Debugger Mode bit
  2393                           ;	DEBUG = 0x1, unprogrammed default
  2394                           ;	Flash Program Memory Code Protection bit
  2395                           ;	CP = OFF, Code protection off
  2396     2007                     	org	8199
  2397     2007  3FF2               	dw	16370

Data Sizes:
    Strings     10
    Constant    12
    Data        0
    BSS         1
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     65      66
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 50
		 -> STR_1(CODE[10]), Lcd_Write_Int@buffer(BANK0[50]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Write_Int
    _Lcd_Write_Int->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3904
                                             62 BANK0      3     3      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                      _Lcd_Write_Int
                   _Lcd_Write_String
                        _Numpad_Read
 ---------------------------------------------------------------------------------
 (2) _Numpad_Read                                          6     6      0     226
                                              0 COMMON     6     6      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       64    62      2    2373
                                             12 COMMON     2     0      2
                                              0 BANK0     62    62      0
                   _Lcd_Write_String
                            ___awdiv
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     314
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     452
                                              0 COMMON     9     5      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     420
                                              5 COMMON     7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     178
                                              1 COMMON     4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     532
                                              4 COMMON     6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     198
                                              4 COMMON     2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     110
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     110
                                              1 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      88
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     ___lwdiv
     ___lwmod
   _Lcd_Write_String
   _Numpad_Read

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      E       E       1      100.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      50       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     41      42       5       82.5%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      50      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Dec 21 19:58:25 2022

                       pc 0002                        l20 044B                        l21 0451  
                      l22 0452                        l30 043E                        l23 0458  
                      l24 0459                        l25 045F                        l33 0641  
                      l42 05DC                        l27 0460                        l19 0448  
                      l51 0511                        l36 041D                        l45 0495  
                      l72 07F8                        l83 0700                        l84 0717  
            ___awdiv@sign 0076                        fsr 0004  Numpad_Read@currentKeyVal 0072  
                     l332 06A8                       l451 0597                       l461 04CF  
                     l991 0456                       l993 045D                       l985 0440  
                     l987 0444                       l995 0462                       l989 044F  
                     l997 0468                       l999 046B                       u510 0444  
                     u511 0443                       u520 044F                       u600 0652  
                     u521 044E                       u601 0651                       u530 0456  
                     u610 0663                       u531 0455                       u611 0662  
                     u540 045D                       u541 045C                       u630 0675  
                     u710 056E                       u631 0674                       u711 056D  
                     u560 04DD                       u625 0667                       u705 0560  
                     u570 04FF                       u650 0686                       u730 057F  
                     u810 04CB                       u555 046E                       u651 0685  
                     u731 057E                       u811 04CA                       u820 059E  
                     u580 0511                       u900 0777                       u821 059D  
                     u581 0510                       u645 0676                       u725 056F  
                     u805 04BF                       u901 0776                       u670 069A  
                     u590 0647                       u750 0593                       u910 07E4  
                     u671 0699                       u655 0682                       u591 0646  
                     u751 0592                       u735 057B                       u911 07E3  
                     u840 05C0                       u680 069F                       u760 049C  
                     u920 07EC                       u841 05BF                       u681 069E  
                     u665 068E                       u745 0587                       u761 049B  
                     u921 07EB                       u690 055C                       u835 05A4  
                     u691 055B                       u915 07E0                       u780 04AE  
                     u860 0725                       u781 04AD                       u861 0723  
                     u790 04B8                       u870 0726                       u950 06E4  
                     u934 06BF                       u855 05C6                       u791 04B7  
                     u775 04A0                       u951 06E3                       u935 06BD  
                     u880 072C                       u960 06E9                       u944 06D7  
                     u881 072B                       u961 06E8                       u945 06D5  
                     u890 0772                       u795 04B4                       u891 0771  
                     u980 070C                       u981 070B                       u990 0716  
                     u991 0715                       u975 06EC                       fsr0 0004  
                     indf 0000                      l1001 0479                      l1011 048D  
                    l1003 047C                      l1021 0429                      l1013 0492  
                    l1005 0481                      l1101 058D                      l1023 042F  
                    l1015 041F                      l1007 0484                      l1031 04D3  
                    l1103 0593                      l1111 049F                      l1025 0432  
                    l1017 0422                      l1009 048A                      l1033 04EF  
                    l1041 0647                      l1121 04BE                      l1113 04A6  
                    l1201 076C                      l1027 043B                      l1019 0426  
                    l1131 05E0                      l1035 04F5                      l1051 065B  
                    l1043 064C                      l1123 04C5                      l1115 04AA  
                    l1107 0496                      l1211 0788                      l1203 0772  
                    l1141 0602                      l1133 05E4                      l1029 04D0  
                    l1061 0671                      l1053 065D                      l1045 064E  
                    l1037 0642                      l1117 04AE                      l1109 049C  
                    l1125 04CB                      l1221 07EC                      l1213 078B  
                    l1205 0777                      l1151 0623                      l1143 0608  
                    l1135 05EA                      l1071 0694                      l1063 0675  
                    l1055 0663                      l1047 0652                      l1039 0643  
                    l1119 04B8                      l1223 07EE                      l1215 07C1  
                    l1207 077D                      l1161 0411                      l1153 0629  
                    l1145 0611                      l1137 05F3                      l1129 05DD  
                    l1065 0686                      l1057 0666                      l1073 069A  
                    l1049 0657                      l1081 0554                      l1225 07EF  
                    l1217 07C7                      l1209 0783                      l1155 062F  
                    l1147 0617                      l1139 05F9                      l1171 05B4  
                    l1163 0599                      l1075 069F                      l1067 068C  
                    l1059 066D                      l1091 056A                      l1083 0556  
                    l1219 07E4                      l1251 06FD                      l1235 06B4  
                    l1227 06A9                      l1157 0635                      l1149 061D  
                    l1181 05D6                      l1165 059E                      l1173 05BB  
                    l1077 06A4                      l1069 068D                      l1093 056E  
                    l1085 055C                      l1261 070C                      l1253 06FE  
                    l1245 06D1                      l1237 06C7                      l1229 06B3  
                    l1159 063B                      l1175 05C0                      l1167 05AB  
                    l1095 057F                      l1087 055F                      l1191 072C  
                    l1183 0718                      l1263 0710                      l1247 06E4  
                    l1239 06D0                      l1177 05CD                      l1169 05AE  
                    l1097 0585                      l1089 0566                      l1193 0731  
                    l1185 071E                      l1265 0716                      l1257 0702  
                    l1249 06E9                      l1281 0535                      l1273 0512  
                    l1179 05D0                      l1099 0586                      l1195 073D  
                    l1187 0720                      l1259 0706                      l1283 0542  
                    l1275 051F                      l1197 0751                      l1189 0727  
                    l1277 0528                      l1199 0759                      l1279 0530  
                    STR_1 001F                      u1000 0535                      u1001 0534  
                    u1017 06CB                      u1027 047E                      u1037 048F  
                    u1047 05EE                      u1057 05FD                      u1067 060C  
                    u1077 0436         ?_Lcd_Write_String 0075                      _main 0512  
                    btemp 007E                      start 0000        ??_Lcd_Write_String 0077  
         __end_of_Lcd_Cmd 043F                     ?_main 0070           __end_of___awdiv 06A9  
         ___awdiv@divisor 0070           __end_of___lwdiv 0598           __end_of___lwmod 04D0  
         ___awdiv@counter 0075                     _PORTB 0006                     _PORTD 0008  
                   _TRISB 0086                     _TRISD 0088                     _TRISE 0089  
                   pclath 000A                     status 0003                     wtemp0 007E  
        __end_of_Lcd_Init 0642          __end_of_Lcd_Port 0461           __initialization 07F9  
            __end_of_main 0554                    ??_main 005E          ___awdiv@dividend 0072  
               ??_Lcd_Cmd 0071                 ??___awdiv 0074                 ??___lwdiv 0074  
               ??___lwmod 0074                    _keypad 0013          ___awdiv@quotient 0077  
   __end_of_Lcd_Write_Int 07F9             ??_Numpad_Read 0070          Lcd_Write_Int@val 007C  
         Lcd_Set_Cursor@a 0076           Lcd_Set_Cursor@b 0074           Lcd_Set_Cursor@y 0078  
         Lcd_Set_Cursor@z 0077   __end_of__initialization 07FC         __end_of_Lcd_Clear 041E  
          __pcstackCOMMON 0070            _Lcd_Set_Cursor 0598                 ?_Lcd_Init 0070  
               ?_Lcd_Port 0070            Lcd_Write_Int@i 005C            Lcd_Write_Int@n 0058  
          Lcd_Write_Int@t 005A       __end_of_Numpad_Read 0718                __pbssBANK0 0061  
              __pmaintext 0512    __end_of_Lcd_Set_Cursor 05DD                ??_Lcd_Init 0074  
              ??_Lcd_Port 0070                __stringtab 0003            _Lcd_Write_Char 0461  
                 _Lcd_Cmd 041E                   ___awdiv 0642                   ___lwdiv 0554  
                 ___lwmod 0496           ?_Lcd_Set_Cursor 0074                   __ptext1 06A9  
                 __ptext2 0718                   __ptext3 0496                   __ptext4 0554  
                 __ptext5 0642                   __ptext6 04D0                   __ptext7 0461  
                 __ptext8 0598                   __ptext9 05DD               _Numpad_Read 06A9  
    Numpad_Read@oldKeyVal 0061    __end_of_Lcd_Write_Char 0496      end_of_initialization 07FC  
               Lcd_Port@a 0070                 _PORTDbits 0008                 _PORTEbits 0009  
         ?_Lcd_Write_Char 0070         Lcd_Write_String@a 0075         Lcd_Write_String@i 007A  
               _Lcd_Clear 0411          _Lcd_Write_String 04D0            __end_of_keypad 001F  
     start_initialization 07F9        Numpad_Read@colScan 0074                ?_Lcd_Clear 0070  
         Lcd_Write_Char@a 0074           Lcd_Write_Char@y 0073           Lcd_Write_Int@n1 0056  
      Numpad_Read@rowScan 0075                 ___latbits 0002             __pcstackBANK0 0020  
                ?_Lcd_Cmd 0070          ___lwdiv@dividend 0072          ??_Lcd_Set_Cursor 0075  
                ?___awdiv 0070                  ?___lwdiv 0070                  ?___lwmod 0070  
               __pstrings 0003             _Lcd_Write_Int 0718              ?_Numpad_Read 0070  
        ___lwdiv@quotient 0075                  Lcd_Cmd@a 0073               ??_Lcd_Clear 0074  
             __stringbase 0012            ?_Lcd_Write_Int 007C          ??_Lcd_Write_Char 0071  
                _Lcd_Init 05DD                  _Lcd_Port 043F  __end_of_Lcd_Write_String 0512  
      __end_of__stringtab 0013           ___lwdiv@divisor 0070           ___lwdiv@counter 0077  
                __ptext10 0411                  __ptext11 041E                  __ptext12 043F  
   Numpad_Read@currentKey 0073                  main@read 0060           ??_Lcd_Write_Int 0020  
     Lcd_Write_Int@buffer 0023        Lcd_Write_Char@temp 0072          ___lwmod@dividend 0072  
               stringcode 000D        Lcd_Set_Cursor@temp 0079        Lcd_Write_Int@isNeg 0055  
         ___lwmod@divisor 0070           ___lwmod@counter 0075                  stringdir 000D  
                stringtab 0003  
