

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Tue Jan 17 16:39:11 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    11                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    12                           	psect	maintext,global,class=CODE,split=1,delta=2
    13                           	psect	text1,local,class=CODE,merge=1,delta=2
    14                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text3,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text4,local,class=CODE,merge=1,delta=2
    17                           	psect	intentry,global,class=CODE,delta=2
    18                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    19                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    20                           	dabs	1,0x7E,2
    21     0000                     
    22                           ; Version 2.40
    23                           ; Generated 17/11/2021 GMT
    24                           ; 
    25                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    26                           ; All rights reserved.
    27                           ; 
    28                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    29                           ; 
    30                           ; Redistribution and use in source and binary forms, with or without modification, are
    31                           ; permitted provided that the following conditions are met:
    32                           ; 
    33                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    34                           ;        conditions and the following disclaimer.
    35                           ; 
    36                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    37                           ;        of conditions and the following disclaimer in the documentation and/or other
    38                           ;        materials provided with the distribution. Publication is not required when
    39                           ;        this file is used in an embedded application.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC16F628A Definitions
    55                           ; 
    56                           ; SFR Addresses
    57     0000                     	;# 
    58     0001                     	;# 
    59     0002                     	;# 
    60     0003                     	;# 
    61     0004                     	;# 
    62     0005                     	;# 
    63     0006                     	;# 
    64     000A                     	;# 
    65     000B                     	;# 
    66     000C                     	;# 
    67     000E                     	;# 
    68     000E                     	;# 
    69     000F                     	;# 
    70     0010                     	;# 
    71     0011                     	;# 
    72     0012                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001F                     	;# 
    81     0081                     	;# 
    82     0085                     	;# 
    83     0086                     	;# 
    84     008C                     	;# 
    85     008E                     	;# 
    86     0092                     	;# 
    87     0098                     	;# 
    88     0099                     	;# 
    89     009A                     	;# 
    90     009B                     	;# 
    91     009C                     	;# 
    92     009D                     	;# 
    93     009F                     	;# 
    94     0000                     	;# 
    95     0001                     	;# 
    96     0002                     	;# 
    97     0003                     	;# 
    98     0004                     	;# 
    99     0005                     	;# 
   100     0006                     	;# 
   101     000A                     	;# 
   102     000B                     	;# 
   103     000C                     	;# 
   104     000E                     	;# 
   105     000E                     	;# 
   106     000F                     	;# 
   107     0010                     	;# 
   108     0011                     	;# 
   109     0012                     	;# 
   110     0015                     	;# 
   111     0015                     	;# 
   112     0016                     	;# 
   113     0017                     	;# 
   114     0018                     	;# 
   115     0019                     	;# 
   116     001A                     	;# 
   117     001F                     	;# 
   118     0081                     	;# 
   119     0085                     	;# 
   120     0086                     	;# 
   121     008C                     	;# 
   122     008E                     	;# 
   123     0092                     	;# 
   124     0098                     	;# 
   125     0099                     	;# 
   126     009A                     	;# 
   127     009B                     	;# 
   128     009C                     	;# 
   129     009D                     	;# 
   130     009F                     	;# 
   131                           
   132                           	psect	idataCOMMON
   133     0155                     __pidataCOMMON:
   134                           
   135                           ;initializer for _conteggio
   136     0155  3463               	retlw	99
   137                           
   138                           	psect	strings
   139     0138                     __pstrings:
   140     0138                     stringtab:
   141     0138                     __stringtab:
   142     0138                     stringcode:	
   143                           ;	String table - string pointers are 1 byte each
   144                           
   145     0138                     stringdir:
   146     0138  3001               	movlw	high stringdir
   147     0139  008A               	movwf	10
   148     013A  0804               	movf	4,w
   149     013B  0A84               	incf	4,f
   150     013C  0782               	addwf	2,f
   151     013D                     __stringbase:
   152     013D  3400               	retlw	0
   153     013E                     __end_of__stringtab:
   154     013E                     writeDisplay@displayPattern:
   155     013E  34EE               	retlw	238
   156     013F  3428               	retlw	40
   157     0140  34CD               	retlw	205
   158     0141  346D               	retlw	109
   159     0142  342B               	retlw	43
   160     0143  3467               	retlw	103
   161     0144  34E7               	retlw	231
   162     0145  342C               	retlw	44
   163     0146  34EF               	retlw	239
   164     0147  346F               	retlw	111
   165     0148                     __end_ofwriteDisplay@displayPattern:
   166     0005                     _PORTAbits	set	5
   167     0001                     _TMR0	set	1
   168     000B                     _INTCONbits	set	11
   169     0005                     _PORTA	set	5
   170     000B                     _INTCON	set	11
   171     0006                     _PORTB	set	6
   172     0085                     _TRISA	set	133
   173     0086                     _TRISB	set	134
   174     0081                     _OPTION_REG	set	129
   175                           
   176                           	psect	cinit
   177     000B                     start_initialization:	
   178                           ; #config settings
   179                           
   180     000B                     __initialization:
   181                           
   182                           ; Initialize objects allocated to COMMON
   183     000B  2155               	fcall	__pidataCOMMON	;fetch initializer
   184     000C  00FA               	movwf	__pdataCOMMON& (0+127)
   185                           
   186                           ; Clear objects allocated to BANK0
   187     000D  01A8               	clrf	__pbssBANK0& (0+127)
   188     000E  01A9               	clrf	(__pbssBANK0+1)& (0+127)
   189     000F  01AA               	clrf	(__pbssBANK0+2)& (0+127)
   190     0010  01AB               	clrf	(__pbssBANK0+3)& (0+127)
   191                           
   192                           ; Clear objects allocated to COMMON
   193     0011  01F8               	clrf	__pbssCOMMON& (0+127)
   194     0012  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   195     0013                     end_of_initialization:	
   196                           ;End of C runtime variable initialization code
   197                           
   198     0013                     __end_of__initialization:
   199     0013  0183               	clrf	3
   200     0014  2948               	ljmp	_main	;jump to C main() function
   201                           
   202                           	psect	bssCOMMON
   203     0078                     __pbssCOMMON:
   204     0078                     _conteggioFinito:
   205     0078                     	ds	1
   206     0079                     _statoConteggio:
   207     0079                     	ds	1
   208                           
   209                           	psect	dataCOMMON
   210     007A                     __pdataCOMMON:
   211     007A                     _conteggio:
   212     007A                     	ds	1
   213                           
   214                           	psect	bssBANK0
   215     0028                     __pbssBANK0:
   216     0028                     ISR@InterruptCounter2:
   217     0028                     	ds	2
   218     002A                     ISR@InterruptCounter:
   219     002A                     	ds	1
   220     002B                     _display:
   221     002B                     	ds	1
   222                           
   223                           	psect	cstackCOMMON
   224     0070                     __pcstackCOMMON:
   225     0070                     ?_main:
   226     0070                     ?_ISR:	
   227                           ; 1 bytes @ 0x0
   228                           
   229     0070                     ??_ISR:	
   230                           ; 1 bytes @ 0x0
   231                           
   232                           
   233                           ; 1 bytes @ 0x0
   234     0070                     	ds	3
   235     0073                     ?___awdiv:
   236     0073                     ?___awmod:	
   237                           ; 2 bytes @ 0x3
   238                           
   239     0073                     ___awdiv@divisor:	
   240                           ; 2 bytes @ 0x3
   241                           
   242     0073                     ___awmod@divisor:	
   243                           ; 2 bytes @ 0x3
   244                           
   245                           
   246                           ; 2 bytes @ 0x3
   247     0073                     	ds	2
   248     0075                     ___awdiv@dividend:
   249     0075                     ___awmod@dividend:	
   250                           ; 2 bytes @ 0x5
   251                           
   252                           
   253                           ; 2 bytes @ 0x5
   254     0075                     	ds	2
   255     0077                     ??___awdiv:
   256     0077                     ??___awmod:	
   257                           ; 1 bytes @ 0x7
   258                           
   259                           
   260                           ; 1 bytes @ 0x7
   261     0077                     	ds	1
   262     0078                     ??_main:
   263                           
   264                           	psect	cstackBANK0
   265     0020                     __pcstackBANK0:	
   266                           ; 1 bytes @ 0x8
   267                           
   268     0020                     ___awdiv@counter:
   269     0020                     ___awmod@counter:	
   270                           ; 1 bytes @ 0x0
   271                           
   272                           
   273                           ; 1 bytes @ 0x0
   274     0020                     	ds	1
   275     0021                     ___awdiv@sign:
   276     0021                     ___awmod@sign:	
   277                           ; 1 bytes @ 0x1
   278                           
   279                           
   280                           ; 1 bytes @ 0x1
   281     0021                     	ds	1
   282     0022                     ___awdiv@quotient:
   283                           
   284                           ; 2 bytes @ 0x2
   285     0022                     	ds	2
   286     0024                     ?_writeDisplay:
   287     0024                     writeDisplay@display:	
   288                           ; 1 bytes @ 0x4
   289                           
   290                           
   291                           ; 1 bytes @ 0x4
   292     0024                     	ds	1
   293     0025                     ??_writeDisplay:
   294                           
   295                           ; 1 bytes @ 0x5
   296     0025                     	ds	2
   297     0027                     writeDisplay@value:
   298                           
   299                           ; 1 bytes @ 0x7
   300     0027                     	ds	1
   301                           
   302                           	psect	maintext
   303     0148                     __pmaintext:	
   304 ;;
   305 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   306 ;;
   307 ;; *************** function _main *****************
   308 ;; Defined at:
   309 ;;		line 26 in file "main.c"
   310 ;; Parameters:    Size  Location     Type
   311 ;;		None
   312 ;; Auto vars:     Size  Location     Type
   313 ;;  button          1    0        unsigned char 
   314 ;;  old_button      1    0        unsigned char 
   315 ;; Return value:  Size  Location     Type
   316 ;;                  1    wreg      void 
   317 ;; Registers used:
   318 ;;		wreg, status,2
   319 ;; Tracked objects:
   320 ;;		On entry : B00/0
   321 ;;		On exit  : 0/0
   322 ;;		Unchanged: 0/0
   323 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   324 ;;      Params:         0       0       0       0
   325 ;;      Locals:         0       0       0       0
   326 ;;      Temps:          0       0       0       0
   327 ;;      Totals:         0       0       0       0
   328 ;;Total ram usage:        0 bytes
   329 ;; Hardware stack levels required when called: 3
   330 ;; This function calls:
   331 ;;		___awdiv
   332 ;;		___awmod
   333 ;;		_writeDisplay
   334 ;; This function is called by:
   335 ;;		Startup code after reset
   336 ;; This function uses a non-reentrant model
   337 ;;
   338                           
   339     0148                     _main:	
   340                           ;psect for function _main
   341                           
   342     0148                     l1093:	
   343                           ;incstack = 0
   344                           ; Regs used in _main: [wreg+status,2]
   345                           
   346                           
   347                           ;main.c: 27:     INTCON = 0xA0;
   348     0148  30A0               	movlw	160
   349     0149  008B               	movwf	11	;volatile
   350                           
   351                           ;main.c: 28:     OPTION_REG = 0x84;
   352     014A  3084               	movlw	132
   353     014B  1683               	bsf	3,5	;RP0=1, select bank1
   354     014C  1303               	bcf	3,6	;RP1=0, select bank1
   355     014D  0081               	movwf	1	;volatile
   356     014E                     l1095:
   357                           
   358                           ;main.c: 29:     TRISB = 0x00;
   359     014E  0186               	clrf	6	;volatile
   360     014F                     l1097:
   361                           
   362                           ;main.c: 30:     TRISA = 0x0E;
   363     014F  300E               	movlw	14
   364     0150  0085               	movwf	5	;volatile
   365     0151                     l1099:
   366                           
   367                           ;main.c: 35:         PORTA |= 0x01;
   368     0151  1283               	bcf	3,5	;RP0=0, select bank0
   369     0152  1405               	bsf	5,0	;volatile
   370                           
   371                           ;main.c: 36:         continue;
   372     0153  2951               	goto	l1099
   373     0154  280A               	ljmp	start
   374     0155                     __end_of_main:
   375                           
   376                           	psect	text1
   377     0122                     __ptext1:	
   378 ;; *************** function _writeDisplay *****************
   379 ;; Defined at:
   380 ;;		line 34 in file "./7seg.h"
   381 ;; Parameters:    Size  Location     Type
   382 ;;  value           1    wreg     unsigned char 
   383 ;;  display         1    4[BANK0 ] unsigned char 
   384 ;; Auto vars:     Size  Location     Type
   385 ;;  value           1    7[BANK0 ] unsigned char 
   386 ;; Return value:  Size  Location     Type
   387 ;;                  1    wreg      void 
   388 ;; Registers used:
   389 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
   390 ;; Tracked objects:
   391 ;;		On entry : 0/0
   392 ;;		On exit  : 0/0
   393 ;;		Unchanged: 0/0
   394 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   395 ;;      Params:         0       1       0       0
   396 ;;      Locals:         0       1       0       0
   397 ;;      Temps:          0       2       0       0
   398 ;;      Totals:         0       4       0       0
   399 ;;Total ram usage:        4 bytes
   400 ;; Hardware stack levels used: 2
   401 ;; Hardware stack levels required when called: 1
   402 ;; This function calls:
   403 ;;		Nothing
   404 ;; This function is called by:
   405 ;;		_main
   406 ;; This function uses a non-reentrant model
   407 ;;
   408                           
   409     0122                     _writeDisplay:	
   410                           ;psect for function _writeDisplay
   411                           
   412                           
   413                           ;incstack = 0
   414                           ; Regs used in _writeDisplay: [wreg-fsr0h+status,2+status,0+pclath]
   415                           ;writeDisplay@value stored from wreg
   416     0122  1283               	bcf	3,5	;RP0=0, select bank0
   417     0123  1303               	bcf	3,6	;RP1=0, select bank0
   418     0124  00A7               	movwf	writeDisplay@value
   419     0125                     l1051:
   420                           
   421                           ;./7seg.h: 36:     const char displayPattern[] = {1 << 2 | 1 << 3 | 1 << 5 | 1 << 6 | 1 
      +                          << 7 | 1 << 1, 1 << 3 | 1 << 5, 1 << 2 | 1 << 3 | 1 << 6 | 1 << 7 | 1 << 0, 1 << 2 | 1 <
      +                          < 3 | 1 << 5 | 1 << 6 | 1 << 0, 1 << 3 | 1 << 5 | 1 << 1 | 1 << 0, 1 << 2 | 1 << 5 | 1 <
      +                          < 6 | 1 << 1 | 1 << 0, 1 << 2 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 1 | 1 << 0, 1 << 2 | 1 <
      +                          < 3 | 1 << 5, 1 << 2 | 1 << 3 | 1 << 5 | 1 << 6 | 1 << 7 | 1 << 1 | 1 << 0, 1 << 2 | 1 <
      +                          < 3 | 1 << 5 | 1 << 6 | 1 << 1 | 1 << 0};;./7seg.h: 39:     PORTB = displayPattern[value
      +                          ];
   422     0125  0827               	movf	writeDisplay@value,w
   423     0126  3E01               	addlw	low ((writeDisplay@displayPattern-__stringbase)| (0+32768))
   424     0127  0084               	movwf	4
   425     0128  2138               	fcall	stringdir
   426     0129  0086               	movwf	6	;volatile
   427     012A                     l1053:
   428                           
   429                           ;./7seg.h: 40:     PORTB |= display << 4;
   430     012A  0824               	movf	writeDisplay@display,w	;volatile
   431     012B  00A5               	movwf	??_writeDisplay
   432     012C  3003               	movlw	3
   433     012D                     u535:
   434     012D  1003               	clrc
   435     012E  0DA5               	rlf	??_writeDisplay,f
   436     012F  3EFF               	addlw	-1
   437     0130  1D03               	skipz
   438     0131  292D               	goto	u535
   439     0132  1003               	clrc
   440     0133  0D25               	rlf	??_writeDisplay,w
   441     0134  00A6               	movwf	??_writeDisplay+1
   442     0135  0826               	movf	??_writeDisplay+1,w
   443     0136  0486               	iorwf	6,f	;volatile
   444     0137                     l25:
   445     0137  0008               	return
   446     0138                     __end_of_writeDisplay:
   447                           
   448                           	psect	text2
   449     007E                     __ptext2:	
   450 ;; *************** function ___awmod *****************
   451 ;; Defined at:
   452 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
   453 ;; Parameters:    Size  Location     Type
   454 ;;  divisor         2    3[COMMON] int 
   455 ;;  dividend        2    5[COMMON] int 
   456 ;; Auto vars:     Size  Location     Type
   457 ;;  sign            1    1[BANK0 ] unsigned char 
   458 ;;  counter         1    0[BANK0 ] unsigned char 
   459 ;; Return value:  Size  Location     Type
   460 ;;                  2    3[COMMON] int 
   461 ;; Registers used:
   462 ;;		wreg, status,2, status,0
   463 ;; Tracked objects:
   464 ;;		On entry : 0/0
   465 ;;		On exit  : 0/0
   466 ;;		Unchanged: 0/0
   467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   468 ;;      Params:         4       0       0       0
   469 ;;      Locals:         0       2       0       0
   470 ;;      Temps:          1       0       0       0
   471 ;;      Totals:         5       2       0       0
   472 ;;Total ram usage:        7 bytes
   473 ;; Hardware stack levels used: 1
   474 ;; Hardware stack levels required when called: 1
   475 ;; This function calls:
   476 ;;		Nothing
   477 ;; This function is called by:
   478 ;;		_main
   479 ;; This function uses a non-reentrant model
   480 ;;
   481                           
   482     007E                     ___awmod:	
   483                           ;psect for function ___awmod
   484                           
   485     007E                     l1055:	
   486                           ;incstack = 0
   487                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   488                           
   489     007E  1283               	bcf	3,5	;RP0=0, select bank0
   490     007F  1303               	bcf	3,6	;RP1=0, select bank0
   491     0080  01A1               	clrf	___awmod@sign
   492     0081                     l1057:
   493     0081  1FF6               	btfss	___awmod@dividend+1,7
   494     0082  2884               	goto	u541
   495     0083  2885               	goto	u540
   496     0084                     u541:
   497     0084  288C               	goto	l1063
   498     0085                     u540:
   499     0085                     l1059:
   500     0085  09F5               	comf	___awmod@dividend,f
   501     0086  09F6               	comf	___awmod@dividend+1,f
   502     0087  0AF5               	incf	___awmod@dividend,f
   503     0088  1903               	skipnz
   504     0089  0AF6               	incf	___awmod@dividend+1,f
   505     008A                     l1061:
   506     008A  01A1               	clrf	___awmod@sign
   507     008B  0AA1               	incf	___awmod@sign,f
   508     008C                     l1063:
   509     008C  1FF4               	btfss	___awmod@divisor+1,7
   510     008D  288F               	goto	u551
   511     008E  2890               	goto	u550
   512     008F                     u551:
   513     008F  2895               	goto	l1067
   514     0090                     u550:
   515     0090                     l1065:
   516     0090  09F3               	comf	___awmod@divisor,f
   517     0091  09F4               	comf	___awmod@divisor+1,f
   518     0092  0AF3               	incf	___awmod@divisor,f
   519     0093  1903               	skipnz
   520     0094  0AF4               	incf	___awmod@divisor+1,f
   521     0095                     l1067:
   522     0095  0873               	movf	___awmod@divisor,w
   523     0096  0474               	iorwf	___awmod@divisor+1,w
   524     0097  1903               	btfsc	3,2
   525     0098  289A               	goto	u561
   526     0099  289B               	goto	u560
   527     009A                     u561:
   528     009A  28CA               	goto	l1085
   529     009B                     u560:
   530     009B                     l1069:
   531     009B  01A0               	clrf	___awmod@counter
   532     009C  0AA0               	incf	___awmod@counter,f
   533     009D  28A9               	goto	l1075
   534     009E                     l1071:
   535     009E  3001               	movlw	1
   536     009F                     u575:
   537     009F  1003               	clrc
   538     00A0  0DF3               	rlf	___awmod@divisor,f
   539     00A1  0DF4               	rlf	___awmod@divisor+1,f
   540     00A2  3EFF               	addlw	-1
   541     00A3  1D03               	skipz
   542     00A4  289F               	goto	u575
   543     00A5                     l1073:
   544     00A5  3001               	movlw	1
   545     00A6  00F7               	movwf	??___awmod
   546     00A7  0877               	movf	??___awmod,w
   547     00A8  07A0               	addwf	___awmod@counter,f
   548     00A9                     l1075:
   549     00A9  1FF4               	btfss	___awmod@divisor+1,7
   550     00AA  28AC               	goto	u581
   551     00AB  28AD               	goto	u580
   552     00AC                     u581:
   553     00AC  289E               	goto	l1071
   554     00AD                     u580:
   555     00AD                     l1077:
   556     00AD  0874               	movf	___awmod@divisor+1,w
   557     00AE  0276               	subwf	___awmod@dividend+1,w
   558     00AF  1D03               	skipz
   559     00B0  28B3               	goto	u595
   560     00B1  0873               	movf	___awmod@divisor,w
   561     00B2  0275               	subwf	___awmod@dividend,w
   562     00B3                     u595:
   563     00B3  1C03               	skipc
   564     00B4  28B6               	goto	u591
   565     00B5  28B7               	goto	u590
   566     00B6                     u591:
   567     00B6  28BD               	goto	l1081
   568     00B7                     u590:
   569     00B7                     l1079:
   570     00B7  0873               	movf	___awmod@divisor,w
   571     00B8  02F5               	subwf	___awmod@dividend,f
   572     00B9  0874               	movf	___awmod@divisor+1,w
   573     00BA  1C03               	skipc
   574     00BB  03F6               	decf	___awmod@dividend+1,f
   575     00BC  02F6               	subwf	___awmod@dividend+1,f
   576     00BD                     l1081:
   577     00BD  3001               	movlw	1
   578     00BE                     u605:
   579     00BE  1003               	clrc
   580     00BF  0CF4               	rrf	___awmod@divisor+1,f
   581     00C0  0CF3               	rrf	___awmod@divisor,f
   582     00C1  3EFF               	addlw	-1
   583     00C2  1D03               	skipz
   584     00C3  28BE               	goto	u605
   585     00C4                     l1083:
   586     00C4  3001               	movlw	1
   587     00C5  02A0               	subwf	___awmod@counter,f
   588     00C6  1D03               	btfss	3,2
   589     00C7  28C9               	goto	u611
   590     00C8  28CA               	goto	u610
   591     00C9                     u611:
   592     00C9  28AD               	goto	l1077
   593     00CA                     u610:
   594     00CA                     l1085:
   595     00CA  0821               	movf	___awmod@sign,w
   596     00CB  1903               	btfsc	3,2
   597     00CC  28CE               	goto	u621
   598     00CD  28CF               	goto	u620
   599     00CE                     u621:
   600     00CE  28D4               	goto	l1089
   601     00CF                     u620:
   602     00CF                     l1087:
   603     00CF  09F5               	comf	___awmod@dividend,f
   604     00D0  09F6               	comf	___awmod@dividend+1,f
   605     00D1  0AF5               	incf	___awmod@dividend,f
   606     00D2  1903               	skipnz
   607     00D3  0AF6               	incf	___awmod@dividend+1,f
   608     00D4                     l1089:
   609     00D4  0876               	movf	___awmod@dividend+1,w
   610     00D5  00F4               	movwf	?___awmod+1
   611     00D6  0875               	movf	___awmod@dividend,w
   612     00D7  00F3               	movwf	?___awmod
   613     00D8                     l319:
   614     00D8  0008               	return
   615     00D9                     __end_of___awmod:
   616                           
   617                           	psect	text3
   618     0015                     __ptext3:	
   619 ;; *************** function ___awdiv *****************
   620 ;; Defined at:
   621 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;  divisor         2    3[COMMON] int 
   624 ;;  dividend        2    5[COMMON] int 
   625 ;; Auto vars:     Size  Location     Type
   626 ;;  quotient        2    2[BANK0 ] int 
   627 ;;  sign            1    1[BANK0 ] unsigned char 
   628 ;;  counter         1    0[BANK0 ] unsigned char 
   629 ;; Return value:  Size  Location     Type
   630 ;;                  2    3[COMMON] int 
   631 ;; Registers used:
   632 ;;		wreg, status,2, status,0
   633 ;; Tracked objects:
   634 ;;		On entry : 0/0
   635 ;;		On exit  : 0/0
   636 ;;		Unchanged: 0/0
   637 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   638 ;;      Params:         4       0       0       0
   639 ;;      Locals:         0       4       0       0
   640 ;;      Temps:          1       0       0       0
   641 ;;      Totals:         5       4       0       0
   642 ;;Total ram usage:        9 bytes
   643 ;; Hardware stack levels used: 1
   644 ;; Hardware stack levels required when called: 1
   645 ;; This function calls:
   646 ;;		Nothing
   647 ;; This function is called by:
   648 ;;		_main
   649 ;; This function uses a non-reentrant model
   650 ;;
   651                           
   652     0015                     ___awdiv:	
   653                           ;psect for function ___awdiv
   654                           
   655     0015                     l859:	
   656                           ;incstack = 0
   657                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   658                           
   659     0015  1283               	bcf	3,5	;RP0=0, select bank0
   660     0016  1303               	bcf	3,6	;RP1=0, select bank0
   661     0017  01A1               	clrf	___awdiv@sign
   662     0018                     l861:
   663     0018  1FF4               	btfss	___awdiv@divisor+1,7
   664     0019  281B               	goto	u281
   665     001A  281C               	goto	u280
   666     001B                     u281:
   667     001B  2823               	goto	l867
   668     001C                     u280:
   669     001C                     l863:
   670     001C  09F3               	comf	___awdiv@divisor,f
   671     001D  09F4               	comf	___awdiv@divisor+1,f
   672     001E  0AF3               	incf	___awdiv@divisor,f
   673     001F  1903               	skipnz
   674     0020  0AF4               	incf	___awdiv@divisor+1,f
   675     0021                     l865:
   676     0021  01A1               	clrf	___awdiv@sign
   677     0022  0AA1               	incf	___awdiv@sign,f
   678     0023                     l867:
   679     0023  1FF6               	btfss	___awdiv@dividend+1,7
   680     0024  2826               	goto	u291
   681     0025  2827               	goto	u290
   682     0026                     u291:
   683     0026  2830               	goto	l873
   684     0027                     u290:
   685     0027                     l869:
   686     0027  09F5               	comf	___awdiv@dividend,f
   687     0028  09F6               	comf	___awdiv@dividend+1,f
   688     0029  0AF5               	incf	___awdiv@dividend,f
   689     002A  1903               	skipnz
   690     002B  0AF6               	incf	___awdiv@dividend+1,f
   691     002C                     l871:
   692     002C  3001               	movlw	1
   693     002D  00F7               	movwf	??___awdiv
   694     002E  0877               	movf	??___awdiv,w
   695     002F  06A1               	xorwf	___awdiv@sign,f
   696     0030                     l873:
   697     0030  01A2               	clrf	___awdiv@quotient
   698     0031  01A3               	clrf	___awdiv@quotient+1
   699     0032                     l875:
   700     0032  0873               	movf	___awdiv@divisor,w
   701     0033  0474               	iorwf	___awdiv@divisor+1,w
   702     0034  1903               	btfsc	3,2
   703     0035  2837               	goto	u301
   704     0036  2838               	goto	u300
   705     0037                     u301:
   706     0037  286F               	goto	l895
   707     0038                     u300:
   708     0038                     l877:
   709     0038  01A0               	clrf	___awdiv@counter
   710     0039  0AA0               	incf	___awdiv@counter,f
   711     003A  2846               	goto	l883
   712     003B                     l879:
   713     003B  3001               	movlw	1
   714     003C                     u315:
   715     003C  1003               	clrc
   716     003D  0DF3               	rlf	___awdiv@divisor,f
   717     003E  0DF4               	rlf	___awdiv@divisor+1,f
   718     003F  3EFF               	addlw	-1
   719     0040  1D03               	skipz
   720     0041  283C               	goto	u315
   721     0042                     l881:
   722     0042  3001               	movlw	1
   723     0043  00F7               	movwf	??___awdiv
   724     0044  0877               	movf	??___awdiv,w
   725     0045  07A0               	addwf	___awdiv@counter,f
   726     0046                     l883:
   727     0046  1FF4               	btfss	___awdiv@divisor+1,7
   728     0047  2849               	goto	u321
   729     0048  284A               	goto	u320
   730     0049                     u321:
   731     0049  283B               	goto	l879
   732     004A                     u320:
   733     004A                     l885:
   734     004A  3001               	movlw	1
   735     004B                     u335:
   736     004B  1003               	clrc
   737     004C  0DA2               	rlf	___awdiv@quotient,f
   738     004D  0DA3               	rlf	___awdiv@quotient+1,f
   739     004E  3EFF               	addlw	-1
   740     004F  1D03               	skipz
   741     0050  284B               	goto	u335
   742     0051  0874               	movf	___awdiv@divisor+1,w
   743     0052  0276               	subwf	___awdiv@dividend+1,w
   744     0053  1D03               	skipz
   745     0054  2857               	goto	u345
   746     0055  0873               	movf	___awdiv@divisor,w
   747     0056  0275               	subwf	___awdiv@dividend,w
   748     0057                     u345:
   749     0057  1C03               	skipc
   750     0058  285A               	goto	u341
   751     0059  285B               	goto	u340
   752     005A                     u341:
   753     005A  2862               	goto	l891
   754     005B                     u340:
   755     005B                     l887:
   756     005B  0873               	movf	___awdiv@divisor,w
   757     005C  02F5               	subwf	___awdiv@dividend,f
   758     005D  0874               	movf	___awdiv@divisor+1,w
   759     005E  1C03               	skipc
   760     005F  03F6               	decf	___awdiv@dividend+1,f
   761     0060  02F6               	subwf	___awdiv@dividend+1,f
   762     0061                     l889:
   763     0061  1422               	bsf	___awdiv@quotient,0
   764     0062                     l891:
   765     0062  3001               	movlw	1
   766     0063                     u355:
   767     0063  1003               	clrc
   768     0064  0CF4               	rrf	___awdiv@divisor+1,f
   769     0065  0CF3               	rrf	___awdiv@divisor,f
   770     0066  3EFF               	addlw	-1
   771     0067  1D03               	skipz
   772     0068  2863               	goto	u355
   773     0069                     l893:
   774     0069  3001               	movlw	1
   775     006A  02A0               	subwf	___awdiv@counter,f
   776     006B  1D03               	btfss	3,2
   777     006C  286E               	goto	u361
   778     006D  286F               	goto	u360
   779     006E                     u361:
   780     006E  284A               	goto	l885
   781     006F                     u360:
   782     006F                     l895:
   783     006F  0821               	movf	___awdiv@sign,w
   784     0070  1903               	btfsc	3,2
   785     0071  2873               	goto	u371
   786     0072  2874               	goto	u370
   787     0073                     u371:
   788     0073  2879               	goto	l899
   789     0074                     u370:
   790     0074                     l897:
   791     0074  09A2               	comf	___awdiv@quotient,f
   792     0075  09A3               	comf	___awdiv@quotient+1,f
   793     0076  0AA2               	incf	___awdiv@quotient,f
   794     0077  1903               	skipnz
   795     0078  0AA3               	incf	___awdiv@quotient+1,f
   796     0079                     l899:
   797     0079  0823               	movf	___awdiv@quotient+1,w
   798     007A  00F4               	movwf	?___awdiv+1
   799     007B  0822               	movf	___awdiv@quotient,w
   800     007C  00F3               	movwf	?___awdiv
   801     007D                     l306:
   802     007D  0008               	return
   803     007E                     __end_of___awdiv:
   804                           
   805                           	psect	text4
   806     00D9                     __ptext4:	
   807 ;; *************** function _ISR *****************
   808 ;; Defined at:
   809 ;;		line 90 in file "main.c"
   810 ;; Parameters:    Size  Location     Type
   811 ;;		None
   812 ;; Auto vars:     Size  Location     Type
   813 ;;		None
   814 ;; Return value:  Size  Location     Type
   815 ;;                  1    wreg      void 
   816 ;; Registers used:
   817 ;;		wreg, status,2, status,0
   818 ;; Tracked objects:
   819 ;;		On entry : 0/0
   820 ;;		On exit  : 0/0
   821 ;;		Unchanged: 0/0
   822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   823 ;;      Params:         0       0       0       0
   824 ;;      Locals:         0       0       0       0
   825 ;;      Temps:          3       0       0       0
   826 ;;      Totals:         3       0       0       0
   827 ;;Total ram usage:        3 bytes
   828 ;; Hardware stack levels used: 1
   829 ;; This function calls:
   830 ;;		Nothing
   831 ;; This function is called by:
   832 ;;		Interrupt level 1
   833 ;; This function uses a non-reentrant model
   834 ;;
   835                           
   836     00D9                     _ISR:	
   837                           ;psect for function _ISR
   838                           
   839     00D9                     i1l1019:
   840                           
   841                           ;main.c: 91:     if (INTCONbits.T0IF) {
   842     00D9  1D0B               	btfss	11,2	;volatile
   843     00DA  28DC               	goto	u47_21
   844     00DB  28DD               	goto	u47_20
   845     00DC                     u47_21:
   846     00DC  291B               	goto	i1l67
   847     00DD                     u47_20:
   848     00DD                     i1l1021:
   849                           
   850                           ;main.c: 92:         INTCONbits.T0IF = 0;
   851     00DD  110B               	bcf	11,2	;volatile
   852     00DE                     i1l1023:
   853                           
   854                           ;main.c: 93:         TMR0 = 6;
   855     00DE  3006               	movlw	6
   856     00DF  1283               	bcf	3,5	;RP0=0, select bank0
   857     00E0  1303               	bcf	3,6	;RP1=0, select bank0
   858     00E1  0081               	movwf	1	;volatile
   859     00E2                     i1l1025:
   860                           
   861                           ;main.c: 94:         display ^= 1;
   862     00E2  3001               	movlw	1
   863     00E3  00F0               	movwf	??_ISR
   864     00E4  0870               	movf	??_ISR,w
   865     00E5  06AB               	xorwf	_display,f
   866     00E6                     i1l1027:
   867                           
   868                           ;main.c: 95:         static unsigned char InterruptCounter;;main.c: 96:         static u
      +                          nsigned int InterruptCounter2;;main.c: 97:         InterruptCounter++;
   869     00E6  3001               	movlw	1
   870     00E7  00F0               	movwf	??_ISR
   871     00E8  0870               	movf	??_ISR,w
   872     00E9  07AA               	addwf	ISR@InterruptCounter,f
   873                           
   874                           ;main.c: 99:         if (InterruptCounter >= 50) {
   875     00EA  3032               	movlw	50
   876     00EB  022A               	subwf	ISR@InterruptCounter,w
   877     00EC  1C03               	skipc
   878     00ED  28EF               	goto	u48_21
   879     00EE  28F0               	goto	u48_20
   880     00EF                     u48_21:
   881     00EF  2900               	goto	i1l1039
   882     00F0                     u48_20:
   883     00F0                     i1l1029:
   884                           
   885                           ;main.c: 101:             InterruptCounter = 0;
   886     00F0  01AA               	clrf	ISR@InterruptCounter
   887     00F1                     i1l1031:
   888                           
   889                           ;main.c: 103:             if (statoConteggio)conteggio--;
   890     00F1  0879               	movf	_statoConteggio,w
   891     00F2  1903               	btfsc	3,2
   892     00F3  28F5               	goto	u49_21
   893     00F4  28F6               	goto	u49_20
   894     00F5                     u49_21:
   895     00F5  28F8               	goto	i1l63
   896     00F6                     u49_20:
   897     00F6                     i1l1033:
   898     00F6  3001               	movlw	1
   899     00F7  02FA               	subwf	_conteggio,f
   900     00F8                     i1l63:
   901                           
   902                           ;main.c: 104:             if (conteggio <= 0) {
   903     00F8  087A               	movf	_conteggio,w
   904     00F9  1D03               	btfss	3,2
   905     00FA  28FC               	goto	u50_21
   906     00FB  28FD               	goto	u50_20
   907     00FC                     u50_21:
   908     00FC  2900               	goto	i1l1039
   909     00FD                     u50_20:
   910     00FD                     i1l1035:
   911                           
   912                           ;main.c: 105:                 statoConteggio = 0;
   913     00FD  01F9               	clrf	_statoConteggio
   914     00FE                     i1l1037:
   915                           
   916                           ;main.c: 106:                 conteggioFinito = 1;
   917     00FE  01F8               	clrf	_conteggioFinito
   918     00FF  0AF8               	incf	_conteggioFinito,f
   919     0100                     i1l1039:
   920                           
   921                           ;main.c: 110:         if (conteggioFinito) {
   922     0100  0878               	movf	_conteggioFinito,w
   923     0101  1903               	btfsc	3,2
   924     0102  2904               	goto	u51_21
   925     0103  2905               	goto	u51_20
   926     0104                     u51_21:
   927     0104  291B               	goto	i1l67
   928     0105                     u51_20:
   929     0105                     i1l1041:
   930                           
   931                           ;main.c: 111:             InterruptCounter2++;
   932     0105  3001               	movlw	1
   933     0106  07A8               	addwf	ISR@InterruptCounter2,f
   934     0107  1803               	skipnc
   935     0108  0AA9               	incf	ISR@InterruptCounter2+1,f
   936     0109  3000               	movlw	0
   937     010A  07A9               	addwf	ISR@InterruptCounter2+1,f
   938     010B                     i1l1043:
   939                           
   940                           ;main.c: 112:             PORTAbits.RA0 = 1;
   941     010B  1405               	bsf	5,0	;volatile
   942                           
   943                           ;main.c: 113:             if (InterruptCounter2 >= 1250) {
   944     010C  3004               	movlw	4
   945     010D  0229               	subwf	ISR@InterruptCounter2+1,w
   946     010E  30E2               	movlw	226
   947     010F  1903               	skipnz
   948     0110  0228               	subwf	ISR@InterruptCounter2,w
   949     0111  1C03               	skipc
   950     0112  2914               	goto	u52_21
   951     0113  2915               	goto	u52_20
   952     0114                     u52_21:
   953     0114  291B               	goto	i1l67
   954     0115                     u52_20:
   955     0115                     i1l1045:
   956                           
   957                           ;main.c: 114:                 InterruptCounter2 = 0;
   958     0115  01A8               	clrf	ISR@InterruptCounter2
   959     0116  01A9               	clrf	ISR@InterruptCounter2+1
   960                           
   961                           ;main.c: 115:                 conteggioFinito = 0;
   962     0117  01F8               	clrf	_conteggioFinito
   963     0118                     i1l1047:
   964                           
   965                           ;main.c: 116:                 PORTAbits.RA0 = 0;
   966     0118  1005               	bcf	5,0	;volatile
   967     0119                     i1l1049:
   968                           
   969                           ;main.c: 117:                 conteggio = 99;
   970     0119  3063               	movlw	99
   971     011A  00FA               	movwf	_conteggio
   972     011B                     i1l67:
   973     011B  0872               	movf	??_ISR+2,w
   974     011C  008A               	movwf	10
   975     011D  0E71               	swapf	??_ISR+1,w
   976     011E  0083               	movwf	3
   977     011F  0EFE               	swapf	btemp,f
   978     0120  0E7E               	swapf	btemp,w
   979     0121  0009               	retfie
   980     0122                     __end_of_ISR:
   981     007E                     btemp	set	126	;btemp
   982     007E                     wtemp0	set	126
   983                           
   984                           	psect	intentry
   985     0004                     __pintentry:	
   986                           ;incstack = 0
   987                           ; Regs used in _ISR: [wreg+status,2+status,0]
   988                           
   989     0004                     interrupt_function:
   990     007E                     saved_w	set	btemp
   991     0004  00FE               	movwf	btemp
   992     0005  0E03               	swapf	3,w
   993     0006  00F1               	movwf	??_ISR+1
   994     0007  080A               	movf	10,w
   995     0008  00F2               	movwf	??_ISR+2
   996     0009  28D9               	ljmp	_ISR
   997                           
   998                           	psect	idloc
   999                           
  1000                           ;Config register IDLOC0 @ 0x2000
  1001                           ;	unspecified, using default values
  1002     2000                     	org	8192
  1003     2000  3FFF               	dw	16383
  1004                           
  1005                           ;Config register IDLOC1 @ 0x2001
  1006                           ;	unspecified, using default values
  1007     2001                     	org	8193
  1008     2001  3FFF               	dw	16383
  1009                           
  1010                           ;Config register IDLOC2 @ 0x2002
  1011                           ;	unspecified, using default values
  1012     2002                     	org	8194
  1013     2002  3FFF               	dw	16383
  1014                           
  1015                           ;Config register IDLOC3 @ 0x2003
  1016                           ;	unspecified, using default values
  1017     2003                     	org	8195
  1018     2003  3FFF               	dw	16383
  1019                           
  1020                           	psect	config
  1021                           
  1022                           ;Config register CONFIG @ 0x2007
  1023                           ;	Oscillator Selection bits
  1024                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1025                           ;	Watchdog Timer Enable bit
  1026                           ;	WDTE = OFF, WDT disabled
  1027                           ;	Power-up Timer Enable bit
  1028                           ;	PWRTE = ON, PWRT enabled
  1029                           ;	RA5/MCLR/VPP Pin Function Select bit
  1030                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1031                           ;	Brown-out Detect Enable bit
  1032                           ;	BOREN = ON, BOD enabled
  1033                           ;	Low-Voltage Programming Enable bit
  1034                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1035                           ;	Data EE Memory Code Protection bit
  1036                           ;	CPD = OFF, Data memory code protection off
  1037                           ;	Flash Program Memory Code Protection bit
  1038                           ;	CP = OFF, Code protection off
  1039     2007                     	org	8199
  1040     2007  3F62               	dw	16226

Data Sizes:
    Strings     0
    Constant    10
    Data        1
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80      8      12
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___awdiv
    _main->___awmod
    _writeDisplay->___awdiv
    _writeDisplay->___awmod

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_writeDisplay
    _writeDisplay->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1616
                            ___awdiv
                            ___awmod
                       _writeDisplay
 ---------------------------------------------------------------------------------
 (2) _writeDisplay                                         4     3      1     242
                                              4 BANK0      4     3      1
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     613
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     452
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   ___awdiv
   ___awmod
   _writeDisplay
     ___awdiv (ARG)
     ___awmod (ARG)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      8       C       3       15.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      17      10        0.0%
ABS                  0      0      17       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Tue Jan 17 16:39:11 2023

                                 pc 0002                                  l25 0137  
                      ___awdiv@sign 0021                                  fsr 0004  
                               l306 007D                                 l319 00D8  
                               l861 0018                                 l871 002C  
                               l863 001C                                 l881 0042  
                               l873 0030                                 l865 0021  
                               l891 0062                                 l883 0046  
                               l875 0032                                 l867 0023  
                               l859 0015                                 l893 0069  
                               l885 004A                                 l877 0038  
                               l869 0027                                 l887 005B  
                               l879 003B                                 l895 006F  
                               l897 0074                                 l889 0061  
                               l899 0079                                 u300 0038  
                               u301 0037                                 u320 004A  
                               u321 0049                                 u315 003C  
                               u340 005B                                 u341 005A  
                               u335 004B                                 u360 006F  
                               u280 001C                                 u361 006E  
                               u345 0057                                 u281 001B  
                               u370 0074                                 u290 0027  
                               u610 00CA                                 u371 0073  
                               u355 0063                                 u291 0026  
                               u611 00C9                                 u620 00CF  
                               u540 0085                                 _ISR 00D9  
                               u621 00CE                                 u605 00BE  
                               u541 0084                                 u550 0090  
                               u551 008F                                 u535 012D  
                               u560 009B                                 u561 009A  
                               u580 00AD                                 u581 00AC  
                               u590 00B7                                 u591 00B6  
                               u575 009F                                 u595 00B3  
                               fsr0 0004                        ___awmod@sign 0021  
                              ?_ISR 0070                                l1051 0125  
                              l1061 008A                                l1053 012A  
                              l1071 009E                                l1063 008C  
                              l1055 007E                                l1081 00BD  
                              l1073 00A5                                l1065 0090  
                              l1057 0081                                l1083 00C4  
                              l1075 00A9                                l1067 0095  
                              l1059 0085                                l1077 00AD  
                              l1069 009B                                l1085 00CA  
                              l1093 0148                                l1087 00CF  
                              l1079 00B7                                l1095 014E  
                              l1089 00D4                                l1097 014F  
                              l1099 0151                                i1l63 00F8  
                              i1l67 011B                                _TMR0 0001  
                              _main 0148                                btemp 007E  
                              start 000A                               ??_ISR 0070  
                             ?_main 0070                     __end_of___awdiv 007E  
                   __end_of___awmod 00D9                     ___awdiv@divisor 0073  
                   ___awdiv@counter 0020                               u50_20 00FD  
                             u50_21 00FC                               u51_20 0105  
                             u51_21 0104                               _PORTA 0005  
                             _PORTB 0006                               u52_20 0115  
                             u52_21 0114                               u47_20 00DD  
                             u47_21 00DC                               u48_20 00F0  
                             u48_21 00EF                               u49_20 00F6  
                             u49_21 00F5                               _TRISA 0085  
                             _TRISB 0086                      _statoConteggio 0079  
                             pclath 000A                               status 0003  
                             wtemp0 007E                     _conteggioFinito 0078  
                   __initialization 000B                        __end_of_main 0155  
                            ??_main 0078                        _writeDisplay 0122  
                  ___awdiv@dividend 0075                              i1l1021 00DD  
                            i1l1031 00F1                              i1l1023 00DE  
                            i1l1041 0105                              i1l1033 00F6  
                            i1l1025 00E2                              i1l1043 010B  
                            i1l1035 00FD                              i1l1027 00E6  
                            i1l1019 00D9                              i1l1045 0115  
                            i1l1037 00FE                              i1l1029 00F0  
                            i1l1047 0118                              i1l1039 0100  
                            i1l1049 0119                              _INTCON 000B  
                         ??___awdiv 0077                           ??___awmod 0077  
                  ___awdiv@quotient 0022                     ___awmod@divisor 0073  
                   ___awmod@counter 0020                        __pdataCOMMON 007A  
                            saved_w 007E             __end_of__initialization 0013  
                 writeDisplay@value 0027                      __pcstackCOMMON 0070  
                        __pbssBANK0 0028                          __pmaintext 0148  
                        __pintentry 0004  __end_ofwriteDisplay@displayPattern 0148  
        writeDisplay@displayPattern 013E                          __stringtab 0138  
                           ___awdiv 0015                             ___awmod 007E  
                           __ptext1 0122                             __ptext2 007E  
                           __ptext3 0015                             __ptext4 00D9  
                           _display 002B                    ___awmod@dividend 0075  
              end_of_initialization 0013                           _PORTAbits 0005  
                     __pidataCOMMON 0155                 start_initialization 000B  
                       __end_of_ISR 0122                         __pbssCOMMON 0078  
                         ___latbits 0000                       __pcstackBANK0 0020  
                          ?___awdiv 0073                            ?___awmod 0073  
                         __pstrings 0138                           _conteggio 007A  
                     ?_writeDisplay 0024                   interrupt_function 0004  
                       __stringbase 013D                      ??_writeDisplay 0025  
                __end_of__stringtab 013E                ISR@InterruptCounter2 0028  
                        _INTCONbits 000B                            intlevel1 0000  
                         stringcode 0138                __end_of_writeDisplay 0138  
               ISR@InterruptCounter 002A                          _OPTION_REG 0081  
                          stringdir 0138                            stringtab 0138  
               writeDisplay@display 0024  
