

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jan 18 21:33:38 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F628A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,split=1,delta=2
    12                           	psect	text1,local,class=CODE,merge=1,delta=2,group=2
    13                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    14                           	psect	text3,local,class=CODE,merge=1,delta=2
    15                           	psect	intentry,global,class=CODE,delta=2
    16                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    17                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    18                           	dabs	1,0x7E,2
    19  0000                     
    20                           ; Version 2.40
    21                           ; Generated 17/11/2021 GMT
    22                           ; 
    23                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    24                           ; All rights reserved.
    25                           ; 
    26                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    27                           ; 
    28                           ; Redistribution and use in source and binary forms, with or without modification, are
    29                           ; permitted provided that the following conditions are met:
    30                           ; 
    31                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    32                           ;        conditions and the following disclaimer.
    33                           ; 
    34                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    35                           ;        of conditions and the following disclaimer in the documentation and/or other
    36                           ;        materials provided with the distribution. Publication is not required when
    37                           ;        this file is used in an embedded application.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F628A Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  000A                     	;# 
    63  000B                     	;# 
    64  000C                     	;# 
    65  000E                     	;# 
    66  000E                     	;# 
    67  000F                     	;# 
    68  0010                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0015                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0017                     	;# 
    75  0018                     	;# 
    76  0019                     	;# 
    77  001A                     	;# 
    78  001F                     	;# 
    79  0081                     	;# 
    80  0085                     	;# 
    81  0086                     	;# 
    82  008C                     	;# 
    83  008E                     	;# 
    84  0092                     	;# 
    85  0098                     	;# 
    86  0099                     	;# 
    87  009A                     	;# 
    88  009B                     	;# 
    89  009C                     	;# 
    90  009D                     	;# 
    91  009F                     	;# 
    92  0000                     	;# 
    93  0001                     	;# 
    94  0002                     	;# 
    95  0003                     	;# 
    96  0004                     	;# 
    97  0005                     	;# 
    98  0006                     	;# 
    99  000A                     	;# 
   100  000B                     	;# 
   101  000C                     	;# 
   102  000E                     	;# 
   103  000E                     	;# 
   104  000F                     	;# 
   105  0010                     	;# 
   106  0011                     	;# 
   107  0012                     	;# 
   108  0015                     	;# 
   109  0015                     	;# 
   110  0016                     	;# 
   111  0017                     	;# 
   112  0018                     	;# 
   113  0019                     	;# 
   114  001A                     	;# 
   115  001F                     	;# 
   116  0081                     	;# 
   117  0085                     	;# 
   118  0086                     	;# 
   119  008C                     	;# 
   120  008E                     	;# 
   121  0092                     	;# 
   122  0098                     	;# 
   123  0099                     	;# 
   124  009A                     	;# 
   125  009B                     	;# 
   126  009C                     	;# 
   127  009D                     	;# 
   128  009F                     	;# 
   129                           
   130                           	psect	idataBANK0
   131  0000'                    __pidataBANK0:
   132                           
   133                           ;initializer for _conteggio
   134  0000' 3463               	retlw	99
   135  0005                     _PORTAbits	set	5
   136  0001                     _TMR0	set	1
   137  000B                     _INTCONbits	set	11
   138  0005                     _PORTA	set	5
   139  000B                     _INTCON	set	11
   140  0085                     _TRISA	set	133
   141  0086                     _TRISB	set	134
   142  0081                     _OPTION_REG	set	129
   143                           
   144                           	psect	cinit
   145  0000'                    start_initialization:	
   146                           ; #config settings
   147                           
   148  0000'                    __initialization:
   149                           
   150                           ; Initialize objects allocated to BANK0
   151  0000' 2000'              	fcall	__pidataBANK0	;fetch initializer
   152  0001' 0080'              	movwf	__pdataBANK0& (0+127)
   153                           
   154                           ; Clear objects allocated to BANK0
   155  0002' 0180'              	clrf	__pbssBANK0& (0+127)
   156  0003' 0180'              	clrf	(__pbssBANK0+1)& (0+127)
   157  0004' 0180'              	clrf	(__pbssBANK0+2)& (0+127)
   158                           
   159                           ; Clear objects allocated to COMMON
   160  0005' 0180'              	clrf	__pbssCOMMON& (0+127)
   161  0006' 0180'              	clrf	(__pbssCOMMON+1)& (0+127)
   162  0007' 0180'              	clrf	(__pbssCOMMON+2)& (0+127)
   163  0008'                    end_of_initialization:	
   164                           ;End of C runtime variable initialization code
   165                           
   166  0008'                    __end_of__initialization:
   167  0008' 0183               	clrf	3
   168  0009' 2800'              	ljmp	_main	;jump to C main() function
   169                           
   170                           	psect	bssCOMMON
   171  0000'                    __pbssCOMMON:
   172  0000'                    ISR@InterruptCounter2:
   173  0000'                    	ds	2
   174  0002'                    ISR@InterruptCounter:
   175  0002'                    	ds	1
   176                           
   177                           	psect	bssBANK0
   178  0000'                    __pbssBANK0:
   179  0000'                    _conteggioFinito:
   180  0000'                    	ds	1
   181  0001'                    _statoConteggio:
   182  0001'                    	ds	1
   183  0002'                    _display:
   184  0002'                    	ds	1
   185                           
   186                           	psect	dataBANK0
   187  0000'                    __pdataBANK0:
   188  0000'                    _conteggio:
   189  0000'                    	ds	1
   190                           
   191                           	psect	cstackCOMMON
   192  0000'                    __pcstackCOMMON:
   193  0000'                    ?_SevenSeg_Write:
   194  0000'                    ??_SevenSeg_Write:	
   195                           ; 1 bytes @ 0x0
   196                           
   197  0000'                    ??_SevenSeg_Write_Write:	
   198                           ; 1 bytes @ 0x0
   199                           
   200  0000'                    ?_main:	
   201                           ; 1 bytes @ 0x0
   202                           
   203  0000'                    ?_ISR:	
   204                           ; 1 bytes @ 0x0
   205                           
   206  0000'                    ??_ISR:	
   207                           ; 1 bytes @ 0x0
   208                           
   209  0000'                    ?_SevenSeg_Write_Write:	
   210                           ; 1 bytes @ 0x0
   211                           
   212  0000'                    _SevenSeg_Write$1:	
   213                           ; 2 bytes @ 0x0
   214                           
   215                           
   216                           ; 1 bytes @ 0x0
   217  0000'                    	ds	3
   218  0003'                    ?___awdiv:
   219  0003'                    ?___awmod:	
   220                           ; 2 bytes @ 0x3
   221                           
   222  0003'                    ___awdiv@divisor:	
   223                           ; 2 bytes @ 0x3
   224                           
   225  0003'                    ___awmod@divisor:	
   226                           ; 2 bytes @ 0x3
   227                           
   228                           
   229                           ; 2 bytes @ 0x3
   230  0003'                    	ds	2
   231  0005'                    ___awdiv@dividend:
   232  0005'                    ___awmod@dividend:	
   233                           ; 2 bytes @ 0x5
   234                           
   235                           
   236                           ; 2 bytes @ 0x5
   237  0005'                    	ds	2
   238  0007'                    ??___awdiv:
   239  0007'                    ??___awmod:	
   240                           ; 1 bytes @ 0x7
   241                           
   242                           
   243                           ; 1 bytes @ 0x7
   244  0007'                    	ds	1
   245                           
   246                           	psect	cstackBANK0
   247  0000'                    __pcstackBANK0:
   248  0000'                    ___awdiv@counter:
   249  0000'                    ___awmod@counter:	
   250                           ; 1 bytes @ 0x0
   251                           
   252                           
   253                           ; 1 bytes @ 0x0
   254  0000'                    	ds	1
   255  0001'                    ___awdiv@sign:
   256  0001'                    ___awmod@sign:	
   257                           ; 1 bytes @ 0x1
   258                           
   259                           
   260                           ; 1 bytes @ 0x1
   261  0001'                    	ds	1
   262  0002'                    ___awdiv@quotient:
   263                           
   264                           ; 2 bytes @ 0x2
   265  0002'                    	ds	2
   266  0004'                    ??_main:
   267                           
   268                           ; 1 bytes @ 0x4
   269  0004'                    	ds	2
   270  0006'                    main@old_button:
   271                           
   272                           ; 1 bytes @ 0x6
   273  0006'                    	ds	1
   274  0007'                    main@button:
   275                           
   276                           ; 1 bytes @ 0x7
   277  0007'                    	ds	1
   278                           
   279                           	psect	maintext
   280  0000'                    __pmaintext:	
   281 ;;
   282 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   283 ;;
   284 ;; *************** function _main *****************
   285 ;; Defined at:
   286 ;;		line 26 in file "main.c"
   287 ;; Parameters:    Size  Location     Type
   288 ;;		None
   289 ;; Auto vars:     Size  Location     Type
   290 ;;  button          1    7[BANK0 ] unsigned char 
   291 ;;  old_button      1    6[BANK0 ] unsigned char 
   292 ;; Return value:  Size  Location     Type
   293 ;;                  1    wreg      void 
   294 ;; Registers used:
   295 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   296 ;; Tracked objects:
   297 ;;		On entry : B00/0
   298 ;;		On exit  : 0/0
   299 ;;		Unchanged: 0/0
   300 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   301 ;;      Params:         0       0       0       0
   302 ;;      Locals:         0       2       0       0
   303 ;;      Temps:          0       2       0       0
   304 ;;      Totals:         0       4       0       0
   305 ;;Total ram usage:        4 bytes
   306 ;; Hardware stack levels required when called: 2
   307 ;; This function calls:
   308 ;;		_SevenSeg_Write
   309 ;;		_SevenSeg_Write_Write
   310 ;;		___awdiv
   311 ;;		___awmod
   312 ;; This function is called by:
   313 ;;		Startup code after reset
   314 ;; This function uses a non-reentrant model
   315 ;;
   316                           
   317  0000'                    _main:	
   318                           ;psect for function _main
   319                           
   320  0000'                    l1074:	
   321                           ;incstack = 0
   322                           ; Regs used in _main: [allreg]
   323                           
   324                           
   325                           ;main.c: 27:     INTCON = 0xA0;
   326  0000' 30A0               	movlw	160
   327  0001' 008B               	movwf	11	;volatile
   328                           
   329                           ;main.c: 28:     OPTION_REG = 0x84;
   330  0002' 3084               	movlw	132
   331  0003' 1683               	bsf	3,5	;RP0=1, select bank1
   332  0004' 1303               	bcf	3,6	;RP1=0, select bank1
   333  0005' 0081               	movwf	1	;volatile
   334  0006'                    l1076:
   335                           
   336                           ;main.c: 29:     TRISB = 0x00;
   337  0006' 0186               	clrf	6	;volatile
   338  0007'                    l1078:
   339                           
   340                           ;main.c: 30:     TRISA = 0x0E;
   341  0007' 300E               	movlw	14
   342  0008' 0085               	movwf	5	;volatile
   343  0009'                    l1080:
   344                           
   345                           ;main.c: 35:         if (!display) {
   346  0009' 1283               	bcf	3,5	;RP0=0, select bank0
   347  000A' 0802'              	movf	_display,w
   348  000B' 1D03               	btfss	3,2
   349  000C' 280E'              	goto	u901
   350  000D' 280F'              	goto	u900
   351  000E'                    u901:
   352  000E' 281F'              	goto	l1084
   353  000F'                    u900:
   354  000F'                    l1082:
   355                           
   356                           ;main.c: 36:             SevenSeg_Write(conteggio / 10, 0);
   357  000F' 0180'              	clrf	_SevenSeg_Write$1
   358  0010' 300A               	movlw	10
   359  0011' 0083'              	movwf	___awdiv@divisor
   360  0012' 3000               	movlw	0
   361  0013' 0084'              	movwf	___awdiv@divisor+1
   362  0014' 0800'              	movf	_conteggio,w
   363  0015' 0084'              	movwf	??_main
   364  0016' 0185'              	clrf	??_main+1
   365  0017' 0804'              	movf	??_main,w
   366  0018' 0085'              	movwf	___awdiv@dividend
   367  0019' 0805'              	movf	??_main+1,w
   368  001A' 0086'              	movwf	___awdiv@dividend+1
   369  001B' 2000'              	fcall	___awdiv
   370  001C' 0803'              	movf	?___awdiv,w
   371  001D' 2000'              	fcall	_SevenSeg_Write
   372                           
   373                           ;main.c: 38:         } else {
   374  001E' 2834'              	goto	l1086
   375  001F'                    l1084:
   376                           
   377                           ;main.c: 39:             SevenSeg_Write_Write(conteggio % 10, 1);
   378  001F' 300A               	movlw	10
   379  0020' 0083'              	movwf	___awmod@divisor
   380  0021' 3000               	movlw	0
   381  0022' 0084'              	movwf	___awmod@divisor+1
   382  0023' 0800'              	movf	_conteggio,w
   383  0024' 0084'              	movwf	??_main
   384  0025' 0185'              	clrf	??_main+1
   385  0026' 0804'              	movf	??_main,w
   386  0027' 0085'              	movwf	___awmod@dividend
   387  0028' 0805'              	movf	??_main+1,w
   388  0029' 0086'              	movwf	___awmod@dividend+1
   389  002A' 2000'              	fcall	___awmod
   390  002B' 0804'              	movf	?___awmod+1,w
   391  002C' 0081'              	movwf	?_SevenSeg_Write_Write+1
   392  002D' 0803'              	movf	?___awmod,w
   393  002E' 0080'              	movwf	?_SevenSeg_Write_Write
   394  002F' 3001               	movlw	1
   395  0030' 0082'              	movwf	?_SevenSeg_Write_Write+2
   396  0031' 3000               	movlw	0
   397  0032' 0083'              	movwf	?_SevenSeg_Write_Write+3
   398  0033' 2000'              	fcall	_SevenSeg_Write_Write
   399  0034'                    l1086:
   400                           
   401                           ;main.c: 42:         if (conteggioFinito) continue;
   402  0034' 1283               	bcf	3,5	;RP0=0, select bank0
   403  0035' 1303               	bcf	3,6	;RP1=0, select bank0
   404  0036' 0800'              	movf	_conteggioFinito,w
   405  0037' 1903               	btfsc	3,2
   406  0038' 283A'              	goto	u911
   407  0039' 283B'              	goto	u910
   408  003A'                    u911:
   409  003A' 283C'              	goto	l1090
   410  003B'                    u910:
   411  003B' 2809'              	goto	l1080
   412  003C'                    l1090:
   413                           
   414                           ;main.c: 44:         button = PORTA & 0x02;
   415  003C' 0805               	movf	5,w	;volatile
   416  003D' 3902               	andlw	2
   417  003E' 0087'              	movwf	main@button
   418  003F'                    l1092:
   419                           
   420                           ;main.c: 45:         if (!button) {
   421  003F' 0807'              	movf	main@button,w
   422  0040' 1D03               	btfss	3,2
   423  0041' 2843'              	goto	u921
   424  0042' 2844'              	goto	u920
   425  0043'                    u921:
   426  0043' 2864'              	goto	l1106
   427  0044'                    u920:
   428  0044'                    l1094:
   429                           
   430                           ;main.c: 46:             _delay((unsigned long)((20)*(8000000/4000.0)));
   431  0044' 3034               	movlw	52
   432  0045' 1283               	bcf	3,5	;RP0=0, select bank0
   433  0046' 1303               	bcf	3,6	;RP1=0, select bank0
   434  0047' 0085'              	movwf	??_main+1
   435  0048' 30F1               	movlw	241
   436  0049' 0084'              	movwf	??_main
   437  004A'                    u1057:
   438  004A' 0B84'              	decfsz	??_main,f
   439  004B' 284A'              	goto	u1057
   440  004C' 0B85'              	decfsz	??_main+1,f
   441  004D' 284A'              	goto	u1057
   442  004E' 0000               	nop
   443  004F'                    l1096:
   444                           
   445                           ;main.c: 47:             button = PORTA & 0x02;
   446  004F' 1283               	bcf	3,5	;RP0=0, select bank0
   447  0050' 1303               	bcf	3,6	;RP1=0, select bank0
   448  0051' 0805               	movf	5,w	;volatile
   449  0052' 3902               	andlw	2
   450  0053' 0087'              	movwf	main@button
   451  0054'                    l1098:
   452                           
   453                           ;main.c: 48:             if (!button && old_button) {
   454  0054' 0807'              	movf	main@button,w
   455  0055' 1D03               	btfss	3,2
   456  0056' 2858'              	goto	u931
   457  0057' 2859'              	goto	u930
   458  0058'                    u931:
   459  0058' 2862'              	goto	l1104
   460  0059'                    u930:
   461  0059'                    l1100:
   462  0059' 0806'              	movf	main@old_button,w
   463  005A' 1903               	btfsc	3,2
   464  005B' 285D'              	goto	u941
   465  005C' 285E'              	goto	u940
   466  005D'                    u941:
   467  005D' 2862'              	goto	l1104
   468  005E'                    u940:
   469  005E'                    l1102:
   470                           
   471                           ;main.c: 49:                 statoConteggio ^= 1;
   472  005E' 3001               	movlw	1
   473  005F' 0084'              	movwf	??_main
   474  0060' 0804'              	movf	??_main,w
   475  0061' 0681'              	xorwf	_statoConteggio,f
   476  0062'                    l1104:
   477                           
   478                           ;main.c: 51:             old_button = 0;
   479  0062' 0186'              	clrf	main@old_button
   480                           
   481                           ;main.c: 52:             continue;
   482  0063' 2809'              	goto	l1080
   483  0064'                    l1106:
   484                           
   485                           ;main.c: 55:         button = PORTA & 0x04;
   486  0064' 0805               	movf	5,w	;volatile
   487  0065' 3904               	andlw	4
   488  0066' 0087'              	movwf	main@button
   489  0067'                    l1108:
   490                           
   491                           ;main.c: 56:         if (!button) {
   492  0067' 0807'              	movf	main@button,w
   493  0068' 1D03               	btfss	3,2
   494  0069' 286B'              	goto	u951
   495  006A' 286C'              	goto	u950
   496  006B'                    u951:
   497  006B' 2898'              	goto	l1128
   498  006C'                    u950:
   499  006C'                    l1110:
   500                           
   501                           ;main.c: 57:             _delay((unsigned long)((20)*(8000000/4000.0)));
   502  006C' 3034               	movlw	52
   503  006D' 1283               	bcf	3,5	;RP0=0, select bank0
   504  006E' 1303               	bcf	3,6	;RP1=0, select bank0
   505  006F' 0085'              	movwf	??_main+1
   506  0070' 30F1               	movlw	241
   507  0071' 0084'              	movwf	??_main
   508  0072'                    u1067:
   509  0072' 0B84'              	decfsz	??_main,f
   510  0073' 2872'              	goto	u1067
   511  0074' 0B85'              	decfsz	??_main+1,f
   512  0075' 2872'              	goto	u1067
   513  0076' 0000               	nop
   514  0077'                    l1112:
   515                           
   516                           ;main.c: 58:             button = PORTA & 0x04;
   517  0077' 1283               	bcf	3,5	;RP0=0, select bank0
   518  0078' 1303               	bcf	3,6	;RP1=0, select bank0
   519  0079' 0805               	movf	5,w	;volatile
   520  007A' 3904               	andlw	4
   521  007B' 0087'              	movwf	main@button
   522  007C'                    l1114:
   523                           
   524                           ;main.c: 59:             if (!button && old_button && !statoConteggio) {
   525  007C' 0807'              	movf	main@button,w
   526  007D' 1D03               	btfss	3,2
   527  007E' 2880'              	goto	u961
   528  007F' 2881'              	goto	u960
   529  0080'                    u961:
   530  0080' 2862'              	goto	l1104
   531  0081'                    u960:
   532  0081'                    l1116:
   533  0081' 0806'              	movf	main@old_button,w
   534  0082' 1903               	btfsc	3,2
   535  0083' 2885'              	goto	u971
   536  0084' 2886'              	goto	u970
   537  0085'                    u971:
   538  0085' 2862'              	goto	l1104
   539  0086'                    u970:
   540  0086'                    l1118:
   541  0086' 0801'              	movf	_statoConteggio,w
   542  0087' 1D03               	btfss	3,2
   543  0088' 288A'              	goto	u981
   544  0089' 288B'              	goto	u980
   545  008A'                    u981:
   546  008A' 2862'              	goto	l1104
   547  008B'                    u980:
   548  008B'                    l1120:
   549                           
   550                           ;main.c: 60:                 if (conteggio >= 99) conteggio = 99;
   551  008B' 3063               	movlw	99
   552  008C' 0200'              	subwf	_conteggio,w
   553  008D' 1C03               	skipc
   554  008E' 2890'              	goto	u991
   555  008F' 2891'              	goto	u990
   556  0090'                    u991:
   557  0090' 2893'              	goto	l1124
   558  0091'                    u990:
   559  0091'                    l1122:
   560  0091' 3063               	movlw	99
   561  0092' 0080'              	movwf	_conteggio
   562  0093'                    l1124:
   563                           
   564                           ;main.c: 61:                 conteggio++;
   565  0093' 3001               	movlw	1
   566  0094' 0084'              	movwf	??_main
   567  0095' 0804'              	movf	??_main,w
   568  0096' 0780'              	addwf	_conteggio,f
   569  0097' 2862'              	goto	l1104
   570  0098'                    l1128:
   571                           
   572                           ;main.c: 69:         button = PORTA & 0x08;
   573  0098' 0805               	movf	5,w	;volatile
   574  0099' 3908               	andlw	8
   575  009A' 0087'              	movwf	main@button
   576  009B'                    l1130:
   577                           
   578                           ;main.c: 70:         if (!button) {
   579  009B' 0807'              	movf	main@button,w
   580  009C' 1D03               	btfss	3,2
   581  009D' 289F'              	goto	u1001
   582  009E' 28A0'              	goto	u1000
   583  009F'                    u1001:
   584  009F' 28CA'              	goto	l45
   585  00A0'                    u1000:
   586  00A0'                    l1132:
   587                           
   588                           ;main.c: 71:             _delay((unsigned long)((20)*(8000000/4000.0)));
   589  00A0' 3034               	movlw	52
   590  00A1' 1283               	bcf	3,5	;RP0=0, select bank0
   591  00A2' 1303               	bcf	3,6	;RP1=0, select bank0
   592  00A3' 0085'              	movwf	??_main+1
   593  00A4' 30F1               	movlw	241
   594  00A5' 0084'              	movwf	??_main
   595  00A6'                    u1077:
   596  00A6' 0B84'              	decfsz	??_main,f
   597  00A7' 28A6'              	goto	u1077
   598  00A8' 0B85'              	decfsz	??_main+1,f
   599  00A9' 28A6'              	goto	u1077
   600  00AA' 0000               	nop
   601  00AB'                    l1134:
   602                           
   603                           ;main.c: 72:             button = PORTA & 0x08;
   604  00AB' 1283               	bcf	3,5	;RP0=0, select bank0
   605  00AC' 1303               	bcf	3,6	;RP1=0, select bank0
   606  00AD' 0805               	movf	5,w	;volatile
   607  00AE' 3908               	andlw	8
   608  00AF' 0087'              	movwf	main@button
   609  00B0'                    l1136:
   610                           
   611                           ;main.c: 73:             if (!button && old_button && !statoConteggio) {
   612  00B0' 0807'              	movf	main@button,w
   613  00B1' 1D03               	btfss	3,2
   614  00B2' 28B4'              	goto	u1011
   615  00B3' 28B5'              	goto	u1010
   616  00B4'                    u1011:
   617  00B4' 2862'              	goto	l1104
   618  00B5'                    u1010:
   619  00B5'                    l1138:
   620  00B5' 0806'              	movf	main@old_button,w
   621  00B6' 1903               	btfsc	3,2
   622  00B7' 28B9'              	goto	u1021
   623  00B8' 28BA'              	goto	u1020
   624  00B9'                    u1021:
   625  00B9' 2862'              	goto	l1104
   626  00BA'                    u1020:
   627  00BA'                    l1140:
   628  00BA' 0801'              	movf	_statoConteggio,w
   629  00BB' 1D03               	btfss	3,2
   630  00BC' 28BE'              	goto	u1031
   631  00BD' 28BF'              	goto	u1030
   632  00BE'                    u1031:
   633  00BE' 2862'              	goto	l1104
   634  00BF'                    u1030:
   635  00BF'                    l1142:
   636                           
   637                           ;main.c: 74:                 conteggio--;
   638  00BF' 3001               	movlw	1
   639  00C0' 0280'              	subwf	_conteggio,f
   640  00C1'                    l1144:
   641                           
   642                           ;main.c: 75:                 if (conteggio <= 1) conteggio = 1;
   643  00C1' 3002               	movlw	2
   644  00C2' 0200'              	subwf	_conteggio,w
   645  00C3' 1803               	skipnc
   646  00C4' 28C6'              	goto	u1041
   647  00C5' 28C7'              	goto	u1040
   648  00C6'                    u1041:
   649  00C6' 2862'              	goto	l1104
   650  00C7'                    u1040:
   651  00C7'                    l1146:
   652  00C7' 0180'              	clrf	_conteggio
   653  00C8' 0A80'              	incf	_conteggio,f
   654  00C9' 2862'              	goto	l1104
   655  00CA'                    l45:	
   656                           ;main.c: 79:         }
   657                           
   658                           
   659                           ;main.c: 81:         old_button = 1;
   660  00CA' 0186'              	clrf	main@old_button
   661  00CB' 0A86'              	incf	main@old_button,f
   662  00CC' 2809'              	goto	l1080
   663  00CD' 2800'              	ljmp	start
   664  00CE'                    __end_of_main:
   665                           
   666                           	psect	text1
   667  0000'                    __ptext1:	
   668 ;; *************** function ___awmod *****************
   669 ;; Defined at:
   670 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awmod.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;  divisor         2    3[COMMON] int 
   673 ;;  dividend        2    5[COMMON] int 
   674 ;; Auto vars:     Size  Location     Type
   675 ;;  sign            1    1[BANK0 ] unsigned char 
   676 ;;  counter         1    0[BANK0 ] unsigned char 
   677 ;; Return value:  Size  Location     Type
   678 ;;                  2    3[COMMON] int 
   679 ;; Registers used:
   680 ;;		wreg, status,2, status,0
   681 ;; Tracked objects:
   682 ;;		On entry : 0/0
   683 ;;		On exit  : 0/0
   684 ;;		Unchanged: 0/0
   685 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   686 ;;      Params:         4       0       0       0
   687 ;;      Locals:         0       2       0       0
   688 ;;      Temps:          1       0       0       0
   689 ;;      Totals:         5       2       0       0
   690 ;;Total ram usage:        7 bytes
   691 ;; Hardware stack levels used: 1
   692 ;; Hardware stack levels required when called: 1
   693 ;; This function calls:
   694 ;;		Nothing
   695 ;; This function is called by:
   696 ;;		_main
   697 ;; This function uses a non-reentrant model
   698 ;;
   699                           
   700  0000'                    ___awmod:	
   701                           ;psect for function ___awmod
   702                           
   703  0000'                    l1036:	
   704                           ;incstack = 0
   705                           ; Regs used in ___awmod: [wreg+status,2+status,0]
   706                           
   707  0000' 1283               	bcf	3,5	;RP0=0, select bank0
   708  0001' 1303               	bcf	3,6	;RP1=0, select bank0
   709  0002' 0181'              	clrf	___awmod@sign
   710  0003'                    l1038:
   711  0003' 1F86'              	btfss	___awmod@dividend+1,7
   712  0004' 2806'              	goto	u811
   713  0005' 2807'              	goto	u810
   714  0006'                    u811:
   715  0006' 280E'              	goto	l1044
   716  0007'                    u810:
   717  0007'                    l1040:
   718  0007' 0985'              	comf	___awmod@dividend,f
   719  0008' 0986'              	comf	___awmod@dividend+1,f
   720  0009' 0A85'              	incf	___awmod@dividend,f
   721  000A' 1903               	skipnz
   722  000B' 0A86'              	incf	___awmod@dividend+1,f
   723  000C'                    l1042:
   724  000C' 0181'              	clrf	___awmod@sign
   725  000D' 0A81'              	incf	___awmod@sign,f
   726  000E'                    l1044:
   727  000E' 1F84'              	btfss	___awmod@divisor+1,7
   728  000F' 2811'              	goto	u821
   729  0010' 2812'              	goto	u820
   730  0011'                    u821:
   731  0011' 2817'              	goto	l1048
   732  0012'                    u820:
   733  0012'                    l1046:
   734  0012' 0983'              	comf	___awmod@divisor,f
   735  0013' 0984'              	comf	___awmod@divisor+1,f
   736  0014' 0A83'              	incf	___awmod@divisor,f
   737  0015' 1903               	skipnz
   738  0016' 0A84'              	incf	___awmod@divisor+1,f
   739  0017'                    l1048:
   740  0017' 0803'              	movf	___awmod@divisor,w
   741  0018' 0404'              	iorwf	___awmod@divisor+1,w
   742  0019' 1903               	btfsc	3,2
   743  001A' 281C'              	goto	u831
   744  001B' 281D'              	goto	u830
   745  001C'                    u831:
   746  001C' 284C'              	goto	l1066
   747  001D'                    u830:
   748  001D'                    l1050:
   749  001D' 0180'              	clrf	___awmod@counter
   750  001E' 0A80'              	incf	___awmod@counter,f
   751  001F' 282B'              	goto	l1056
   752  0020'                    l1052:
   753  0020' 3001               	movlw	1
   754  0021'                    u845:
   755  0021' 1003               	clrc
   756  0022' 0D83'              	rlf	___awmod@divisor,f
   757  0023' 0D84'              	rlf	___awmod@divisor+1,f
   758  0024' 3EFF               	addlw	-1
   759  0025' 1D03               	skipz
   760  0026' 2821'              	goto	u845
   761  0027'                    l1054:
   762  0027' 3001               	movlw	1
   763  0028' 0087'              	movwf	??___awmod
   764  0029' 0807'              	movf	??___awmod,w
   765  002A' 0780'              	addwf	___awmod@counter,f
   766  002B'                    l1056:
   767  002B' 1F84'              	btfss	___awmod@divisor+1,7
   768  002C' 282E'              	goto	u851
   769  002D' 282F'              	goto	u850
   770  002E'                    u851:
   771  002E' 2820'              	goto	l1052
   772  002F'                    u850:
   773  002F'                    l1058:
   774  002F' 0804'              	movf	___awmod@divisor+1,w
   775  0030' 0206'              	subwf	___awmod@dividend+1,w
   776  0031' 1D03               	skipz
   777  0032' 2835'              	goto	u865
   778  0033' 0803'              	movf	___awmod@divisor,w
   779  0034' 0205'              	subwf	___awmod@dividend,w
   780  0035'                    u865:
   781  0035' 1C03               	skipc
   782  0036' 2838'              	goto	u861
   783  0037' 2839'              	goto	u860
   784  0038'                    u861:
   785  0038' 283F'              	goto	l1062
   786  0039'                    u860:
   787  0039'                    l1060:
   788  0039' 0803'              	movf	___awmod@divisor,w
   789  003A' 0285'              	subwf	___awmod@dividend,f
   790  003B' 0804'              	movf	___awmod@divisor+1,w
   791  003C' 1C03               	skipc
   792  003D' 0386'              	decf	___awmod@dividend+1,f
   793  003E' 0286'              	subwf	___awmod@dividend+1,f
   794  003F'                    l1062:
   795  003F' 3001               	movlw	1
   796  0040'                    u875:
   797  0040' 1003               	clrc
   798  0041' 0C84'              	rrf	___awmod@divisor+1,f
   799  0042' 0C83'              	rrf	___awmod@divisor,f
   800  0043' 3EFF               	addlw	-1
   801  0044' 1D03               	skipz
   802  0045' 2840'              	goto	u875
   803  0046'                    l1064:
   804  0046' 3001               	movlw	1
   805  0047' 0280'              	subwf	___awmod@counter,f
   806  0048' 1D03               	btfss	3,2
   807  0049' 284B'              	goto	u881
   808  004A' 284C'              	goto	u880
   809  004B'                    u881:
   810  004B' 282F'              	goto	l1058
   811  004C'                    u880:
   812  004C'                    l1066:
   813  004C' 0801'              	movf	___awmod@sign,w
   814  004D' 1903               	btfsc	3,2
   815  004E' 2850'              	goto	u891
   816  004F' 2851'              	goto	u890
   817  0050'                    u891:
   818  0050' 2856'              	goto	l1070
   819  0051'                    u890:
   820  0051'                    l1068:
   821  0051' 0985'              	comf	___awmod@dividend,f
   822  0052' 0986'              	comf	___awmod@dividend+1,f
   823  0053' 0A85'              	incf	___awmod@dividend,f
   824  0054' 1903               	skipnz
   825  0055' 0A86'              	incf	___awmod@dividend+1,f
   826  0056'                    l1070:
   827  0056' 0806'              	movf	___awmod@dividend+1,w
   828  0057' 0084'              	movwf	?___awmod+1
   829  0058' 0805'              	movf	___awmod@dividend,w
   830  0059' 0083'              	movwf	?___awmod
   831  005A'                    l316:
   832  005A' 0008               	return
   833  005B'                    __end_of___awmod:
   834                           
   835                           	psect	text2
   836  0000'                    __ptext2:	
   837 ;; *************** function ___awdiv *****************
   838 ;; Defined at:
   839 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
   840 ;; Parameters:    Size  Location     Type
   841 ;;  divisor         2    3[COMMON] int 
   842 ;;  dividend        2    5[COMMON] int 
   843 ;; Auto vars:     Size  Location     Type
   844 ;;  quotient        2    2[BANK0 ] int 
   845 ;;  sign            1    1[BANK0 ] unsigned char 
   846 ;;  counter         1    0[BANK0 ] unsigned char 
   847 ;; Return value:  Size  Location     Type
   848 ;;                  2    3[COMMON] int 
   849 ;; Registers used:
   850 ;;		wreg, status,2, status,0
   851 ;; Tracked objects:
   852 ;;		On entry : 0/0
   853 ;;		On exit  : 0/0
   854 ;;		Unchanged: 0/0
   855 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
   856 ;;      Params:         4       0       0       0
   857 ;;      Locals:         0       4       0       0
   858 ;;      Temps:          1       0       0       0
   859 ;;      Totals:         5       4       0       0
   860 ;;Total ram usage:        9 bytes
   861 ;; Hardware stack levels used: 1
   862 ;; Hardware stack levels required when called: 1
   863 ;; This function calls:
   864 ;;		Nothing
   865 ;; This function is called by:
   866 ;;		_main
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870  0000'                    ___awdiv:	
   871                           ;psect for function ___awdiv
   872                           
   873  0000'                    l846:	
   874                           ;incstack = 0
   875                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
   876                           
   877  0000' 1283               	bcf	3,5	;RP0=0, select bank0
   878  0001' 1303               	bcf	3,6	;RP1=0, select bank0
   879  0002' 0181'              	clrf	___awdiv@sign
   880  0003'                    l848:
   881  0003' 1F84'              	btfss	___awdiv@divisor+1,7
   882  0004' 2806'              	goto	u411
   883  0005' 2807'              	goto	u410
   884  0006'                    u411:
   885  0006' 280E'              	goto	l854
   886  0007'                    u410:
   887  0007'                    l850:
   888  0007' 0983'              	comf	___awdiv@divisor,f
   889  0008' 0984'              	comf	___awdiv@divisor+1,f
   890  0009' 0A83'              	incf	___awdiv@divisor,f
   891  000A' 1903               	skipnz
   892  000B' 0A84'              	incf	___awdiv@divisor+1,f
   893  000C'                    l852:
   894  000C' 0181'              	clrf	___awdiv@sign
   895  000D' 0A81'              	incf	___awdiv@sign,f
   896  000E'                    l854:
   897  000E' 1F86'              	btfss	___awdiv@dividend+1,7
   898  000F' 2811'              	goto	u421
   899  0010' 2812'              	goto	u420
   900  0011'                    u421:
   901  0011' 281B'              	goto	l860
   902  0012'                    u420:
   903  0012'                    l856:
   904  0012' 0985'              	comf	___awdiv@dividend,f
   905  0013' 0986'              	comf	___awdiv@dividend+1,f
   906  0014' 0A85'              	incf	___awdiv@dividend,f
   907  0015' 1903               	skipnz
   908  0016' 0A86'              	incf	___awdiv@dividend+1,f
   909  0017'                    l858:
   910  0017' 3001               	movlw	1
   911  0018' 0087'              	movwf	??___awdiv
   912  0019' 0807'              	movf	??___awdiv,w
   913  001A' 0681'              	xorwf	___awdiv@sign,f
   914  001B'                    l860:
   915  001B' 0182'              	clrf	___awdiv@quotient
   916  001C' 0183'              	clrf	___awdiv@quotient+1
   917  001D'                    l862:
   918  001D' 0803'              	movf	___awdiv@divisor,w
   919  001E' 0404'              	iorwf	___awdiv@divisor+1,w
   920  001F' 1903               	btfsc	3,2
   921  0020' 2822'              	goto	u431
   922  0021' 2823'              	goto	u430
   923  0022'                    u431:
   924  0022' 285A'              	goto	l882
   925  0023'                    u430:
   926  0023'                    l864:
   927  0023' 0180'              	clrf	___awdiv@counter
   928  0024' 0A80'              	incf	___awdiv@counter,f
   929  0025' 2831'              	goto	l870
   930  0026'                    l866:
   931  0026' 3001               	movlw	1
   932  0027'                    u445:
   933  0027' 1003               	clrc
   934  0028' 0D83'              	rlf	___awdiv@divisor,f
   935  0029' 0D84'              	rlf	___awdiv@divisor+1,f
   936  002A' 3EFF               	addlw	-1
   937  002B' 1D03               	skipz
   938  002C' 2827'              	goto	u445
   939  002D'                    l868:
   940  002D' 3001               	movlw	1
   941  002E' 0087'              	movwf	??___awdiv
   942  002F' 0807'              	movf	??___awdiv,w
   943  0030' 0780'              	addwf	___awdiv@counter,f
   944  0031'                    l870:
   945  0031' 1F84'              	btfss	___awdiv@divisor+1,7
   946  0032' 2834'              	goto	u451
   947  0033' 2835'              	goto	u450
   948  0034'                    u451:
   949  0034' 2826'              	goto	l866
   950  0035'                    u450:
   951  0035'                    l872:
   952  0035' 3001               	movlw	1
   953  0036'                    u465:
   954  0036' 1003               	clrc
   955  0037' 0D82'              	rlf	___awdiv@quotient,f
   956  0038' 0D83'              	rlf	___awdiv@quotient+1,f
   957  0039' 3EFF               	addlw	-1
   958  003A' 1D03               	skipz
   959  003B' 2836'              	goto	u465
   960  003C' 0804'              	movf	___awdiv@divisor+1,w
   961  003D' 0206'              	subwf	___awdiv@dividend+1,w
   962  003E' 1D03               	skipz
   963  003F' 2842'              	goto	u475
   964  0040' 0803'              	movf	___awdiv@divisor,w
   965  0041' 0205'              	subwf	___awdiv@dividend,w
   966  0042'                    u475:
   967  0042' 1C03               	skipc
   968  0043' 2845'              	goto	u471
   969  0044' 2846'              	goto	u470
   970  0045'                    u471:
   971  0045' 284D'              	goto	l878
   972  0046'                    u470:
   973  0046'                    l874:
   974  0046' 0803'              	movf	___awdiv@divisor,w
   975  0047' 0285'              	subwf	___awdiv@dividend,f
   976  0048' 0804'              	movf	___awdiv@divisor+1,w
   977  0049' 1C03               	skipc
   978  004A' 0386'              	decf	___awdiv@dividend+1,f
   979  004B' 0286'              	subwf	___awdiv@dividend+1,f
   980  004C'                    l876:
   981  004C' 1402'              	bsf	___awdiv@quotient,0
   982  004D'                    l878:
   983  004D' 3001               	movlw	1
   984  004E'                    u485:
   985  004E' 1003               	clrc
   986  004F' 0C84'              	rrf	___awdiv@divisor+1,f
   987  0050' 0C83'              	rrf	___awdiv@divisor,f
   988  0051' 3EFF               	addlw	-1
   989  0052' 1D03               	skipz
   990  0053' 284E'              	goto	u485
   991  0054'                    l880:
   992  0054' 3001               	movlw	1
   993  0055' 0280'              	subwf	___awdiv@counter,f
   994  0056' 1D03               	btfss	3,2
   995  0057' 2859'              	goto	u491
   996  0058' 285A'              	goto	u490
   997  0059'                    u491:
   998  0059' 2835'              	goto	l872
   999  005A'                    u490:
  1000  005A'                    l882:
  1001  005A' 0801'              	movf	___awdiv@sign,w
  1002  005B' 1903               	btfsc	3,2
  1003  005C' 285E'              	goto	u501
  1004  005D' 285F'              	goto	u500
  1005  005E'                    u501:
  1006  005E' 2864'              	goto	l886
  1007  005F'                    u500:
  1008  005F'                    l884:
  1009  005F' 0982'              	comf	___awdiv@quotient,f
  1010  0060' 0983'              	comf	___awdiv@quotient+1,f
  1011  0061' 0A82'              	incf	___awdiv@quotient,f
  1012  0062' 1903               	skipnz
  1013  0063' 0A83'              	incf	___awdiv@quotient+1,f
  1014  0064'                    l886:
  1015  0064' 0803'              	movf	___awdiv@quotient+1,w
  1016  0065' 0084'              	movwf	?___awdiv+1
  1017  0066' 0802'              	movf	___awdiv@quotient,w
  1018  0067' 0083'              	movwf	?___awdiv
  1019  0068'                    l303:
  1020  0068' 0008               	return
  1021  0069'                    __end_of___awdiv:
  1022                           
  1023                           	psect	text3
  1024  0000'                    __ptext3:	
  1025 ;; *************** function _ISR *****************
  1026 ;; Defined at:
  1027 ;;		line 88 in file "main.c"
  1028 ;; Parameters:    Size  Location     Type
  1029 ;;		None
  1030 ;; Auto vars:     Size  Location     Type
  1031 ;;		None
  1032 ;; Return value:  Size  Location     Type
  1033 ;;                  1    wreg      void 
  1034 ;; Registers used:
  1035 ;;		wreg, status,2, status,0
  1036 ;; Tracked objects:
  1037 ;;		On entry : 0/0
  1038 ;;		On exit  : 0/0
  1039 ;;		Unchanged: 0/0
  1040 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2
  1041 ;;      Params:         0       0       0       0
  1042 ;;      Locals:         0       0       0       0
  1043 ;;      Temps:          3       0       0       0
  1044 ;;      Totals:         3       0       0       0
  1045 ;;Total ram usage:        3 bytes
  1046 ;; Hardware stack levels used: 1
  1047 ;; This function calls:
  1048 ;;		Nothing
  1049 ;; This function is called by:
  1050 ;;		Interrupt level 1
  1051 ;; This function uses a non-reentrant model
  1052 ;;
  1053                           
  1054  0000'                    _ISR:	
  1055                           ;psect for function _ISR
  1056                           
  1057  0000'                    i1l1004:
  1058                           
  1059                           ;main.c: 89:     if (INTCONbits.T0IF) {
  1060  0000' 1D0B               	btfss	11,2	;volatile
  1061  0001' 2803'              	goto	u75_21
  1062  0002' 2804'              	goto	u75_20
  1063  0003'                    u75_21:
  1064  0003' 2842'              	goto	i1l64
  1065  0004'                    u75_20:
  1066  0004'                    i1l1006:
  1067                           
  1068                           ;main.c: 90:         INTCONbits.T0IF = 0;
  1069  0004' 110B               	bcf	11,2	;volatile
  1070  0005'                    i1l1008:
  1071                           
  1072                           ;main.c: 91:         TMR0 = 6;
  1073  0005' 3006               	movlw	6
  1074  0006' 1283               	bcf	3,5	;RP0=0, select bank0
  1075  0007' 1303               	bcf	3,6	;RP1=0, select bank0
  1076  0008' 0081               	movwf	1	;volatile
  1077  0009'                    i1l1010:
  1078                           
  1079                           ;main.c: 92:         display ^= 1;
  1080  0009' 3001               	movlw	1
  1081  000A' 0080'              	movwf	??_ISR
  1082  000B' 0800'              	movf	??_ISR,w
  1083  000C' 0682'              	xorwf	_display,f
  1084  000D'                    i1l1012:
  1085                           
  1086                           ;main.c: 93:         static unsigned char InterruptCounter;;main.c: 94:         static u
      +                          nsigned int InterruptCounter2;;main.c: 95:         InterruptCounter++;
  1087  000D' 3001               	movlw	1
  1088  000E' 0080'              	movwf	??_ISR
  1089  000F' 0800'              	movf	??_ISR,w
  1090  0010' 0782'              	addwf	ISR@InterruptCounter,f
  1091                           
  1092                           ;main.c: 97:         if (InterruptCounter >= 50) {
  1093  0011' 3032               	movlw	50
  1094  0012' 0202'              	subwf	ISR@InterruptCounter,w
  1095  0013' 1C03               	skipc
  1096  0014' 2816'              	goto	u76_21
  1097  0015' 2817'              	goto	u76_20
  1098  0016'                    u76_21:
  1099  0016' 2827'              	goto	i1l1024
  1100  0017'                    u76_20:
  1101  0017'                    i1l1014:
  1102                           
  1103                           ;main.c: 99:             InterruptCounter = 0;
  1104  0017' 0182'              	clrf	ISR@InterruptCounter
  1105  0018'                    i1l1016:
  1106                           
  1107                           ;main.c: 101:             if (statoConteggio)conteggio--;
  1108  0018' 0801'              	movf	_statoConteggio,w
  1109  0019' 1903               	btfsc	3,2
  1110  001A' 281C'              	goto	u77_21
  1111  001B' 281D'              	goto	u77_20
  1112  001C'                    u77_21:
  1113  001C' 281F'              	goto	i1l60
  1114  001D'                    u77_20:
  1115  001D'                    i1l1018:
  1116  001D' 3001               	movlw	1
  1117  001E' 0280'              	subwf	_conteggio,f
  1118  001F'                    i1l60:
  1119                           
  1120                           ;main.c: 102:             if (conteggio <= 0) {
  1121  001F' 0800'              	movf	_conteggio,w
  1122  0020' 1D03               	btfss	3,2
  1123  0021' 2823'              	goto	u78_21
  1124  0022' 2824'              	goto	u78_20
  1125  0023'                    u78_21:
  1126  0023' 2827'              	goto	i1l1024
  1127  0024'                    u78_20:
  1128  0024'                    i1l1020:
  1129                           
  1130                           ;main.c: 103:                 statoConteggio = 0;
  1131  0024' 0181'              	clrf	_statoConteggio
  1132  0025'                    i1l1022:
  1133                           
  1134                           ;main.c: 104:                 conteggioFinito = 1;
  1135  0025' 0180'              	clrf	_conteggioFinito
  1136  0026' 0A80'              	incf	_conteggioFinito,f
  1137  0027'                    i1l1024:
  1138                           
  1139                           ;main.c: 108:         if (conteggioFinito) {
  1140  0027' 0800'              	movf	_conteggioFinito,w
  1141  0028' 1903               	btfsc	3,2
  1142  0029' 282B'              	goto	u79_21
  1143  002A' 282C'              	goto	u79_20
  1144  002B'                    u79_21:
  1145  002B' 2842'              	goto	i1l64
  1146  002C'                    u79_20:
  1147  002C'                    i1l1026:
  1148                           
  1149                           ;main.c: 109:             InterruptCounter2++;
  1150  002C' 3001               	movlw	1
  1151  002D' 0780'              	addwf	ISR@InterruptCounter2,f
  1152  002E' 1803               	skipnc
  1153  002F' 0A81'              	incf	ISR@InterruptCounter2+1,f
  1154  0030' 3000               	movlw	0
  1155  0031' 0781'              	addwf	ISR@InterruptCounter2+1,f
  1156  0032'                    i1l1028:
  1157                           
  1158                           ;main.c: 110:             PORTAbits.RA0 = 1;
  1159  0032' 1405               	bsf	5,0	;volatile
  1160                           
  1161                           ;main.c: 111:             if (InterruptCounter2 >= 1250) {
  1162  0033' 3004               	movlw	4
  1163  0034' 0201'              	subwf	ISR@InterruptCounter2+1,w
  1164  0035' 30E2               	movlw	226
  1165  0036' 1903               	skipnz
  1166  0037' 0200'              	subwf	ISR@InterruptCounter2,w
  1167  0038' 1C03               	skipc
  1168  0039' 283B'              	goto	u80_21
  1169  003A' 283C'              	goto	u80_20
  1170  003B'                    u80_21:
  1171  003B' 2842'              	goto	i1l64
  1172  003C'                    u80_20:
  1173  003C'                    i1l1030:
  1174                           
  1175                           ;main.c: 112:                 InterruptCounter2 = 0;
  1176  003C' 0180'              	clrf	ISR@InterruptCounter2
  1177  003D' 0181'              	clrf	ISR@InterruptCounter2+1
  1178                           
  1179                           ;main.c: 113:                 conteggioFinito = 0;
  1180  003E' 0180'              	clrf	_conteggioFinito
  1181  003F'                    i1l1032:
  1182                           
  1183                           ;main.c: 114:                 PORTAbits.RA0 = 0;
  1184  003F' 1005               	bcf	5,0	;volatile
  1185  0040'                    i1l1034:
  1186                           
  1187                           ;main.c: 115:                 conteggio = 99;
  1188  0040' 3063               	movlw	99
  1189  0041' 0080'              	movwf	_conteggio
  1190  0042'                    i1l64:
  1191  0042' 0802'              	movf	??_ISR+2,w
  1192  0043' 008A               	movwf	10
  1193  0044' 0E01'              	swapf	??_ISR+1,w
  1194  0045' 0083               	movwf	3
  1195  0046' 0EFE               	swapf	btemp,f
  1196  0047' 0E7E               	swapf	btemp,w
  1197  0048' 0009               	retfie
  1198  0049'                    __end_of_ISR:
  1199  007E                     btemp	set	126	;btemp
  1200  007E                     wtemp0	set	126
  1201                           
  1202                           	psect	intentry
  1203  0000'                    __pintentry:	
  1204                           ;incstack = 0
  1205                           ; Regs used in _ISR: [wreg+status,2+status,0]
  1206                           
  1207  0000'                    interrupt_function:
  1208  007E                     saved_w	set	btemp
  1209  0000' 00FE               	movwf	btemp
  1210  0001' 0E03               	swapf	3,w
  1211  0002' 0081'              	movwf	??_ISR+1
  1212  0003' 080A               	movf	10,w
  1213  0004' 0082'              	movwf	??_ISR+2
  1214  0005' 2800'              	ljmp	_ISR
  1215                           
  1216                           	psect	idloc
  1217                           
  1218                           ;Config register IDLOC0 @ 0x2000
  1219                           ;	unspecified, using default values
  1220  2000                     	org	8192
  1221  2000  3FFF               	dw	16383
  1222                           
  1223                           ;Config register IDLOC1 @ 0x2001
  1224                           ;	unspecified, using default values
  1225  2001                     	org	8193
  1226  2001  3FFF               	dw	16383
  1227                           
  1228                           ;Config register IDLOC2 @ 0x2002
  1229                           ;	unspecified, using default values
  1230  2002                     	org	8194
  1231  2002  3FFF               	dw	16383
  1232                           
  1233                           ;Config register IDLOC3 @ 0x2003
  1234                           ;	unspecified, using default values
  1235  2003                     	org	8195
  1236  2003  3FFF               	dw	16383
  1237                           
  1238                           	psect	config
  1239                           
  1240                           ;Config register CONFIG @ 0x2007
  1241                           ;	Oscillator Selection bits
  1242                           ;	FOSC = HS, HS oscillator: High-speed crystal/resonator on RA6/OSC2/CLKOUT and RA7/OSC1
      +                          /CLKIN
  1243                           ;	Watchdog Timer Enable bit
  1244                           ;	WDTE = OFF, WDT disabled
  1245                           ;	Power-up Timer Enable bit
  1246                           ;	PWRTE = ON, PWRT enabled
  1247                           ;	RA5/MCLR/VPP Pin Function Select bit
  1248                           ;	MCLRE = ON, RA5/MCLR/VPP pin function is MCLR
  1249                           ;	Brown-out Detect Enable bit
  1250                           ;	BOREN = ON, BOD enabled
  1251                           ;	Low-Voltage Programming Enable bit
  1252                           ;	LVP = OFF, RB4/PGM pin has digital I/O function, HV on MCLR must be used for programmi
      +                          ng
  1253                           ;	Data EE Memory Code Protection bit
  1254                           ;	CPD = OFF, Data memory code protection off
  1255                           ;	Flash Program Memory Code Protection bit
  1256                           ;	CP = OFF, Code protection off
  1257  2007                     	org	8199
  1258  2007  3F62               	dw	16226

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         6
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80      8      12
    BANK1            80      0       0
    BANK2            48      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->___awdiv
    _main->___awmod

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->___awdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0    1386
                                              4 BANK0      4     4      0
                     _SevenSeg_Write
               _SevenSeg_Write_Write
                            ___awdiv
                            ___awmod
 ---------------------------------------------------------------------------------
 (1) ___awmod                                              7     3      4     613
                                              3 COMMON     5     1      4
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) ___awdiv                                              9     5      4     452
                                              3 COMMON     5     1      4
                                              0 BANK0      4     4      0
 ---------------------------------------------------------------------------------
 (1) _SevenSeg_Write_Write                                 4     0      4       0
 ---------------------------------------------------------------------------------
 (1) _SevenSeg_Write                                       1     0      1      12
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SevenSeg_Write
   _SevenSeg_Write_Write
   ___awdiv
   ___awmod

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               30      0       0       9        0.0%
BITBANK2            30      0       0       8        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      8       C       3       15.0%
BITBANK0            50      0       0       5        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      17      10        0.0%
ABS                  0      0      17       4        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA              80      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jan 18 21:33:38 2023

                     l45 00CA             ___awdiv@sign 0001                      l303 0068  
                    l316 005A                      l850 0007                      l860 001B  
                    l852 000C                      l870 0031                      l862 001D  
                    l854 000E                      l846 0000                      l880 0054  
                    l872 0035                      l864 0023                      l856 0012  
                    l848 0003                      l874 0046                      l866 0026  
                    l882 005A                      l858 0017                      l884 005F  
                    l876 004C                      l868 002D                      l886 0064  
                    l878 004D                      u410 0007                      u411 0006  
                    u500 005F                      u420 0012                      u501 005E  
                    u421 0011                      u430 0023                      u431 0022  
                    u450 0035                      u451 0034                      _ISR 0000  
                    u445 0027                      u470 0046                      u471 0045  
                    u465 0036                      u490 005A                      u810 0007  
                    u491 0059                      u475 0042                      u811 0006  
                    u820 0012                      u900 000F                      u485 004E  
                    u821 0011                      u901 000E                      u830 001D  
                    u910 003B                      u831 001C                      u911 003A  
                    u920 0044                      u921 0043                      u850 002F  
                    u930 0059                      u851 002E                      u931 0058  
                    u860 0039                      u940 005E                      u861 0038  
                    u845 0021                      u941 005D                      u950 006C  
                    u951 006B                      u880 004C                      u960 0081  
                    u881 004B                      u865 0035                      u961 0080  
                    u890 0051                      u970 0086                      u891 0050  
                    u875 0040                      u971 0085                      u980 008B  
                    u981 008A                      u990 0091                      u991 0090  
           ___awmod@sign 0001                     ?_ISR 0000                     l1100 0059  
                   l1110 006C                     l1102 005E                     l1040 0007  
                   l1120 008B                     l1112 0077                     l1104 0062  
                   l1050 001D                     l1042 000C                     l1130 009B  
                   l1122 0091                     l1114 007C                     l1106 0064  
                   l1060 0039                     l1052 0020                     l1044 000E  
                   l1036 0000                     l1140 00BA                     l1132 00A0  
                   l1124 0093                     l1116 0081                     l1108 0067  
                   l1070 0056                     l1062 003F                     l1054 0027  
                   l1046 0012                     l1038 0003                     l1142 00BF  
                   l1134 00AB                     l1118 0086                     l1064 0046  
                   l1056 002B                     l1048 0017                     l1144 00C1  
                   l1136 00B0                     l1128 0098                     l1080 0009  
                   l1058 002F                     l1066 004C                     l1146 00C7  
                   l1138 00B5                     l1090 003C                     l1082 000F  
                   l1074 0000                     l1068 0051                     l1092 003F  
                   l1084 001F                     l1076 0006                     l1094 0044  
                   l1086 0034                     l1078 0007                     l1096 004F  
                   l1098 0054                     u1000 00A0                     u1001 009F  
                   u1010 00B5                     u1011 00B4                     u1020 00BA  
                   u1021 00B9                     u1030 00BF                     u1031 00BE  
                   u1040 00C7                     u1041 00C6                     u1057 004A  
                   u1067 0072                     u1077 00A6                     i1l60 001F  
                   i1l64 0042                     _TMR0 0001                     _main 0000  
                   btemp 007E                     start 0000*                   ??_ISR 0000  
                  ?_main 0000          __end_of___awdiv 0069          __end_of___awmod 005B  
        ___awdiv@divisor 0003          ___awdiv@counter 0000                    _PORTA 0005  
                  u80_20 003C                    u80_21 003B                    _TRISA 0085  
                  _TRISB 0086                    u75_20 0004                    u75_21 0003  
                  u76_20 0017                    u76_21 0016                    u77_20 001D  
                  u77_21 001C                    u78_20 0024                    u78_21 0023  
                  u79_20 002C                    u79_21 002B           _statoConteggio 0001  
   _SevenSeg_Write_Write 0000*                   pclath 000A                    status 0003  
                  wtemp0 007E          _conteggioFinito 0000          __initialization 0000  
           __end_of_main 00CE                   ??_main 0004         ___awdiv@dividend 0005  
  ?_SevenSeg_Write_Write 0000                   i1l1010 0009                   i1l1020 0024  
                 i1l1012 000D                   i1l1004 0000                   i1l1030 003C  
                 i1l1022 0025                   i1l1014 0017                   i1l1006 0004  
                 i1l1032 003F                   i1l1016 0018                   i1l1024 0027  
                 i1l1008 0005                   i1l1034 0040                   i1l1026 002C  
                 i1l1018 001D                   i1l1028 0032                   _INTCON 000B  
              ??___awdiv 0007                ??___awmod 0007         ___awdiv@quotient 0002  
        ___awmod@divisor 0003          ___awmod@counter 0000           _SevenSeg_Write 0000* 
                 saved_w 007E  __end_of__initialization 0008           __pcstackCOMMON 0000  
           __pidataBANK0 0000   ??_SevenSeg_Write_Write 0000               __pbssBANK0 0000  
             __pmaintext 0000               __pintentry 0000          ?_SevenSeg_Write 0000  
         main@old_button 0006                  ___awdiv 0000                  ___awmod 0000  
                __ptext1 0000                  __ptext2 0000                  __ptext3 0000  
                _display 0002         ___awmod@dividend 0005     end_of_initialization 0008  
              _PORTAbits 0005               main@button 0007      start_initialization 0000  
            __end_of_ISR 0049         ??_SevenSeg_Write 0000              __pdataBANK0 0000  
            __pbssCOMMON 0000                ___latbits 0000            __pcstackBANK0 0000  
               ?___awdiv 0003                 ?___awmod 0003                _conteggio 0000  
      interrupt_function 0000         _SevenSeg_Write$1 0000     ISR@InterruptCounter2 0000  
             _INTCONbits 000B                 intlevel1 0000*     ISR@InterruptCounter 0002  
             _OPTION_REG 0081  
