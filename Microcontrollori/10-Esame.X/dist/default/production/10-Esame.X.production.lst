

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Fri Jan 27 12:50:05 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     9                           	psect	clrtext,global,class=CODE,delta=2
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=1
    16                           	psect	text3,local,class=CODE,merge=1,delta=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text9,local,class=CODE,merge=1,delta=2,group=1
    23                           	psect	text10,local,class=CODE,merge=1,delta=2,group=1
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	intentry,global,class=CODE,delta=2
    32                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35     0000                     
    36                           ; Version 2.40
    37                           ; Generated 17/11/2021 GMT
    38                           ; 
    39                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution. Publication is not required when
    53                           ;        this file is used in an embedded application.
    54                           ; 
    55                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    56                           ;        software without specific prior written permission.
    57                           ; 
    58                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    59                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    60                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    61                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    62                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    63                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    64                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    65                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    66                           ; 
    67                           ; 
    68                           ; Code-generator required, PIC16F877A Definitions
    69                           ; 
    70                           ; SFR Addresses
    71     0000                     	;# 
    72     0001                     	;# 
    73     0002                     	;# 
    74     0003                     	;# 
    75     0004                     	;# 
    76     0005                     	;# 
    77     0006                     	;# 
    78     0007                     	;# 
    79     0008                     	;# 
    80     0009                     	;# 
    81     000A                     	;# 
    82     000B                     	;# 
    83     000C                     	;# 
    84     000D                     	;# 
    85     000E                     	;# 
    86     000E                     	;# 
    87     000F                     	;# 
    88     0010                     	;# 
    89     0011                     	;# 
    90     0012                     	;# 
    91     0013                     	;# 
    92     0014                     	;# 
    93     0015                     	;# 
    94     0015                     	;# 
    95     0016                     	;# 
    96     0017                     	;# 
    97     0018                     	;# 
    98     0019                     	;# 
    99     001A                     	;# 
   100     001B                     	;# 
   101     001B                     	;# 
   102     001C                     	;# 
   103     001D                     	;# 
   104     001E                     	;# 
   105     001F                     	;# 
   106     0081                     	;# 
   107     0085                     	;# 
   108     0086                     	;# 
   109     0087                     	;# 
   110     0088                     	;# 
   111     0089                     	;# 
   112     008C                     	;# 
   113     008D                     	;# 
   114     008E                     	;# 
   115     0091                     	;# 
   116     0092                     	;# 
   117     0093                     	;# 
   118     0094                     	;# 
   119     0098                     	;# 
   120     0099                     	;# 
   121     009C                     	;# 
   122     009D                     	;# 
   123     009E                     	;# 
   124     009F                     	;# 
   125     010C                     	;# 
   126     010D                     	;# 
   127     010E                     	;# 
   128     010F                     	;# 
   129     018C                     	;# 
   130     018D                     	;# 
   131     0000                     	;# 
   132     0001                     	;# 
   133     0002                     	;# 
   134     0003                     	;# 
   135     0004                     	;# 
   136     0005                     	;# 
   137     0006                     	;# 
   138     0007                     	;# 
   139     0008                     	;# 
   140     0009                     	;# 
   141     000A                     	;# 
   142     000B                     	;# 
   143     000C                     	;# 
   144     000D                     	;# 
   145     000E                     	;# 
   146     000E                     	;# 
   147     000F                     	;# 
   148     0010                     	;# 
   149     0011                     	;# 
   150     0012                     	;# 
   151     0013                     	;# 
   152     0014                     	;# 
   153     0015                     	;# 
   154     0015                     	;# 
   155     0016                     	;# 
   156     0017                     	;# 
   157     0018                     	;# 
   158     0019                     	;# 
   159     001A                     	;# 
   160     001B                     	;# 
   161     001B                     	;# 
   162     001C                     	;# 
   163     001D                     	;# 
   164     001E                     	;# 
   165     001F                     	;# 
   166     0081                     	;# 
   167     0085                     	;# 
   168     0086                     	;# 
   169     0087                     	;# 
   170     0088                     	;# 
   171     0089                     	;# 
   172     008C                     	;# 
   173     008D                     	;# 
   174     008E                     	;# 
   175     0091                     	;# 
   176     0092                     	;# 
   177     0093                     	;# 
   178     0094                     	;# 
   179     0098                     	;# 
   180     0099                     	;# 
   181     009C                     	;# 
   182     009D                     	;# 
   183     009E                     	;# 
   184     009F                     	;# 
   185     010C                     	;# 
   186     010D                     	;# 
   187     010E                     	;# 
   188     010F                     	;# 
   189     018C                     	;# 
   190     018D                     	;# 
   191                           
   192                           	psect	strings
   193     0753                     __pstrings:
   194     0753                     stringtab:
   195     0753                     __stringtab:
   196                           
   197                           ;	String table - string pointers are 1 byte each
   198     0753  1BFF               	btfsc	btemp+1,7
   199     0754  2F5D               	ljmp	stringcode
   200     0755  1383               	bcf	3,7
   201     0756  187F               	btfsc	btemp+1,0
   202     0757  1783               	bsf	3,7
   203     0758  0800               	movf	0,w
   204     0759  0A84               	incf	4,f
   205     075A  1903               	skipnz
   206     075B  0AFF               	incf	btemp+1,f
   207     075C  0008               	return
   208     075D                     stringcode:
   209     075D                     stringdir:
   210     075D  3007               	movlw	high stringdir
   211     075E  008A               	movwf	10
   212     075F  0804               	movf	4,w
   213     0760  0A84               	incf	4,f
   214     0761  0782               	addwf	2,f
   215     0762                     __stringbase:
   216     0762  3400               	retlw	0
   217     0763                     __end_of__stringtab:
   218     0763                     _keypad:
   219     0763  342A               	retlw	42
   220     0764  3407               	retlw	7
   221     0765  3404               	retlw	4
   222     0766  3401               	retlw	1
   223     0767  3400               	retlw	0
   224     0768  3408               	retlw	8
   225     0769  3405               	retlw	5
   226     076A  3402               	retlw	2
   227     076B  3423               	retlw	35
   228     076C  3409               	retlw	9
   229     076D  3406               	retlw	6
   230     076E  3403               	retlw	3
   231     076F                     __end_of_keypad:
   232     076F                     _Speed:
   233     076F  3464               	retlw	100
   234     0770  3478               	retlw	120
   235     0771  348C               	retlw	140
   236     0772  34A0               	retlw	160
   237     0773                     __end_of_Speed:
   238     0019                     _TXREG	set	25
   239     000C                     _PIR1	set	12
   240     0018                     _RCSTA	set	24
   241     0009                     _PORTEbits	set	9
   242     0008                     _PORTDbits	set	8
   243     0008                     _PORTD	set	8
   244     0006                     _PORTB	set	6
   245     001A                     _RCREG	set	26
   246     0001                     _TMR0	set	1
   247     000E                     _TMR1L	set	14
   248     000F                     _TMR1H	set	15
   249     0015                     _CCPR1L	set	21
   250     0017                     _CCP1CON	set	23
   251     0010                     _T1CON	set	16
   252     000B                     _INTCON	set	11
   253     0065                     _RCIF	set	101
   254     005A                     _T0IF	set	90
   255     0092                     _TMR2ON	set	146
   256     008C                     _PIE1	set	140
   257     0099                     _SPBRG	set	153
   258     0098                     _TXSTA	set	152
   259     0089                     _TRISE	set	137
   260     0086                     _TRISB	set	134
   261     0088                     _TRISD	set	136
   262     0092                     _PR2	set	146
   263     0087                     _TRISC	set	135
   264     0081                     _OPTION_REG	set	129
   265     0773                     STR_1:
   266     0773  3420               	retlw	32	;' '
   267     0774  3420               	retlw	32	;' '
   268     0775  3420               	retlw	32	;' '
   269     0776  3420               	retlw	32	;' '
   270     0777  3420               	retlw	32	;' '
   271     0778  3420               	retlw	32	;' '
   272     0779  3420               	retlw	32	;' '
   273     077A  3420               	retlw	32	;' '
   274     077B  3420               	retlw	32	;' '
   275     077C  3420               	retlw	32	;' '
   276     077D  3420               	retlw	32	;' '
   277     077E  3420               	retlw	32	;' '
   278     077F  3420               	retlw	32	;' '
   279     0780  3420               	retlw	32	;' '
   280     0781  3420               	retlw	32	;' '
   281     0782  3420               	retlw	32	;' '
   282     0783  3400               	retlw	0
   283                           
   284                           	psect	cinit
   285     0011                     start_initialization:	
   286                           ; #config settings
   287                           
   288     0011                     __initialization:
   289                           
   290                           ; Clear objects allocated to COMMON
   291     0011  01F0               	clrf	__pbssCOMMON& (0+127)
   292     0012  01F1               	clrf	(__pbssCOMMON+1)& (0+127)
   293     0013  01F2               	clrf	(__pbssCOMMON+2)& (0+127)
   294     0014  01F3               	clrf	(__pbssCOMMON+3)& (0+127)
   295     0015  01F4               	clrf	(__pbssCOMMON+4)& (0+127)
   296                           
   297                           ; Clear objects allocated to BANK0
   298     0016  1283               	bcf	3,5	;RP0=0, select bank0
   299     0017  1303               	bcf	3,6	;RP1=0, select bank0
   300     0018  01EC               	clrf	__pbssBANK0& (0+127)
   301     0019  01ED               	clrf	(__pbssBANK0+1)& (0+127)
   302     001A  01EE               	clrf	(__pbssBANK0+2)& (0+127)
   303     001B  01EF               	clrf	(__pbssBANK0+3)& (0+127)
   304                           
   305                           ; Clear objects allocated to BANK1
   306     001C  1383               	bcf	3,7	;select IRP bank0
   307     001D  30A0               	movlw	low __pbssBANK1
   308     001E  0084               	movwf	4
   309     001F  30C6               	movlw	low (__pbssBANK1+38)
   310     0020  120A  118A  27EF  120A  118A  	fcall	clear_ram0
   311     0025                     end_of_initialization:	
   312                           ;End of C runtime variable initialization code
   313                           
   314     0025                     __end_of__initialization:
   315     0025  0183               	clrf	3
   316     0026  120A  118A  2829   	ljmp	_main	;jump to C main() function
   317                           
   318                           	psect	bssCOMMON
   319     0070                     __pbssCOMMON:
   320     0070                     Numpad_Read@oldKeyVal:
   321     0070                     	ds	1
   322     0071                     _data_received:
   323     0071                     	ds	1
   324     0072                     _update_speed:
   325     0072                     	ds	1
   326     0073                     _update_UART:
   327     0073                     	ds	1
   328     0074                     _update_lcd:
   329     0074                     	ds	1
   330                           
   331                           	psect	bssBANK0
   332     006C                     __pbssBANK0:
   333     006C                     _MotorSpeed:
   334     006C                     	ds	2
   335     006E                     _data_i:
   336     006E                     	ds	1
   337     006F                     _SelectedSpeed:
   338     006F                     	ds	1
   339                           
   340                           	psect	bssBANK1
   341     00A0                     __pbssBANK1:
   342     00A0                     _Uart_Data:
   343     00A0                     	ds	32
   344     00C0                     ISR@update_UART_counter:
   345     00C0                     	ds	2
   346     00C2                     ISR@update_lcd_counter:
   347     00C2                     	ds	2
   348     00C4                     ISR@interruptCounter:
   349     00C4                     	ds	2
   350                           
   351                           	psect	clrtext
   352     07EF                     clear_ram0:	
   353                           ;	Called with FSR containing the base address, and
   354                           ;	W with the last address+1
   355                           
   356     07EF  0064               	clrwdt	;clear the watchdog before getting into this loop
   357     07F0                     clrloop0:
   358     07F0  0180               	clrf	0	;clear RAM location pointed to by FSR
   359     07F1  0A84               	incf	4,f	;increment pointer
   360     07F2  0604               	xorwf	4,w	;XOR with final address
   361     07F3  1903               	btfsc	3,2	;have we reached the end yet?
   362     07F4  3400               	retlw	0	;all done for this memory range, return
   363     07F5  0604               	xorwf	4,w	;XOR again to restore value
   364     07F6  2FF0               	goto	clrloop0	;do the next byte
   365                           
   366                           	psect	cstackBANK1
   367     00C6                     __pcstackBANK1:
   368     00C6                     ??_main:
   369                           
   370                           ; 1 bytes @ 0x0
   371     00C6                     	ds	2
   372     00C8                     main@numpad_value:
   373                           
   374                           ; 1 bytes @ 0x2
   375     00C8                     	ds	1
   376     00C9                     main@speed_buffer:
   377                           
   378                           ; 1 bytes @ 0x3
   379     00C9                     	ds	1
   380                           
   381                           	psect	cstackCOMMON
   382     0075                     __pcstackCOMMON:
   383     0075                     ?_Lcd_Init:
   384     0075                     ?_Numpad_Read:	
   385                           ; 1 bytes @ 0x0
   386                           
   387     0075                     ?_main:	
   388                           ; 1 bytes @ 0x0
   389                           
   390     0075                     ?_ISR:	
   391                           ; 1 bytes @ 0x0
   392                           
   393     0075                     ??_ISR:	
   394                           ; 1 bytes @ 0x0
   395                           
   396     0075                     ?_Lcd_Port:	
   397                           ; 1 bytes @ 0x0
   398                           
   399     0075                     ?_Lcd_Cmd:	
   400                           ; 1 bytes @ 0x0
   401                           
   402     0075                     ?_Lcd_Write_Char:	
   403                           ; 1 bytes @ 0x0
   404                           
   405     0075                     ?_UART_TxChar:	
   406                           ; 1 bytes @ 0x0
   407                           
   408     0075                     ?_UART_TxString:	
   409                           ; 1 bytes @ 0x0
   410                           
   411                           
   412                           ; 1 bytes @ 0x0
   413     0075                     	ds	5
   414                           
   415                           	psect	cstackBANK0
   416     0020                     __pcstackBANK0:
   417     0020                     ??_Numpad_Read:
   418     0020                     ??_Lcd_Port:	
   419                           ; 1 bytes @ 0x0
   420                           
   421     0020                     ??_UART_TxChar:	
   422                           ; 1 bytes @ 0x0
   423                           
   424     0020                     ?___awdiv:	
   425                           ; 1 bytes @ 0x0
   426                           
   427     0020                     ?___lwdiv:	
   428                           ; 2 bytes @ 0x0
   429                           
   430     0020                     ?___lwmod:	
   431                           ; 2 bytes @ 0x0
   432                           
   433     0020                     ?___aldiv:	
   434                           ; 2 bytes @ 0x0
   435                           
   436     0020                     Lcd_Port@a:	
   437                           ; 4 bytes @ 0x0
   438                           
   439     0020                     ___awdiv@divisor:	
   440                           ; 1 bytes @ 0x0
   441                           
   442     0020                     ___lwdiv@divisor:	
   443                           ; 2 bytes @ 0x0
   444                           
   445     0020                     ___lwmod@divisor:	
   446                           ; 2 bytes @ 0x0
   447                           
   448     0020                     ___aldiv@divisor:	
   449                           ; 2 bytes @ 0x0
   450                           
   451                           
   452                           ; 4 bytes @ 0x0
   453     0020                     	ds	1
   454     0021                     ??_Lcd_Cmd:
   455     0021                     ??_Lcd_Write_Char:	
   456                           ; 1 bytes @ 0x1
   457                           
   458     0021                     UART_TxChar@ch:	
   459                           ; 1 bytes @ 0x1
   460                           
   461                           
   462                           ; 1 bytes @ 0x1
   463     0021                     	ds	1
   464     0022                     ??_UART_TxString:
   465     0022                     Numpad_Read@currentKey:	
   466                           ; 1 bytes @ 0x2
   467                           
   468     0022                     Lcd_Write_Char@temp:	
   469                           ; 1 bytes @ 0x2
   470                           
   471     0022                     ___awdiv@dividend:	
   472                           ; 1 bytes @ 0x2
   473                           
   474     0022                     ___lwdiv@dividend:	
   475                           ; 2 bytes @ 0x2
   476                           
   477     0022                     ___lwmod@dividend:	
   478                           ; 2 bytes @ 0x2
   479                           
   480                           
   481                           ; 2 bytes @ 0x2
   482     0022                     	ds	1
   483     0023                     Numpad_Read@currentKeyVal:
   484     0023                     Lcd_Cmd@a:	
   485                           ; 1 bytes @ 0x3
   486                           
   487     0023                     Lcd_Write_Char@y:	
   488                           ; 1 bytes @ 0x3
   489                           
   490     0023                     UART_TxString@str:	
   491                           ; 1 bytes @ 0x3
   492                           
   493                           
   494                           ; 1 bytes @ 0x3
   495     0023                     	ds	1
   496     0024                     ??_Lcd_Init:
   497     0024                     ?_Lcd_Set_Cursor:	
   498                           ; 1 bytes @ 0x4
   499                           
   500     0024                     ??___awdiv:	
   501                           ; 1 bytes @ 0x4
   502                           
   503     0024                     ??___lwdiv:	
   504                           ; 1 bytes @ 0x4
   505                           
   506     0024                     ??___lwmod:	
   507                           ; 1 bytes @ 0x4
   508                           
   509     0024                     Numpad_Read@colScan:	
   510                           ; 1 bytes @ 0x4
   511                           
   512     0024                     Lcd_Set_Cursor@colonna:	
   513                           ; 1 bytes @ 0x4
   514                           
   515     0024                     Lcd_Write_Char@a:	
   516                           ; 1 bytes @ 0x4
   517                           
   518     0024                     UART_TxString@i:	
   519                           ; 1 bytes @ 0x4
   520                           
   521     0024                     ___aldiv@dividend:	
   522                           ; 1 bytes @ 0x4
   523                           
   524                           
   525                           ; 4 bytes @ 0x4
   526     0024                     	ds	1
   527     0025                     ??_Lcd_Set_Cursor:
   528     0025                     ?_Lcd_Write_String:	
   529                           ; 1 bytes @ 0x5
   530                           
   531     0025                     Numpad_Read@rowScan:	
   532                           ; 1 bytes @ 0x5
   533                           
   534     0025                     ___awdiv@counter:	
   535                           ; 1 bytes @ 0x5
   536                           
   537     0025                     ___lwdiv@counter:	
   538                           ; 1 bytes @ 0x5
   539                           
   540     0025                     ___lwmod@counter:	
   541                           ; 1 bytes @ 0x5
   542                           
   543     0025                     Lcd_Write_String@a:	
   544                           ; 1 bytes @ 0x5
   545                           
   546                           
   547                           ; 2 bytes @ 0x5
   548     0025                     	ds	1
   549     0026                     Lcd_Set_Cursor@riga:
   550     0026                     ___awdiv@sign:	
   551                           ; 1 bytes @ 0x6
   552                           
   553     0026                     ___lwdiv@quotient:	
   554                           ; 1 bytes @ 0x6
   555                           
   556                           
   557                           ; 2 bytes @ 0x6
   558     0026                     	ds	1
   559     0027                     ??_Lcd_Write_String:
   560     0027                     Lcd_Set_Cursor@z:	
   561                           ; 1 bytes @ 0x7
   562                           
   563     0027                     ___awdiv@quotient:	
   564                           ; 1 bytes @ 0x7
   565                           
   566                           
   567                           ; 2 bytes @ 0x7
   568     0027                     	ds	1
   569     0028                     ??___aldiv:
   570     0028                     Lcd_Set_Cursor@y:	
   571                           ; 1 bytes @ 0x8
   572                           
   573                           
   574                           ; 1 bytes @ 0x8
   575     0028                     	ds	1
   576     0029                     ?_UART_TxInt:
   577     0029                     Lcd_Set_Cursor@temp:	
   578                           ; 1 bytes @ 0x9
   579                           
   580     0029                     ___aldiv@counter:	
   581                           ; 1 bytes @ 0x9
   582                           
   583     0029                     UART_TxInt@val:	
   584                           ; 1 bytes @ 0x9
   585                           
   586                           
   587                           ; 2 bytes @ 0x9
   588     0029                     	ds	1
   589     002A                     ___aldiv@sign:
   590     002A                     Lcd_Write_String@i:	
   591                           ; 1 bytes @ 0xA
   592                           
   593                           
   594                           ; 2 bytes @ 0xA
   595     002A                     	ds	1
   596     002B                     ??_UART_TxInt:
   597     002B                     ___aldiv@quotient:	
   598                           ; 1 bytes @ 0xB
   599                           
   600                           
   601                           ; 4 bytes @ 0xB
   602     002B                     	ds	1
   603     002C                     ?_Lcd_Write_Int:
   604     002C                     Lcd_Write_Int@val:	
   605                           ; 2 bytes @ 0xC
   606                           
   607                           
   608                           ; 2 bytes @ 0xC
   609     002C                     	ds	2
   610     002E                     ??_Lcd_Write_Int:
   611     002E                     UART_TxInt@buffer:	
   612                           ; 1 bytes @ 0xE
   613                           
   614                           
   615                           ; 50 bytes @ 0xE
   616     002E                     	ds	1
   617     002F                     ?_UART_init:
   618     002F                     UART_init@baudrate:	
   619                           ; 1 bytes @ 0xF
   620                           
   621                           
   622                           ; 4 bytes @ 0xF
   623     002F                     	ds	2
   624     0031                     Lcd_Write_Int@buffer:
   625                           
   626                           ; 50 bytes @ 0x11
   627     0031                     	ds	2
   628     0033                     ??_UART_init:
   629                           
   630                           ; 1 bytes @ 0x13
   631     0033                     	ds	45
   632     0060                     UART_TxInt@isNeg:
   633                           
   634                           ; 1 bytes @ 0x40
   635     0060                     	ds	1
   636     0061                     UART_TxInt@n1:
   637                           
   638                           ; 2 bytes @ 0x41
   639     0061                     	ds	2
   640     0063                     Lcd_Write_Int@isNeg:
   641     0063                     UART_TxInt@n:	
   642                           ; 1 bytes @ 0x43
   643                           
   644                           
   645                           ; 2 bytes @ 0x43
   646     0063                     	ds	1
   647     0064                     Lcd_Write_Int@n1:
   648                           
   649                           ; 2 bytes @ 0x44
   650     0064                     	ds	1
   651     0065                     UART_TxInt@t:
   652                           
   653                           ; 2 bytes @ 0x45
   654     0065                     	ds	1
   655     0066                     Lcd_Write_Int@n:
   656                           
   657                           ; 2 bytes @ 0x46
   658     0066                     	ds	1
   659     0067                     UART_TxInt@i:
   660                           
   661                           ; 2 bytes @ 0x47
   662     0067                     	ds	1
   663     0068                     Lcd_Write_Int@t:
   664                           
   665                           ; 2 bytes @ 0x48
   666     0068                     	ds	2
   667     006A                     Lcd_Write_Int@i:
   668                           
   669                           ; 2 bytes @ 0x4A
   670     006A                     	ds	2
   671                           
   672                           	psect	maintext
   673     0029                     __pmaintext:	
   674 ;;
   675 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   676 ;;
   677 ;; *************** function _main *****************
   678 ;; Defined at:
   679 ;;		line 84 in file "main.c"
   680 ;; Parameters:    Size  Location     Type
   681 ;;		None
   682 ;; Auto vars:     Size  Location     Type
   683 ;;  speed_buffer    1    3[BANK1 ] unsigned char 
   684 ;;  numpad_value    1    2[BANK1 ] unsigned char 
   685 ;; Return value:  Size  Location     Type
   686 ;;                  1    wreg      void 
   687 ;; Registers used:
   688 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   689 ;; Tracked objects:
   690 ;;		On entry : B00/0
   691 ;;		On exit  : 0/0
   692 ;;		Unchanged: 0/0
   693 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   694 ;;      Params:         0       0       0       0       0
   695 ;;      Locals:         0       0       2       0       0
   696 ;;      Temps:          0       0       2       0       0
   697 ;;      Totals:         0       0       4       0       0
   698 ;;Total ram usage:        4 bytes
   699 ;; Hardware stack levels required when called: 5
   700 ;; This function calls:
   701 ;;		_Lcd_Init
   702 ;;		_Lcd_Set_Cursor
   703 ;;		_Lcd_Write_Int
   704 ;;		_Lcd_Write_String
   705 ;;		_Numpad_Read
   706 ;;		_UART_TxInt
   707 ;;		_UART_init
   708 ;; This function is called by:
   709 ;;		Startup code after reset
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713     0029                     _main:	
   714                           ;psect for function _main
   715                           
   716     0029                     l2258:	
   717                           ;incstack = 0
   718                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   719                           
   720                           
   721                           ;main.c: 85:     INTCON |= 0xA0;
   722     0029  30A0               	movlw	160
   723     002A  1683               	bsf	3,5	;RP0=1, select bank1
   724     002B  1303               	bcf	3,6	;RP1=0, select bank1
   725     002C  00C6               	movwf	??_main^(0+128)
   726     002D  0846               	movf	??_main^(0+128),w
   727     002E  048B               	iorwf	11,f	;volatile
   728                           
   729                           ;main.c: 86:     OPTION_REG |= 0x81;
   730     002F  3081               	movlw	129
   731     0030  00C6               	movwf	??_main^(0+128)
   732     0031  0846               	movf	??_main^(0+128),w
   733     0032  0481               	iorwf	1,f	;volatile
   734                           
   735                           ;main.c: 87:     T1CON |= 0x07;
   736     0033  3007               	movlw	7
   737     0034  00C6               	movwf	??_main^(0+128)
   738     0035  0846               	movf	??_main^(0+128),w
   739     0036  1283               	bcf	3,5	;RP0=0, select bank0
   740     0037  1303               	bcf	3,6	;RP1=0, select bank0
   741     0038  0490               	iorwf	16,f	;volatile
   742                           
   743                           ;main.c: 88:     TRISC &= ~0x04;
   744     0039  30FB               	movlw	251
   745     003A  1683               	bsf	3,5	;RP0=1, select bank1
   746     003B  1303               	bcf	3,6	;RP1=0, select bank1
   747     003C  00C6               	movwf	??_main^(0+128)
   748     003D  0846               	movf	??_main^(0+128),w
   749     003E  0587               	andwf	7,f	;volatile
   750                           
   751                           ;main.c: 89:     CCP1CON |= 0x0F;
   752     003F  300F               	movlw	15
   753     0040  00C6               	movwf	??_main^(0+128)
   754     0041  0846               	movf	??_main^(0+128),w
   755     0042  1283               	bcf	3,5	;RP0=0, select bank0
   756     0043  1303               	bcf	3,6	;RP1=0, select bank0
   757     0044  0497               	iorwf	23,f	;volatile
   758     0045                     l2260:
   759                           
   760                           ;main.c: 90:     PR2 = 0xF9;
   761     0045  30F9               	movlw	249
   762     0046  1683               	bsf	3,5	;RP0=1, select bank1
   763     0047  1303               	bcf	3,6	;RP1=0, select bank1
   764     0048  0092               	movwf	18	;volatile
   765     0049                     l2262:
   766                           
   767                           ;main.c: 91:     CCPR1L = 120;
   768     0049  3078               	movlw	120
   769     004A  1283               	bcf	3,5	;RP0=0, select bank0
   770     004B  1303               	bcf	3,6	;RP1=0, select bank0
   771     004C  0095               	movwf	21	;volatile
   772     004D                     l2264:
   773                           
   774                           ;main.c: 92:     TMR2ON = 1;
   775     004D  1512               	bsf	18,2	;volatile
   776     004E                     l2266:
   777                           
   778                           ;main.c: 95:     Lcd_Init();
   779     004E  120A  118A  24F3  120A  118A  	fcall	_Lcd_Init
   780     0053                     l2268:
   781                           
   782                           ;main.c: 96:     UART_init(115200);
   783     0053  3000               	movlw	0
   784     0054  1283               	bcf	3,5	;RP0=0, select bank0
   785     0055  1303               	bcf	3,6	;RP1=0, select bank0
   786     0056  00B2               	movwf	UART_init@baudrate+3
   787     0057  3001               	movlw	1
   788     0058  00B1               	movwf	UART_init@baudrate+2
   789     0059  30C2               	movlw	194
   790     005A  00B0               	movwf	UART_init@baudrate+1
   791     005B  3000               	movlw	0
   792     005C  00AF               	movwf	UART_init@baudrate
   793     005D  120A  118A  26A1  120A  118A  	fcall	_UART_init
   794     0062                     l2270:
   795                           
   796                           ;main.c: 98:     unsigned char numpad_value, speed_buffer;;main.c: 99:     SelectedSpeed
      +                           = Speed[0];
   797     0062  300D               	movlw	low (_Speed-__stringbase)
   798     0063  0084               	movwf	4
   799     0064  120A  118A  275D  120A  118A  	fcall	stringdir
   800     0069  1283               	bcf	3,5	;RP0=0, select bank0
   801     006A  1303               	bcf	3,6	;RP1=0, select bank0
   802     006B  00EF               	movwf	_SelectedSpeed
   803     006C                     l2272:
   804                           
   805                           ;main.c: 100:     Lcd_Write_Int(SelectedSpeed);
   806     006C  086F               	movf	_SelectedSpeed,w
   807     006D  1683               	bsf	3,5	;RP0=1, select bank1
   808     006E  1303               	bcf	3,6	;RP1=0, select bank1
   809     006F  00C6               	movwf	??_main^(0+128)
   810     0070  01C7               	clrf	(??_main^(0+128)+1)
   811     0071  0846               	movf	??_main^(0+128),w
   812     0072  1283               	bcf	3,5	;RP0=0, select bank0
   813     0073  1303               	bcf	3,6	;RP1=0, select bank0
   814     0074  00AC               	movwf	Lcd_Write_Int@val
   815     0075  1683               	bsf	3,5	;RP0=1, select bank1
   816     0076  1303               	bcf	3,6	;RP1=0, select bank1
   817     0077  0847               	movf	(??_main+1)^(0+128),w
   818     0078  1283               	bcf	3,5	;RP0=0, select bank0
   819     0079  1303               	bcf	3,6	;RP1=0, select bank0
   820     007A  00AD               	movwf	Lcd_Write_Int@val+1
   821     007B  120A  118A  218A  120A  118A  	fcall	_Lcd_Write_Int
   822     0080                     l2274:
   823                           
   824                           ;main.c: 104:         numpad_value = Numpad_Read();
   825     0080  120A  118A  23E6  120A  118A  	fcall	_Numpad_Read
   826     0085  1683               	bsf	3,5	;RP0=1, select bank1
   827     0086  1303               	bcf	3,6	;RP1=0, select bank1
   828     0087  00C8               	movwf	main@numpad_value^(0+128)
   829     0088                     l2276:
   830                           
   831                           ;main.c: 106:         if (numpad_value <= 0x04) {
   832     0088  3005               	movlw	5
   833     0089  0248               	subwf	main@numpad_value^(0+128),w
   834     008A  1803               	skipnc
   835     008B  288D               	goto	u2461
   836     008C  288E               	goto	u2460
   837     008D                     u2461:
   838     008D  28B8               	goto	l2284
   839     008E                     u2460:
   840     008E                     l2278:
   841                           
   842                           ;main.c: 107:             SelectedSpeed = Speed[--numpad_value];
   843     008E  3001               	movlw	1
   844     008F  02C8               	subwf	main@numpad_value^(0+128),f
   845     0090  0848               	movf	main@numpad_value^(0+128),w
   846     0091  3E0D               	addlw	low ((_Speed-__stringbase)| (0+32768))
   847     0092  0084               	movwf	4
   848     0093  120A  118A  275D  120A  118A  	fcall	stringdir
   849     0098  1283               	bcf	3,5	;RP0=0, select bank0
   850     0099  1303               	bcf	3,6	;RP1=0, select bank0
   851     009A  00EF               	movwf	_SelectedSpeed
   852     009B                     l2280:
   853                           
   854                           ;main.c: 108:             Lcd_Set_Cursor(0, 0);
   855     009B  01A4               	clrf	Lcd_Set_Cursor@colonna
   856     009C  3000               	movlw	0
   857     009D  120A  118A  25CA  120A  118A  	fcall	_Lcd_Set_Cursor
   858     00A2                     l2282:
   859                           
   860                           ;main.c: 109:             Lcd_Write_Int(SelectedSpeed);
   861     00A2  1283               	bcf	3,5	;RP0=0, select bank0
   862     00A3  1303               	bcf	3,6	;RP1=0, select bank0
   863     00A4  086F               	movf	_SelectedSpeed,w
   864     00A5  1683               	bsf	3,5	;RP0=1, select bank1
   865     00A6  1303               	bcf	3,6	;RP1=0, select bank1
   866     00A7  00C6               	movwf	??_main^(0+128)
   867     00A8  01C7               	clrf	(??_main^(0+128)+1)
   868     00A9  0846               	movf	??_main^(0+128),w
   869     00AA  1283               	bcf	3,5	;RP0=0, select bank0
   870     00AB  1303               	bcf	3,6	;RP1=0, select bank0
   871     00AC  00AC               	movwf	Lcd_Write_Int@val
   872     00AD  1683               	bsf	3,5	;RP0=1, select bank1
   873     00AE  1303               	bcf	3,6	;RP1=0, select bank1
   874     00AF  0847               	movf	(??_main+1)^(0+128),w
   875     00B0  1283               	bcf	3,5	;RP0=0, select bank0
   876     00B1  1303               	bcf	3,6	;RP1=0, select bank0
   877     00B2  00AD               	movwf	Lcd_Write_Int@val+1
   878     00B3  120A  118A  218A  120A  118A  	fcall	_Lcd_Write_Int
   879     00B8                     l2284:
   880                           
   881                           ;main.c: 111:         if (update_lcd) {
   882     00B8  0874               	movf	_update_lcd,w
   883     00B9  1903               	btfsc	3,2
   884     00BA  28BC               	goto	u2471
   885     00BB  28BD               	goto	u2470
   886     00BC                     u2471:
   887     00BC  28E6               	goto	l2294
   888     00BD                     u2470:
   889     00BD                     l2286:
   890                           
   891                           ;main.c: 112:             Lcd_Set_Cursor(1, 0);
   892     00BD  1283               	bcf	3,5	;RP0=0, select bank0
   893     00BE  1303               	bcf	3,6	;RP1=0, select bank0
   894     00BF  01A4               	clrf	Lcd_Set_Cursor@colonna
   895     00C0  3001               	movlw	1
   896     00C1  120A  118A  25CA  120A  118A  	fcall	_Lcd_Set_Cursor
   897     00C6                     l2288:
   898                           
   899                           ;main.c: 113:             Lcd_Write_String("                ");
   900     00C6  3011               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   901     00C7  1283               	bcf	3,5	;RP0=0, select bank0
   902     00C8  1303               	bcf	3,6	;RP1=0, select bank0
   903     00C9  00A5               	movwf	Lcd_Write_String@a
   904     00CA  3080               	movlw	128
   905     00CB  00A6               	movwf	Lcd_Write_String@a+1
   906     00CC  120A  118A  265B  120A  118A  	fcall	_Lcd_Write_String
   907     00D1                     l2290:
   908                           
   909                           ;main.c: 114:             Lcd_Set_Cursor(1, 0);
   910     00D1  1283               	bcf	3,5	;RP0=0, select bank0
   911     00D2  1303               	bcf	3,6	;RP1=0, select bank0
   912     00D3  01A4               	clrf	Lcd_Set_Cursor@colonna
   913     00D4  3001               	movlw	1
   914     00D5  120A  118A  25CA  120A  118A  	fcall	_Lcd_Set_Cursor
   915                           
   916                           ;main.c: 115:             Lcd_Write_Int(MotorSpeed);
   917     00DA  1283               	bcf	3,5	;RP0=0, select bank0
   918     00DB  1303               	bcf	3,6	;RP1=0, select bank0
   919     00DC  086D               	movf	_MotorSpeed+1,w
   920     00DD  00AD               	movwf	Lcd_Write_Int@val+1
   921     00DE  086C               	movf	_MotorSpeed,w
   922     00DF  00AC               	movwf	Lcd_Write_Int@val
   923     00E0  120A  118A  218A  120A  118A  	fcall	_Lcd_Write_Int
   924     00E5                     l2292:
   925                           
   926                           ;main.c: 116:             update_lcd = 0;
   927     00E5  01F4               	clrf	_update_lcd
   928     00E6                     l2294:
   929                           
   930                           ;main.c: 119:         if (update_speed) {
   931     00E6  0872               	movf	_update_speed,w
   932     00E7  1903               	btfsc	3,2
   933     00E8  28EA               	goto	u2481
   934     00E9  28EB               	goto	u2480
   935     00EA                     u2481:
   936     00EA  2933               	goto	l2310
   937     00EB                     u2480:
   938     00EB                     l2296:
   939                           
   940                           ;main.c: 121:             if (MotorSpeed > SelectedSpeed && CCPR1L > 0) CCPR1L -= 1;
   941     00EB  1283               	bcf	3,5	;RP0=0, select bank0
   942     00EC  1303               	bcf	3,6	;RP1=0, select bank0
   943     00ED  086F               	movf	_SelectedSpeed,w
   944     00EE  1683               	bsf	3,5	;RP0=1, select bank1
   945     00EF  1303               	bcf	3,6	;RP1=0, select bank1
   946     00F0  00C6               	movwf	??_main^(0+128)
   947     00F1  01C7               	clrf	(??_main^(0+128)+1)
   948     00F2  1283               	bcf	3,5	;RP0=0, select bank0
   949     00F3  1303               	bcf	3,6	;RP1=0, select bank0
   950     00F4  086D               	movf	_MotorSpeed+1,w
   951     00F5  1683               	bsf	3,5	;RP0=1, select bank1
   952     00F6  1303               	bcf	3,6	;RP1=0, select bank1
   953     00F7  0247               	subwf	(??_main+1)^(0+128),w
   954     00F8  1D03               	skipz
   955     00F9  2900               	goto	u2495
   956     00FA  1283               	bcf	3,5	;RP0=0, select bank0
   957     00FB  1303               	bcf	3,6	;RP1=0, select bank0
   958     00FC  086C               	movf	_MotorSpeed,w
   959     00FD  1683               	bsf	3,5	;RP0=1, select bank1
   960     00FE  1303               	bcf	3,6	;RP1=0, select bank1
   961     00FF  0246               	subwf	??_main^(0+128),w
   962     0100                     u2495:
   963     0100  1803               	skipnc
   964     0101  2903               	goto	u2491
   965     0102  2904               	goto	u2490
   966     0103                     u2491:
   967     0103  290E               	goto	l2302
   968     0104                     u2490:
   969     0104                     l2298:
   970     0104  1283               	bcf	3,5	;RP0=0, select bank0
   971     0105  1303               	bcf	3,6	;RP1=0, select bank0
   972     0106  0815               	movf	21,w	;volatile
   973     0107  1903               	btfsc	3,2
   974     0108  290A               	goto	u2501
   975     0109  290B               	goto	u2500
   976     010A                     u2501:
   977     010A  290E               	goto	l2302
   978     010B                     u2500:
   979     010B                     l2300:
   980     010B  3001               	movlw	1
   981     010C  0295               	subwf	21,f	;volatile
   982     010D  2932               	goto	l2308
   983     010E                     l2302:
   984     010E  1283               	bcf	3,5	;RP0=0, select bank0
   985     010F  086F               	movf	_SelectedSpeed,w
   986     0110  1683               	bsf	3,5	;RP0=1, select bank1
   987     0111  1303               	bcf	3,6	;RP1=0, select bank1
   988     0112  00C6               	movwf	??_main^(0+128)
   989     0113  01C7               	clrf	(??_main^(0+128)+1)
   990     0114  0847               	movf	(??_main+1)^(0+128),w
   991     0115  1283               	bcf	3,5	;RP0=0, select bank0
   992     0116  1303               	bcf	3,6	;RP1=0, select bank0
   993     0117  026D               	subwf	_MotorSpeed+1,w
   994     0118  1D03               	skipz
   995     0119  2920               	goto	u2515
   996     011A  1683               	bsf	3,5	;RP0=1, select bank1
   997     011B  1303               	bcf	3,6	;RP1=0, select bank1
   998     011C  0846               	movf	??_main^(0+128),w
   999     011D  1283               	bcf	3,5	;RP0=0, select bank0
  1000     011E  1303               	bcf	3,6	;RP1=0, select bank0
  1001     011F  026C               	subwf	_MotorSpeed,w
  1002     0120                     u2515:
  1003     0120  1803               	skipnc
  1004     0121  2923               	goto	u2511
  1005     0122  2924               	goto	u2510
  1006     0123                     u2511:
  1007     0123  2932               	goto	l2308
  1008     0124                     u2510:
  1009     0124                     l2304:
  1010     0124  30F9               	movlw	249
  1011     0125  0215               	subwf	21,w	;volatile
  1012     0126  1803               	skipnc
  1013     0127  2929               	goto	u2521
  1014     0128  292A               	goto	u2520
  1015     0129                     u2521:
  1016     0129  2932               	goto	l2308
  1017     012A                     u2520:
  1018     012A                     l2306:
  1019     012A  3001               	movlw	1
  1020     012B  1683               	bsf	3,5	;RP0=1, select bank1
  1021     012C  1303               	bcf	3,6	;RP1=0, select bank1
  1022     012D  00C6               	movwf	??_main^(0+128)
  1023     012E  0846               	movf	??_main^(0+128),w
  1024     012F  1283               	bcf	3,5	;RP0=0, select bank0
  1025     0130  1303               	bcf	3,6	;RP1=0, select bank0
  1026     0131  0795               	addwf	21,f	;volatile
  1027     0132                     l2308:
  1028                           
  1029                           ;main.c: 124:             update_speed = 0;
  1030     0132  01F2               	clrf	_update_speed
  1031     0133                     l2310:
  1032                           
  1033                           ;main.c: 126:         if (update_UART) {
  1034     0133  0873               	movf	_update_UART,w
  1035     0134  1903               	btfsc	3,2
  1036     0135  2937               	goto	u2531
  1037     0136  2938               	goto	u2530
  1038     0137                     u2531:
  1039     0137  2944               	goto	l2316
  1040     0138                     u2530:
  1041     0138                     l2312:
  1042                           
  1043                           ;main.c: 127:             UART_TxInt(MotorSpeed);
  1044     0138  1283               	bcf	3,5	;RP0=0, select bank0
  1045     0139  1303               	bcf	3,6	;RP1=0, select bank0
  1046     013A  086D               	movf	_MotorSpeed+1,w
  1047     013B  00AA               	movwf	UART_TxInt@val+1
  1048     013C  086C               	movf	_MotorSpeed,w
  1049     013D  00A9               	movwf	UART_TxInt@val
  1050     013E  120A  118A  226B  120A  118A  	fcall	_UART_TxInt
  1051     0143                     l2314:
  1052                           
  1053                           ;main.c: 128:             update_UART = 0;
  1054     0143  01F3               	clrf	_update_UART
  1055     0144                     l2316:
  1056                           
  1057                           ;main.c: 131:         if (data_received) {
  1058     0144  0871               	movf	_data_received,w
  1059     0145  1903               	btfsc	3,2
  1060     0146  2948               	goto	u2541
  1061     0147  2949               	goto	u2540
  1062     0148                     u2541:
  1063     0148  2880               	goto	l2274
  1064     0149                     u2540:
  1065     0149                     l2318:
  1066                           
  1067                           ;main.c: 132:             speed_buffer = Uart_Data[0];
  1068     0149  1683               	bsf	3,5	;RP0=1, select bank1
  1069     014A  1303               	bcf	3,6	;RP1=0, select bank1
  1070     014B  0820               	movf	_Uart_Data^(0+128),w
  1071     014C  00C9               	movwf	main@speed_buffer^(0+128)
  1072                           
  1073                           ;main.c: 133:             if (speed_buffer <= 0x04 && speed_buffer >= 0x01) {
  1074     014D  3005               	movlw	5
  1075     014E  0249               	subwf	main@speed_buffer^(0+128),w
  1076     014F  1803               	skipnc
  1077     0150  2952               	goto	u2551
  1078     0151  2953               	goto	u2550
  1079     0152                     u2551:
  1080     0152  2982               	goto	l2328
  1081     0153                     u2550:
  1082     0153                     l2320:
  1083     0153  0849               	movf	main@speed_buffer^(0+128),w
  1084     0154  1903               	btfsc	3,2
  1085     0155  2957               	goto	u2561
  1086     0156  2958               	goto	u2560
  1087     0157                     u2561:
  1088     0157  2982               	goto	l2328
  1089     0158                     u2560:
  1090     0158                     l2322:
  1091                           
  1092                           ;main.c: 134:                 SelectedSpeed = Speed[--speed_buffer];
  1093     0158  3001               	movlw	1
  1094     0159  02C9               	subwf	main@speed_buffer^(0+128),f
  1095     015A  0849               	movf	main@speed_buffer^(0+128),w
  1096     015B  3E0D               	addlw	low ((_Speed-__stringbase)| (0+32768))
  1097     015C  0084               	movwf	4
  1098     015D  120A  118A  275D  120A  118A  	fcall	stringdir
  1099     0162  1283               	bcf	3,5	;RP0=0, select bank0
  1100     0163  1303               	bcf	3,6	;RP1=0, select bank0
  1101     0164  00EF               	movwf	_SelectedSpeed
  1102     0165                     l2324:
  1103                           
  1104                           ;main.c: 135:                 Lcd_Set_Cursor(0, 0);
  1105     0165  01A4               	clrf	Lcd_Set_Cursor@colonna
  1106     0166  3000               	movlw	0
  1107     0167  120A  118A  25CA  120A  118A  	fcall	_Lcd_Set_Cursor
  1108     016C                     l2326:
  1109                           
  1110                           ;main.c: 136:                 Lcd_Write_Int(SelectedSpeed);
  1111     016C  1283               	bcf	3,5	;RP0=0, select bank0
  1112     016D  1303               	bcf	3,6	;RP1=0, select bank0
  1113     016E  086F               	movf	_SelectedSpeed,w
  1114     016F  1683               	bsf	3,5	;RP0=1, select bank1
  1115     0170  1303               	bcf	3,6	;RP1=0, select bank1
  1116     0171  00C6               	movwf	??_main^(0+128)
  1117     0172  01C7               	clrf	(??_main^(0+128)+1)
  1118     0173  0846               	movf	??_main^(0+128),w
  1119     0174  1283               	bcf	3,5	;RP0=0, select bank0
  1120     0175  1303               	bcf	3,6	;RP1=0, select bank0
  1121     0176  00AC               	movwf	Lcd_Write_Int@val
  1122     0177  1683               	bsf	3,5	;RP0=1, select bank1
  1123     0178  1303               	bcf	3,6	;RP1=0, select bank1
  1124     0179  0847               	movf	(??_main+1)^(0+128),w
  1125     017A  1283               	bcf	3,5	;RP0=0, select bank0
  1126     017B  1303               	bcf	3,6	;RP1=0, select bank0
  1127     017C  00AD               	movwf	Lcd_Write_Int@val+1
  1128     017D  120A  118A  218A  120A  118A  	fcall	_Lcd_Write_Int
  1129     0182                     l2328:
  1130                           
  1131                           ;main.c: 138:             data_received = 0;
  1132     0182  01F1               	clrf	_data_received
  1133     0183                     l2330:
  1134                           
  1135                           ;main.c: 139:             data_i = 0;
  1136     0183  1283               	bcf	3,5	;RP0=0, select bank0
  1137     0184  1303               	bcf	3,6	;RP1=0, select bank0
  1138     0185  01EE               	clrf	_data_i
  1139     0186  2880               	goto	l2274
  1140     0187  120A  118A  280E   	ljmp	start
  1141     018A                     __end_of_main:
  1142                           
  1143                           	psect	text1
  1144     06A1                     __ptext1:	
  1145 ;; *************** function _UART_init *****************
  1146 ;; Defined at:
  1147 ;;		line 349 in file "main.c"
  1148 ;; Parameters:    Size  Location     Type
  1149 ;;  baudrate        4   15[BANK0 ] long 
  1150 ;; Auto vars:     Size  Location     Type
  1151 ;;		None
  1152 ;; Return value:  Size  Location     Type
  1153 ;;                  1    wreg      void 
  1154 ;; Registers used:
  1155 ;;		wreg, status,2, status,0, pclath, cstack
  1156 ;; Tracked objects:
  1157 ;;		On entry : 0/0
  1158 ;;		On exit  : 0/0
  1159 ;;		Unchanged: 0/0
  1160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1161 ;;      Params:         0       4       0       0       0
  1162 ;;      Locals:         0       0       0       0       0
  1163 ;;      Temps:          0       4       0       0       0
  1164 ;;      Totals:         0       8       0       0       0
  1165 ;;Total ram usage:        8 bytes
  1166 ;; Hardware stack levels used: 1
  1167 ;; Hardware stack levels required when called: 2
  1168 ;; This function calls:
  1169 ;;		___aldiv
  1170 ;; This function is called by:
  1171 ;;		_main
  1172 ;; This function uses a non-reentrant model
  1173 ;;
  1174                           
  1175     06A1                     _UART_init:	
  1176                           ;psect for function _UART_init
  1177                           
  1178     06A1                     l2090:	
  1179                           ;incstack = 0
  1180                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  1181                           
  1182                           
  1183                           ;main.c: 351:     TXSTA |= 0x24;
  1184     06A1  3024               	movlw	36
  1185     06A2  1283               	bcf	3,5	;RP0=0, select bank0
  1186     06A3  1303               	bcf	3,6	;RP1=0, select bank0
  1187     06A4  00B3               	movwf	??_UART_init
  1188     06A5  0833               	movf	??_UART_init,w
  1189     06A6  1683               	bsf	3,5	;RP0=1, select bank1
  1190     06A7  1303               	bcf	3,6	;RP1=0, select bank1
  1191     06A8  0498               	iorwf	24,f	;volatile
  1192     06A9                     l2092:
  1193                           
  1194                           ;main.c: 352:     RCSTA = 0x90;
  1195     06A9  3090               	movlw	144
  1196     06AA  1283               	bcf	3,5	;RP0=0, select bank0
  1197     06AB  1303               	bcf	3,6	;RP1=0, select bank0
  1198     06AC  0098               	movwf	24	;volatile
  1199     06AD                     l2094:
  1200                           
  1201                           ;main.c: 353:     SPBRG = (char) (20000000 / (long) (64UL * baudrate)) - 1;
  1202     06AD  082F               	movf	UART_init@baudrate,w
  1203     06AE  00B3               	movwf	??_UART_init
  1204     06AF  0830               	movf	UART_init@baudrate+1,w
  1205     06B0  00B4               	movwf	??_UART_init+1
  1206     06B1  0831               	movf	UART_init@baudrate+2,w
  1207     06B2  00B5               	movwf	??_UART_init+2
  1208     06B3  0832               	movf	UART_init@baudrate+3,w
  1209     06B4  00B6               	movwf	??_UART_init+3
  1210     06B5  3006               	movlw	6
  1211     06B6                     u2185:
  1212     06B6  1003               	clrc
  1213     06B7  0DB3               	rlf	??_UART_init,f
  1214     06B8  0DB4               	rlf	??_UART_init+1,f
  1215     06B9  0DB5               	rlf	??_UART_init+2,f
  1216     06BA  0DB6               	rlf	??_UART_init+3,f
  1217     06BB                     u2180:
  1218     06BB  3EFF               	addlw	-1
  1219     06BC  1D03               	skipz
  1220     06BD  2EB6               	goto	u2185
  1221     06BE  0836               	movf	??_UART_init+3,w
  1222     06BF  00A3               	movwf	___aldiv@divisor+3
  1223     06C0  0835               	movf	??_UART_init+2,w
  1224     06C1  00A2               	movwf	___aldiv@divisor+2
  1225     06C2  0834               	movf	??_UART_init+1,w
  1226     06C3  00A1               	movwf	___aldiv@divisor+1
  1227     06C4  0833               	movf	??_UART_init,w
  1228     06C5  00A0               	movwf	___aldiv@divisor
  1229     06C6  3001               	movlw	1
  1230     06C7  00A7               	movwf	___aldiv@dividend+3
  1231     06C8  3031               	movlw	49
  1232     06C9  00A6               	movwf	___aldiv@dividend+2
  1233     06CA  302D               	movlw	45
  1234     06CB  00A5               	movwf	___aldiv@dividend+1
  1235     06CC  3000               	movlw	0
  1236     06CD  00A4               	movwf	___aldiv@dividend
  1237     06CE  120A  118A  2349  120A  118A  	fcall	___aldiv
  1238     06D3  1283               	bcf	3,5	;RP0=0, select bank0
  1239     06D4  1303               	bcf	3,6	;RP1=0, select bank0
  1240     06D5  0820               	movf	?___aldiv,w
  1241     06D6  3EFF               	addlw	255
  1242     06D7  1683               	bsf	3,5	;RP0=1, select bank1
  1243     06D8  1303               	bcf	3,6	;RP1=0, select bank1
  1244     06D9  0099               	movwf	25	;volatile
  1245     06DA                     l2096:
  1246                           
  1247                           ;main.c: 354:     INTCON |= 0x80;
  1248     06DA  178B               	bsf	11,7	;volatile
  1249     06DB                     l2098:
  1250                           
  1251                           ;main.c: 355:     INTCON |= 0x40;
  1252     06DB  170B               	bsf	11,6	;volatile
  1253     06DC                     l2100:
  1254                           
  1255                           ;main.c: 356:     PIE1 |= 0x20;
  1256     06DC  168C               	bsf	12,5	;volatile
  1257     06DD                     l195:
  1258     06DD  0008               	return
  1259     06DE                     __end_of_UART_init:
  1260                           
  1261                           	psect	text2
  1262     0349                     __ptext2:	
  1263 ;; *************** function ___aldiv *****************
  1264 ;; Defined at:
  1265 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  1266 ;; Parameters:    Size  Location     Type
  1267 ;;  divisor         4    0[BANK0 ] long 
  1268 ;;  dividend        4    4[BANK0 ] long 
  1269 ;; Auto vars:     Size  Location     Type
  1270 ;;  quotient        4   11[BANK0 ] long 
  1271 ;;  sign            1   10[BANK0 ] unsigned char 
  1272 ;;  counter         1    9[BANK0 ] unsigned char 
  1273 ;; Return value:  Size  Location     Type
  1274 ;;                  4    0[BANK0 ] long 
  1275 ;; Registers used:
  1276 ;;		wreg, status,2, status,0
  1277 ;; Tracked objects:
  1278 ;;		On entry : 0/0
  1279 ;;		On exit  : 0/0
  1280 ;;		Unchanged: 0/0
  1281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1282 ;;      Params:         0       8       0       0       0
  1283 ;;      Locals:         0       6       0       0       0
  1284 ;;      Temps:          0       1       0       0       0
  1285 ;;      Totals:         0      15       0       0       0
  1286 ;;Total ram usage:       15 bytes
  1287 ;; Hardware stack levels used: 1
  1288 ;; Hardware stack levels required when called: 1
  1289 ;; This function calls:
  1290 ;;		Nothing
  1291 ;; This function is called by:
  1292 ;;		_UART_init
  1293 ;; This function uses a non-reentrant model
  1294 ;;
  1295                           
  1296     0349                     ___aldiv:	
  1297                           ;psect for function ___aldiv
  1298                           
  1299     0349                     l1926:	
  1300                           ;incstack = 0
  1301                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1302                           
  1303     0349  1283               	bcf	3,5	;RP0=0, select bank0
  1304     034A  1303               	bcf	3,6	;RP1=0, select bank0
  1305     034B  01AA               	clrf	___aldiv@sign
  1306     034C                     l1928:
  1307     034C  1FA3               	btfss	___aldiv@divisor+3,7
  1308     034D  2B4F               	goto	u1851
  1309     034E  2B50               	goto	u1850
  1310     034F                     u1851:
  1311     034F  2B5D               	goto	l373
  1312     0350                     u1850:
  1313     0350                     l1930:
  1314     0350  09A0               	comf	___aldiv@divisor,f
  1315     0351  09A1               	comf	___aldiv@divisor+1,f
  1316     0352  09A2               	comf	___aldiv@divisor+2,f
  1317     0353  09A3               	comf	___aldiv@divisor+3,f
  1318     0354  0AA0               	incf	___aldiv@divisor,f
  1319     0355  1903               	skipnz
  1320     0356  0AA1               	incf	___aldiv@divisor+1,f
  1321     0357  1903               	skipnz
  1322     0358  0AA2               	incf	___aldiv@divisor+2,f
  1323     0359  1903               	skipnz
  1324     035A  0AA3               	incf	___aldiv@divisor+3,f
  1325     035B  01AA               	clrf	___aldiv@sign
  1326     035C  0AAA               	incf	___aldiv@sign,f
  1327     035D                     l373:
  1328     035D  1FA7               	btfss	___aldiv@dividend+3,7
  1329     035E  2B60               	goto	u1861
  1330     035F  2B61               	goto	u1860
  1331     0360                     u1861:
  1332     0360  2B70               	goto	l1936
  1333     0361                     u1860:
  1334     0361                     l1932:
  1335     0361  09A4               	comf	___aldiv@dividend,f
  1336     0362  09A5               	comf	___aldiv@dividend+1,f
  1337     0363  09A6               	comf	___aldiv@dividend+2,f
  1338     0364  09A7               	comf	___aldiv@dividend+3,f
  1339     0365  0AA4               	incf	___aldiv@dividend,f
  1340     0366  1903               	skipnz
  1341     0367  0AA5               	incf	___aldiv@dividend+1,f
  1342     0368  1903               	skipnz
  1343     0369  0AA6               	incf	___aldiv@dividend+2,f
  1344     036A  1903               	skipnz
  1345     036B  0AA7               	incf	___aldiv@dividend+3,f
  1346     036C                     l1934:
  1347     036C  3001               	movlw	1
  1348     036D  00A8               	movwf	??___aldiv
  1349     036E  0828               	movf	??___aldiv,w
  1350     036F  06AA               	xorwf	___aldiv@sign,f
  1351     0370                     l1936:
  1352     0370  3000               	movlw	0
  1353     0371  00AE               	movwf	___aldiv@quotient+3
  1354     0372  3000               	movlw	0
  1355     0373  00AD               	movwf	___aldiv@quotient+2
  1356     0374  3000               	movlw	0
  1357     0375  00AC               	movwf	___aldiv@quotient+1
  1358     0376  3000               	movlw	0
  1359     0377  00AB               	movwf	___aldiv@quotient
  1360     0378                     l1938:
  1361     0378  0823               	movf	___aldiv@divisor+3,w
  1362     0379  0422               	iorwf	___aldiv@divisor+2,w
  1363     037A  0421               	iorwf	___aldiv@divisor+1,w
  1364     037B  0420               	iorwf	___aldiv@divisor,w
  1365     037C  1903               	skipnz
  1366     037D  2B7F               	goto	u1871
  1367     037E  2B80               	goto	u1870
  1368     037F                     u1871:
  1369     037F  2BCD               	goto	l1958
  1370     0380                     u1870:
  1371     0380                     l1940:
  1372     0380  01A9               	clrf	___aldiv@counter
  1373     0381  0AA9               	incf	___aldiv@counter,f
  1374     0382  2B90               	goto	l1944
  1375     0383                     l1942:
  1376     0383  3001               	movlw	1
  1377     0384  00A8               	movwf	??___aldiv
  1378     0385                     u1885:
  1379     0385  1003               	clrc
  1380     0386  0DA0               	rlf	___aldiv@divisor,f
  1381     0387  0DA1               	rlf	___aldiv@divisor+1,f
  1382     0388  0DA2               	rlf	___aldiv@divisor+2,f
  1383     0389  0DA3               	rlf	___aldiv@divisor+3,f
  1384     038A  0BA8               	decfsz	??___aldiv,f
  1385     038B  2B85               	goto	u1885
  1386     038C  3001               	movlw	1
  1387     038D  00A8               	movwf	??___aldiv
  1388     038E  0828               	movf	??___aldiv,w
  1389     038F  07A9               	addwf	___aldiv@counter,f
  1390     0390                     l1944:
  1391     0390  1FA3               	btfss	___aldiv@divisor+3,7
  1392     0391  2B93               	goto	u1891
  1393     0392  2B94               	goto	u1890
  1394     0393                     u1891:
  1395     0393  2B83               	goto	l1942
  1396     0394                     u1890:
  1397     0394                     l1946:
  1398     0394  3001               	movlw	1
  1399     0395  00A8               	movwf	??___aldiv
  1400     0396                     u1905:
  1401     0396  1003               	clrc
  1402     0397  0DAB               	rlf	___aldiv@quotient,f
  1403     0398  0DAC               	rlf	___aldiv@quotient+1,f
  1404     0399  0DAD               	rlf	___aldiv@quotient+2,f
  1405     039A  0DAE               	rlf	___aldiv@quotient+3,f
  1406     039B  0BA8               	decfsz	??___aldiv,f
  1407     039C  2B96               	goto	u1905
  1408     039D                     l1948:
  1409     039D  0823               	movf	___aldiv@divisor+3,w
  1410     039E  0227               	subwf	___aldiv@dividend+3,w
  1411     039F  1D03               	skipz
  1412     03A0  2BAB               	goto	u1915
  1413     03A1  0822               	movf	___aldiv@divisor+2,w
  1414     03A2  0226               	subwf	___aldiv@dividend+2,w
  1415     03A3  1D03               	skipz
  1416     03A4  2BAB               	goto	u1915
  1417     03A5  0821               	movf	___aldiv@divisor+1,w
  1418     03A6  0225               	subwf	___aldiv@dividend+1,w
  1419     03A7  1D03               	skipz
  1420     03A8  2BAB               	goto	u1915
  1421     03A9  0820               	movf	___aldiv@divisor,w
  1422     03AA  0224               	subwf	___aldiv@dividend,w
  1423     03AB                     u1915:
  1424     03AB  1C03               	skipc
  1425     03AC  2BAE               	goto	u1911
  1426     03AD  2BAF               	goto	u1910
  1427     03AE                     u1911:
  1428     03AE  2BBE               	goto	l1954
  1429     03AF                     u1910:
  1430     03AF                     l1950:
  1431     03AF  0820               	movf	___aldiv@divisor,w
  1432     03B0  02A4               	subwf	___aldiv@dividend,f
  1433     03B1  0821               	movf	___aldiv@divisor+1,w
  1434     03B2  1C03               	skipc
  1435     03B3  0F21               	incfsz	___aldiv@divisor+1,w
  1436     03B4  02A5               	subwf	___aldiv@dividend+1,f
  1437     03B5  0822               	movf	___aldiv@divisor+2,w
  1438     03B6  1C03               	skipc
  1439     03B7  0F22               	incfsz	___aldiv@divisor+2,w
  1440     03B8  02A6               	subwf	___aldiv@dividend+2,f
  1441     03B9  0823               	movf	___aldiv@divisor+3,w
  1442     03BA  1C03               	skipc
  1443     03BB  0F23               	incfsz	___aldiv@divisor+3,w
  1444     03BC  02A7               	subwf	___aldiv@dividend+3,f
  1445     03BD                     l1952:
  1446     03BD  142B               	bsf	___aldiv@quotient,0
  1447     03BE                     l1954:
  1448     03BE  3001               	movlw	1
  1449     03BF                     u1925:
  1450     03BF  1003               	clrc
  1451     03C0  0CA3               	rrf	___aldiv@divisor+3,f
  1452     03C1  0CA2               	rrf	___aldiv@divisor+2,f
  1453     03C2  0CA1               	rrf	___aldiv@divisor+1,f
  1454     03C3  0CA0               	rrf	___aldiv@divisor,f
  1455     03C4  3EFF               	addlw	-1
  1456     03C5  1D03               	skipz
  1457     03C6  2BBF               	goto	u1925
  1458     03C7                     l1956:
  1459     03C7  3001               	movlw	1
  1460     03C8  02A9               	subwf	___aldiv@counter,f
  1461     03C9  1D03               	btfss	3,2
  1462     03CA  2BCC               	goto	u1931
  1463     03CB  2BCD               	goto	u1930
  1464     03CC                     u1931:
  1465     03CC  2B94               	goto	l1946
  1466     03CD                     u1930:
  1467     03CD                     l1958:
  1468     03CD  082A               	movf	___aldiv@sign,w
  1469     03CE  1903               	btfsc	3,2
  1470     03CF  2BD1               	goto	u1941
  1471     03D0  2BD2               	goto	u1940
  1472     03D1                     u1941:
  1473     03D1  2BDD               	goto	l1962
  1474     03D2                     u1940:
  1475     03D2                     l1960:
  1476     03D2  09AB               	comf	___aldiv@quotient,f
  1477     03D3  09AC               	comf	___aldiv@quotient+1,f
  1478     03D4  09AD               	comf	___aldiv@quotient+2,f
  1479     03D5  09AE               	comf	___aldiv@quotient+3,f
  1480     03D6  0AAB               	incf	___aldiv@quotient,f
  1481     03D7  1903               	skipnz
  1482     03D8  0AAC               	incf	___aldiv@quotient+1,f
  1483     03D9  1903               	skipnz
  1484     03DA  0AAD               	incf	___aldiv@quotient+2,f
  1485     03DB  1903               	skipnz
  1486     03DC  0AAE               	incf	___aldiv@quotient+3,f
  1487     03DD                     l1962:
  1488     03DD  082E               	movf	___aldiv@quotient+3,w
  1489     03DE  00A3               	movwf	?___aldiv+3
  1490     03DF  082D               	movf	___aldiv@quotient+2,w
  1491     03E0  00A2               	movwf	?___aldiv+2
  1492     03E1  082C               	movf	___aldiv@quotient+1,w
  1493     03E2  00A1               	movwf	?___aldiv+1
  1494     03E3  082B               	movf	___aldiv@quotient,w
  1495     03E4  00A0               	movwf	?___aldiv
  1496     03E5                     l383:
  1497     03E5  0008               	return
  1498     03E6                     __end_of___aldiv:
  1499                           
  1500                           	psect	text3
  1501     026B                     __ptext3:	
  1502 ;; *************** function _UART_TxInt *****************
  1503 ;; Defined at:
  1504 ;;		line 376 in file "main.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;  val             2    9[BANK0 ] int 
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;  t               2   69[BANK0 ] int 
  1509 ;;  buffer         50   14[BANK0 ] unsigned char [50]
  1510 ;;  i               2   71[BANK0 ] int 
  1511 ;;  n               2   67[BANK0 ] int 
  1512 ;;  n1              2   65[BANK0 ] unsigned int 
  1513 ;;  isNeg           1   64[BANK0 ] unsigned char 
  1514 ;; Return value:  Size  Location     Type
  1515 ;;                  1    wreg      void 
  1516 ;; Registers used:
  1517 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1518 ;; Tracked objects:
  1519 ;;		On entry : 0/0
  1520 ;;		On exit  : 0/0
  1521 ;;		Unchanged: 0/0
  1522 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1523 ;;      Params:         0       2       0       0       0
  1524 ;;      Locals:         0      59       0       0       0
  1525 ;;      Temps:          0       3       0       0       0
  1526 ;;      Totals:         0      64       0       0       0
  1527 ;;Total ram usage:       64 bytes
  1528 ;; Hardware stack levels used: 1
  1529 ;; Hardware stack levels required when called: 3
  1530 ;; This function calls:
  1531 ;;		_UART_TxString
  1532 ;;		___awdiv
  1533 ;;		___lwdiv
  1534 ;;		___lwmod
  1535 ;; This function is called by:
  1536 ;;		_main
  1537 ;; This function uses a non-reentrant model
  1538 ;;
  1539                           
  1540     026B                     _UART_TxInt:	
  1541                           ;psect for function _UART_TxInt
  1542                           
  1543     026B                     l2214:	
  1544                           ;incstack = 0
  1545                           ; Regs used in _UART_TxInt: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1546                           
  1547                           
  1548                           ;main.c: 377:     int n = val;
  1549     026B  1283               	bcf	3,5	;RP0=0, select bank0
  1550     026C  1303               	bcf	3,6	;RP1=0, select bank0
  1551     026D  082A               	movf	UART_TxInt@val+1,w
  1552     026E  00E4               	movwf	UART_TxInt@n+1
  1553     026F  0829               	movf	UART_TxInt@val,w
  1554     0270  00E3               	movwf	UART_TxInt@n
  1555     0271                     l2216:
  1556                           
  1557                           ;main.c: 378:     char buffer[50];;main.c: 379:     int i = 0;
  1558     0271  01E7               	clrf	UART_TxInt@i
  1559     0272  01E8               	clrf	UART_TxInt@i+1
  1560     0273                     l2218:
  1561                           
  1562                           ;main.c: 380:     char isNeg = n < 0;
  1563     0273  1BE4               	btfsc	UART_TxInt@n+1,7
  1564     0274  2A76               	goto	u2391
  1565     0275  2A78               	goto	u2390
  1566     0276                     u2391:
  1567     0276  3001               	movlw	1
  1568     0277  2A79               	goto	u2400
  1569     0278                     u2390:
  1570     0278  3000               	movlw	0
  1571     0279                     u2400:
  1572     0279  00E0               	movwf	UART_TxInt@isNeg
  1573     027A                     l2220:
  1574                           
  1575                           ;main.c: 382:     unsigned int n1 = isNeg ? -n : n;
  1576     027A  0860               	movf	UART_TxInt@isNeg,w
  1577     027B  1D03               	btfss	3,2
  1578     027C  2A7E               	goto	u2411
  1579     027D  2A7F               	goto	u2410
  1580     027E                     u2411:
  1581     027E  2A84               	goto	l2224
  1582     027F                     u2410:
  1583     027F                     l2222:
  1584     027F  0864               	movf	UART_TxInt@n+1,w
  1585     0280  00E2               	movwf	UART_TxInt@n1+1
  1586     0281  0863               	movf	UART_TxInt@n,w
  1587     0282  00E1               	movwf	UART_TxInt@n1
  1588     0283  2ABF               	goto	l2232
  1589     0284                     l2224:
  1590     0284  0963               	comf	UART_TxInt@n,w
  1591     0285  00AB               	movwf	??_UART_TxInt
  1592     0286  0964               	comf	UART_TxInt@n+1,w
  1593     0287  00AC               	movwf	??_UART_TxInt+1
  1594     0288  0AAB               	incf	??_UART_TxInt,f
  1595     0289  1903               	skipnz
  1596     028A  0AAC               	incf	??_UART_TxInt+1,f
  1597     028B  082B               	movf	??_UART_TxInt,w
  1598     028C  00E1               	movwf	UART_TxInt@n1
  1599     028D  082C               	movf	??_UART_TxInt+1,w
  1600     028E  00E2               	movwf	UART_TxInt@n1+1
  1601     028F  2ABF               	goto	l2232
  1602     0290                     l2226:
  1603                           
  1604                           ;main.c: 385:         buffer[i++] = n1 % 10 + '0';
  1605     0290  0867               	movf	UART_TxInt@i,w
  1606     0291  3E2E               	addlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1607     0292  0084               	movwf	4
  1608     0293  300A               	movlw	10
  1609     0294  00A0               	movwf	___lwmod@divisor
  1610     0295  3000               	movlw	0
  1611     0296  00A1               	movwf	___lwmod@divisor+1
  1612     0297  0862               	movf	UART_TxInt@n1+1,w
  1613     0298  00A3               	movwf	___lwmod@dividend+1
  1614     0299  0861               	movf	UART_TxInt@n1,w
  1615     029A  00A2               	movwf	___lwmod@dividend
  1616     029B  120A  118A  26DE  120A  118A  	fcall	___lwmod
  1617     02A0  1283               	bcf	3,5	;RP0=0, select bank0
  1618     02A1  1303               	bcf	3,6	;RP1=0, select bank0
  1619     02A2  0820               	movf	?___lwmod,w
  1620     02A3  3E30               	addlw	48
  1621     02A4  1383               	bcf	3,7	;select IRP bank0
  1622     02A5  0080               	movwf	0
  1623     02A6                     l2228:
  1624     02A6  3001               	movlw	1
  1625     02A7  07E7               	addwf	UART_TxInt@i,f
  1626     02A8  1803               	skipnc
  1627     02A9  0AE8               	incf	UART_TxInt@i+1,f
  1628     02AA  3000               	movlw	0
  1629     02AB  07E8               	addwf	UART_TxInt@i+1,f
  1630     02AC                     l2230:
  1631                           
  1632                           ;main.c: 386:         n1 = n1 / 10;
  1633     02AC  300A               	movlw	10
  1634     02AD  00A0               	movwf	___lwdiv@divisor
  1635     02AE  3000               	movlw	0
  1636     02AF  00A1               	movwf	___lwdiv@divisor+1
  1637     02B0  0862               	movf	UART_TxInt@n1+1,w
  1638     02B1  00A3               	movwf	___lwdiv@dividend+1
  1639     02B2  0861               	movf	UART_TxInt@n1,w
  1640     02B3  00A2               	movwf	___lwdiv@dividend
  1641     02B4  120A  118A  2615  120A  118A  	fcall	___lwdiv
  1642     02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1643     02BA  1303               	bcf	3,6	;RP1=0, select bank0
  1644     02BB  0821               	movf	?___lwdiv+1,w
  1645     02BC  00E2               	movwf	UART_TxInt@n1+1
  1646     02BD  0820               	movf	?___lwdiv,w
  1647     02BE  00E1               	movwf	UART_TxInt@n1
  1648     02BF                     l2232:
  1649                           
  1650                           ;main.c: 384:     while (n1 != 0) {
  1651     02BF  0861               	movf	UART_TxInt@n1,w
  1652     02C0  0462               	iorwf	UART_TxInt@n1+1,w
  1653     02C1  1D03               	btfss	3,2
  1654     02C2  2AC4               	goto	u2421
  1655     02C3  2AC5               	goto	u2420
  1656     02C4                     u2421:
  1657     02C4  2A90               	goto	l2226
  1658     02C5                     u2420:
  1659     02C5                     l2234:
  1660                           
  1661                           ;main.c: 389:     if (isNeg)
  1662     02C5  0860               	movf	UART_TxInt@isNeg,w
  1663     02C6  1903               	btfsc	3,2
  1664     02C7  2AC9               	goto	u2431
  1665     02C8  2ACA               	goto	u2430
  1666     02C9                     u2431:
  1667     02C9  2AD6               	goto	l2240
  1668     02CA                     u2430:
  1669     02CA                     l2236:
  1670                           
  1671                           ;main.c: 390:         buffer[i++] = '-';
  1672     02CA  0867               	movf	UART_TxInt@i,w
  1673     02CB  3E2E               	addlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1674     02CC  0084               	movwf	4
  1675     02CD  302D               	movlw	45
  1676     02CE  1383               	bcf	3,7	;select IRP bank0
  1677     02CF  0080               	movwf	0
  1678     02D0                     l2238:
  1679     02D0  3001               	movlw	1
  1680     02D1  07E7               	addwf	UART_TxInt@i,f
  1681     02D2  1803               	skipnc
  1682     02D3  0AE8               	incf	UART_TxInt@i+1,f
  1683     02D4  3000               	movlw	0
  1684     02D5  07E8               	addwf	UART_TxInt@i+1,f
  1685     02D6                     l2240:
  1686                           
  1687                           ;main.c: 392:     buffer[i] = '\0';
  1688     02D6  0867               	movf	UART_TxInt@i,w
  1689     02D7  3E2E               	addlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1690     02D8  0084               	movwf	4
  1691     02D9  1383               	bcf	3,7	;select IRP bank0
  1692     02DA  0180               	clrf	0
  1693     02DB                     l2242:
  1694                           
  1695                           ;main.c: 394:     for (int t = 0; t < i / 2; t++) {
  1696     02DB  01E5               	clrf	UART_TxInt@t
  1697     02DC  01E6               	clrf	UART_TxInt@t+1
  1698     02DD  2B1A               	goto	l2248
  1699     02DE                     l2244:
  1700                           
  1701                           ;main.c: 395:         buffer[t] ^= buffer[i - t - 1];
  1702     02DE  302E               	movlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1703     02DF  1283               	bcf	3,5	;RP0=0, select bank0
  1704     02E0  1303               	bcf	3,6	;RP1=0, select bank0
  1705     02E1  00AB               	movwf	??_UART_TxInt
  1706     02E2  0865               	movf	UART_TxInt@t,w
  1707     02E3  02AB               	subwf	??_UART_TxInt,f
  1708     02E4  0867               	movf	UART_TxInt@i,w
  1709     02E5  072B               	addwf	??_UART_TxInt,w
  1710     02E6  00AC               	movwf	??_UART_TxInt+1
  1711     02E7  082C               	movf	??_UART_TxInt+1,w
  1712     02E8  3EFF               	addlw	255
  1713     02E9  0084               	movwf	4
  1714     02EA  1383               	bcf	3,7	;select IRP bank0
  1715     02EB  0800               	movf	0,w
  1716     02EC  00AD               	movwf	??_UART_TxInt+2
  1717     02ED  0865               	movf	UART_TxInt@t,w
  1718     02EE  3E2E               	addlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1719     02EF  0084               	movwf	4
  1720     02F0  082D               	movf	??_UART_TxInt+2,w
  1721     02F1  0680               	xorwf	0,f
  1722                           
  1723                           ;main.c: 396:         buffer[i - t - 1] ^= buffer[t];
  1724     02F2  0865               	movf	UART_TxInt@t,w
  1725     02F3  3E2E               	addlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1726     02F4  0084               	movwf	4
  1727     02F5  0800               	movf	0,w
  1728     02F6  00AB               	movwf	??_UART_TxInt
  1729     02F7  302E               	movlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1730     02F8  00AC               	movwf	??_UART_TxInt+1
  1731     02F9  0865               	movf	UART_TxInt@t,w
  1732     02FA  02AC               	subwf	??_UART_TxInt+1,f
  1733     02FB  0867               	movf	UART_TxInt@i,w
  1734     02FC  072C               	addwf	??_UART_TxInt+1,w
  1735     02FD  00AD               	movwf	??_UART_TxInt+2
  1736     02FE  082D               	movf	??_UART_TxInt+2,w
  1737     02FF  3EFF               	addlw	255
  1738     0300  0084               	movwf	4
  1739     0301  082B               	movf	??_UART_TxInt,w
  1740     0302  0680               	xorwf	0,f
  1741                           
  1742                           ;main.c: 397:         buffer[t] ^= buffer[i - t - 1];
  1743     0303  302E               	movlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1744     0304  00AB               	movwf	??_UART_TxInt
  1745     0305  0865               	movf	UART_TxInt@t,w
  1746     0306  02AB               	subwf	??_UART_TxInt,f
  1747     0307  0867               	movf	UART_TxInt@i,w
  1748     0308  072B               	addwf	??_UART_TxInt,w
  1749     0309  00AC               	movwf	??_UART_TxInt+1
  1750     030A  082C               	movf	??_UART_TxInt+1,w
  1751     030B  3EFF               	addlw	255
  1752     030C  0084               	movwf	4
  1753     030D  0800               	movf	0,w
  1754     030E  00AD               	movwf	??_UART_TxInt+2
  1755     030F  0865               	movf	UART_TxInt@t,w
  1756     0310  3E2E               	addlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1757     0311  0084               	movwf	4
  1758     0312  082D               	movf	??_UART_TxInt+2,w
  1759     0313  0680               	xorwf	0,f
  1760     0314                     l2246:
  1761                           
  1762                           ;main.c: 398:     }
  1763     0314  3001               	movlw	1
  1764     0315  07E5               	addwf	UART_TxInt@t,f
  1765     0316  1803               	skipnc
  1766     0317  0AE6               	incf	UART_TxInt@t+1,f
  1767     0318  3000               	movlw	0
  1768     0319  07E6               	addwf	UART_TxInt@t+1,f
  1769     031A                     l2248:
  1770     031A  3002               	movlw	2
  1771     031B  00A0               	movwf	___awdiv@divisor
  1772     031C  3000               	movlw	0
  1773     031D  00A1               	movwf	___awdiv@divisor+1
  1774     031E  0868               	movf	UART_TxInt@i+1,w
  1775     031F  00A3               	movwf	___awdiv@dividend+1
  1776     0320  0867               	movf	UART_TxInt@i,w
  1777     0321  00A2               	movwf	___awdiv@dividend
  1778     0322  120A  118A  2561  120A  118A  	fcall	___awdiv
  1779     0327  1283               	bcf	3,5	;RP0=0, select bank0
  1780     0328  1303               	bcf	3,6	;RP1=0, select bank0
  1781     0329  0866               	movf	UART_TxInt@t+1,w
  1782     032A  3A80               	xorlw	128
  1783     032B  00AB               	movwf	??_UART_TxInt
  1784     032C  0821               	movf	?___awdiv+1,w
  1785     032D  3A80               	xorlw	128
  1786     032E  022B               	subwf	??_UART_TxInt,w
  1787     032F  1D03               	skipz
  1788     0330  2B33               	goto	u2445
  1789     0331  0820               	movf	?___awdiv,w
  1790     0332  0265               	subwf	UART_TxInt@t,w
  1791     0333                     u2445:
  1792     0333  1C03               	skipc
  1793     0334  2B36               	goto	u2441
  1794     0335  2B37               	goto	u2440
  1795     0336                     u2441:
  1796     0336  2ADE               	goto	l2244
  1797     0337                     u2440:
  1798     0337                     l2250:
  1799                           
  1800                           ;main.c: 400:     if (n == 0) {
  1801     0337  1283               	bcf	3,5	;RP0=0, select bank0
  1802     0338  1303               	bcf	3,6	;RP1=0, select bank0
  1803     0339  0863               	movf	UART_TxInt@n,w
  1804     033A  0464               	iorwf	UART_TxInt@n+1,w
  1805     033B  1D03               	btfss	3,2
  1806     033C  2B3E               	goto	u2451
  1807     033D  2B3F               	goto	u2450
  1808     033E                     u2451:
  1809     033E  2B42               	goto	l2256
  1810     033F                     u2450:
  1811     033F                     l2252:
  1812                           
  1813                           ;main.c: 401:         buffer[0] = '0';
  1814     033F  3030               	movlw	48
  1815     0340  00AE               	movwf	UART_TxInt@buffer
  1816     0341                     l2254:
  1817                           
  1818                           ;main.c: 402:         buffer[1] = '\0';
  1819     0341  01AF               	clrf	UART_TxInt@buffer+1
  1820     0342                     l2256:
  1821                           
  1822                           ;main.c: 404:     UART_TxString(buffer);
  1823     0342  302E               	movlw	(low (UART_TxInt@buffer| 0))& (0+255)
  1824     0343  120A  118A  27AD  120A  118A  	fcall	_UART_TxString
  1825     0348                     l222:
  1826     0348  0008               	return
  1827     0349                     __end_of_UART_TxInt:
  1828                           
  1829                           	psect	text4
  1830     07AD                     __ptext4:	
  1831 ;; *************** function _UART_TxString *****************
  1832 ;; Defined at:
  1833 ;;		line 368 in file "main.c"
  1834 ;; Parameters:    Size  Location     Type
  1835 ;;  str             1    wreg     PTR const unsigned char 
  1836 ;;		 -> UART_TxInt@buffer(50), 
  1837 ;; Auto vars:     Size  Location     Type
  1838 ;;  str             1    3[BANK0 ] PTR const unsigned char 
  1839 ;;		 -> UART_TxInt@buffer(50), 
  1840 ;;  i               1    4[BANK0 ] unsigned char 
  1841 ;; Return value:  Size  Location     Type
  1842 ;;                  1    wreg      void 
  1843 ;; Registers used:
  1844 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1845 ;; Tracked objects:
  1846 ;;		On entry : 0/0
  1847 ;;		On exit  : 0/0
  1848 ;;		Unchanged: 0/0
  1849 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1850 ;;      Params:         0       0       0       0       0
  1851 ;;      Locals:         0       2       0       0       0
  1852 ;;      Temps:          0       1       0       0       0
  1853 ;;      Totals:         0       3       0       0       0
  1854 ;;Total ram usage:        3 bytes
  1855 ;; Hardware stack levels used: 1
  1856 ;; Hardware stack levels required when called: 2
  1857 ;; This function calls:
  1858 ;;		_UART_TxChar
  1859 ;; This function is called by:
  1860 ;;		_UART_TxInt
  1861 ;; This function uses a non-reentrant model
  1862 ;;
  1863                           
  1864     07AD                     _UART_TxString:	
  1865                           ;psect for function _UART_TxString
  1866                           
  1867                           
  1868                           ;incstack = 0
  1869                           ; Regs used in _UART_TxString: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1870                           ;UART_TxString@str stored from wreg
  1871     07AD  1283               	bcf	3,5	;RP0=0, select bank0
  1872     07AE  1303               	bcf	3,6	;RP1=0, select bank0
  1873     07AF  00A3               	movwf	UART_TxString@str
  1874     07B0                     l1918:
  1875                           
  1876                           ;main.c: 369:     unsigned char i = 0;
  1877     07B0  01A4               	clrf	UART_TxString@i
  1878                           
  1879                           ;main.c: 370:     while (str[i] != 0) {
  1880     07B1  2FC3               	goto	l1924
  1881     07B2                     l1920:
  1882                           
  1883                           ;main.c: 371:         UART_TxChar(str[i]);
  1884     07B2  0824               	movf	UART_TxString@i,w
  1885     07B3  0723               	addwf	UART_TxString@str,w
  1886     07B4  00A2               	movwf	??_UART_TxString
  1887     07B5  0822               	movf	??_UART_TxString,w
  1888     07B6  0084               	movwf	4
  1889     07B7  0800               	movf	0,w
  1890     07B8  120A  158A  27EA  120A  118A  	fcall	_UART_TxChar
  1891     07BD                     l1922:
  1892                           
  1893                           ;main.c: 372:         i++;
  1894     07BD  3001               	movlw	1
  1895     07BE  1283               	bcf	3,5	;RP0=0, select bank0
  1896     07BF  1303               	bcf	3,6	;RP1=0, select bank0
  1897     07C0  00A2               	movwf	??_UART_TxString
  1898     07C1  0822               	movf	??_UART_TxString,w
  1899     07C2  07A4               	addwf	UART_TxString@i,f
  1900     07C3                     l1924:
  1901                           
  1902                           ;main.c: 370:     while (str[i] != 0) {
  1903     07C3  0824               	movf	UART_TxString@i,w
  1904     07C4  0723               	addwf	UART_TxString@str,w
  1905     07C5  00A2               	movwf	??_UART_TxString
  1906     07C6  0822               	movf	??_UART_TxString,w
  1907     07C7  0084               	movwf	4
  1908     07C8  1383               	bcf	3,7	;select IRP bank0
  1909     07C9  0800               	movf	0,w
  1910     07CA  1D03               	btfss	3,2
  1911     07CB  2FCD               	goto	u1841
  1912     07CC  2FCE               	goto	u1840
  1913     07CD                     u1841:
  1914     07CD  2FB2               	goto	l1920
  1915     07CE                     u1840:
  1916     07CE                     l207:
  1917     07CE  0008               	return
  1918     07CF                     __end_of_UART_TxString:
  1919                           
  1920                           	psect	text5
  1921     0FEA                     __ptext5:	
  1922 ;; *************** function _UART_TxChar *****************
  1923 ;; Defined at:
  1924 ;;		line 359 in file "main.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  ch              1    wreg     unsigned char 
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;  ch              1    1[BANK0 ] unsigned char 
  1929 ;; Return value:  Size  Location     Type
  1930 ;;                  1    wreg      void 
  1931 ;; Registers used:
  1932 ;;		wreg, status,2, status,0
  1933 ;; Tracked objects:
  1934 ;;		On entry : 0/0
  1935 ;;		On exit  : 0/0
  1936 ;;		Unchanged: 0/0
  1937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1938 ;;      Params:         0       0       0       0       0
  1939 ;;      Locals:         0       1       0       0       0
  1940 ;;      Temps:          0       1       0       0       0
  1941 ;;      Totals:         0       2       0       0       0
  1942 ;;Total ram usage:        2 bytes
  1943 ;; Hardware stack levels used: 1
  1944 ;; Hardware stack levels required when called: 1
  1945 ;; This function calls:
  1946 ;;		Nothing
  1947 ;; This function is called by:
  1948 ;;		_UART_TxString
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951                           
  1952     0FEA                     _UART_TxChar:	
  1953                           ;psect for function _UART_TxChar
  1954                           
  1955                           
  1956                           ;incstack = 0
  1957                           ; Regs used in _UART_TxChar: [wreg+status,2+status,0]
  1958                           ;UART_TxChar@ch stored from wreg
  1959     0FEA  1283               	bcf	3,5	;RP0=0, select bank0
  1960     0FEB  1303               	bcf	3,6	;RP1=0, select bank0
  1961     0FEC  00A1               	movwf	UART_TxChar@ch
  1962     0FED                     l1888:
  1963                           
  1964                           ;main.c: 360:     TRISC &= ~0x40;
  1965     0FED  30BF               	movlw	191
  1966     0FEE  00A0               	movwf	??_UART_TxChar
  1967     0FEF  0820               	movf	??_UART_TxChar,w
  1968     0FF0  1683               	bsf	3,5	;RP0=1, select bank1
  1969     0FF1  1303               	bcf	3,6	;RP1=0, select bank1
  1970     0FF2  0587               	andwf	7,f	;volatile
  1971     0FF3                     l1890:
  1972                           
  1973                           ;main.c: 361:     TRISC |= 0x80;
  1974     0FF3  1787               	bsf	7,7	;volatile
  1975     0FF4                     l198:	
  1976                           ;main.c: 362:     while (!(PIR1 & 0x10));
  1977                           
  1978     0FF4  1283               	bcf	3,5	;RP0=0, select bank0
  1979     0FF5  1E0C               	btfss	12,4	;volatile
  1980     0FF6  2FF8               	goto	u1801
  1981     0FF7  2FF9               	goto	u1800
  1982     0FF8                     u1801:
  1983     0FF8  2FF4               	goto	l198
  1984     0FF9                     u1800:
  1985     0FF9                     l1892:
  1986                           
  1987                           ;main.c: 363:     PIR1 &= ~0x10;
  1988     0FF9  30EF               	movlw	239
  1989     0FFA  00A0               	movwf	??_UART_TxChar
  1990     0FFB  0820               	movf	??_UART_TxChar,w
  1991     0FFC  058C               	andwf	12,f	;volatile
  1992     0FFD                     l1894:
  1993                           
  1994                           ;main.c: 364:     TXREG = ch;
  1995     0FFD  0821               	movf	UART_TxChar@ch,w
  1996     0FFE  0099               	movwf	25	;volatile
  1997     0FFF                     l201:
  1998     0FFF  0008               	return
  1999     1000                     __end_of_UART_TxChar:
  2000                           
  2001                           	psect	text6
  2002     03E6                     __ptext6:	
  2003 ;; *************** function _Numpad_Read *****************
  2004 ;; Defined at:
  2005 ;;		line 179 in file "main.c"
  2006 ;; Parameters:    Size  Location     Type
  2007 ;;		None
  2008 ;; Auto vars:     Size  Location     Type
  2009 ;;  rowScan         1    5[BANK0 ] unsigned char 
  2010 ;;  colScan         1    4[BANK0 ] unsigned char 
  2011 ;;  currentKeyVa    1    3[BANK0 ] unsigned char 
  2012 ;;  currentKey      1    2[BANK0 ] unsigned char 
  2013 ;; Return value:  Size  Location     Type
  2014 ;;                  1    wreg      unsigned char 
  2015 ;; Registers used:
  2016 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath
  2017 ;; Tracked objects:
  2018 ;;		On entry : 0/0
  2019 ;;		On exit  : 0/0
  2020 ;;		Unchanged: 0/0
  2021 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2022 ;;      Params:         0       0       0       0       0
  2023 ;;      Locals:         0       4       0       0       0
  2024 ;;      Temps:          0       2       0       0       0
  2025 ;;      Totals:         0       6       0       0       0
  2026 ;;Total ram usage:        6 bytes
  2027 ;; Hardware stack levels used: 2
  2028 ;; Hardware stack levels required when called: 1
  2029 ;; This function calls:
  2030 ;;		Nothing
  2031 ;; This function is called by:
  2032 ;;		_main
  2033 ;; This function uses a non-reentrant model
  2034 ;;
  2035                           
  2036     03E6                     _Numpad_Read:	
  2037                           ;psect for function _Numpad_Read
  2038                           
  2039     03E6                     l2146:	
  2040                           ;incstack = 0
  2041                           ; Regs used in _Numpad_Read: [wreg-fsr0h+status,2+status,0+pclath]
  2042                           
  2043                           
  2044                           ;main.c: 181:     TRISD |= 0x0f;
  2045     03E6  300F               	movlw	15
  2046     03E7  1283               	bcf	3,5	;RP0=0, select bank0
  2047     03E8  1303               	bcf	3,6	;RP1=0, select bank0
  2048     03E9  00A0               	movwf	??_Numpad_Read
  2049     03EA  0820               	movf	??_Numpad_Read,w
  2050     03EB  1683               	bsf	3,5	;RP0=1, select bank1
  2051     03EC  1303               	bcf	3,6	;RP1=0, select bank1
  2052     03ED  0488               	iorwf	8,f	;volatile
  2053                           
  2054                           ;main.c: 182:     TRISB &= ~0x07;
  2055     03EE  30F8               	movlw	248
  2056     03EF  1283               	bcf	3,5	;RP0=0, select bank0
  2057     03F0  1303               	bcf	3,6	;RP1=0, select bank0
  2058     03F1  00A0               	movwf	??_Numpad_Read
  2059     03F2  0820               	movf	??_Numpad_Read,w
  2060     03F3  1683               	bsf	3,5	;RP0=1, select bank1
  2061     03F4  1303               	bcf	3,6	;RP1=0, select bank1
  2062     03F5  0586               	andwf	6,f	;volatile
  2063     03F6                     l2148:
  2064                           
  2065                           ;main.c: 183:     char colScan, rowScan, currentKeyVal, currentKey;;main.c: 184:     sta
      +                          tic char oldKeyVal;;main.c: 185:     for (colScan = 0; colScan < 3; colScan++) {
  2066     03F6  1283               	bcf	3,5	;RP0=0, select bank0
  2067     03F7  1303               	bcf	3,6	;RP1=0, select bank0
  2068     03F8  01A4               	clrf	Numpad_Read@colScan
  2069     03F9                     l2154:
  2070                           
  2071                           ;main.c: 186:         PORTB |= 0x07;
  2072     03F9  3007               	movlw	7
  2073     03FA  00A0               	movwf	??_Numpad_Read
  2074     03FB  0820               	movf	??_Numpad_Read,w
  2075     03FC  0486               	iorwf	6,f	;volatile
  2076                           
  2077                           ;main.c: 187:         PORTB &= ~(1 << colScan);
  2078     03FD  3001               	movlw	1
  2079     03FE  00A0               	movwf	??_Numpad_Read
  2080     03FF  0A24               	incf	Numpad_Read@colScan,w
  2081     0400  2C03               	goto	u2264
  2082     0401                     u2265:
  2083     0401  1003               	clrc
  2084     0402  0DA0               	rlf	??_Numpad_Read,f
  2085     0403                     u2264:
  2086     0403  3EFF               	addlw	-1
  2087     0404  1D03               	skipz
  2088     0405  2C01               	goto	u2265
  2089     0406  0820               	movf	??_Numpad_Read,w
  2090     0407  3AFF               	xorlw	255
  2091     0408  00A1               	movwf	??_Numpad_Read+1
  2092     0409  0821               	movf	??_Numpad_Read+1,w
  2093     040A  0586               	andwf	6,f	;volatile
  2094     040B                     l2156:
  2095                           
  2096                           ;main.c: 188:         _delay((unsigned long)((15)*(20000000/4000.0)));
  2097     040B  3062               	movlw	98
  2098     040C  1283               	bcf	3,5	;RP0=0, select bank0
  2099     040D  1303               	bcf	3,6	;RP1=0, select bank0
  2100     040E  00A1               	movwf	??_Numpad_Read+1
  2101     040F  3065               	movlw	101
  2102     0410  00A0               	movwf	??_Numpad_Read
  2103     0411                     u2577:
  2104     0411  0BA0               	decfsz	??_Numpad_Read,f
  2105     0412  2C11               	goto	u2577
  2106     0413  0BA1               	decfsz	??_Numpad_Read+1,f
  2107     0414  2C11               	goto	u2577
  2108     0415                     l2158:
  2109                           
  2110                           ;main.c: 189:         for (rowScan = 0; rowScan < 4; rowScan++) {
  2111     0415  1283               	bcf	3,5	;RP0=0, select bank0
  2112     0416  1303               	bcf	3,6	;RP1=0, select bank0
  2113     0417  01A5               	clrf	Numpad_Read@rowScan
  2114     0418                     l2164:
  2115                           
  2116                           ;main.c: 190:             currentKeyVal = (PORTD & (1 << rowScan));
  2117     0418  3001               	movlw	1
  2118     0419  00A0               	movwf	??_Numpad_Read
  2119     041A  0A25               	incf	Numpad_Read@rowScan,w
  2120     041B  2C1E               	goto	u2274
  2121     041C                     u2275:
  2122     041C  1003               	clrc
  2123     041D  0DA0               	rlf	??_Numpad_Read,f
  2124     041E                     u2274:
  2125     041E  3EFF               	addlw	-1
  2126     041F  1D03               	skipz
  2127     0420  2C1C               	goto	u2275
  2128     0421  0820               	movf	??_Numpad_Read,w
  2129     0422  0508               	andwf	8,w	;volatile
  2130     0423  00A3               	movwf	Numpad_Read@currentKeyVal
  2131                           
  2132                           ;main.c: 192:             if (!currentKeyVal && oldKeyVal) {
  2133     0424  0823               	movf	Numpad_Read@currentKeyVal,w
  2134     0425  1D03               	btfss	3,2
  2135     0426  2C28               	goto	u2281
  2136     0427  2C29               	goto	u2280
  2137     0428                     u2281:
  2138     0428  2C63               	goto	l132
  2139     0429                     u2280:
  2140     0429                     l2166:
  2141     0429  0870               	movf	Numpad_Read@oldKeyVal,w
  2142     042A  1903               	btfsc	3,2
  2143     042B  2C2D               	goto	u2291
  2144     042C  2C2E               	goto	u2290
  2145     042D                     u2291:
  2146     042D  2C63               	goto	l132
  2147     042E                     u2290:
  2148     042E                     l2168:
  2149                           
  2150                           ;main.c: 193:                 currentKey = keypad[rowScan + (4 * colScan)];
  2151     042E  0824               	movf	Numpad_Read@colScan,w
  2152     042F  00A0               	movwf	??_Numpad_Read
  2153     0430  3002               	movlw	2
  2154     0431                     u2305:
  2155     0431  1003               	clrc
  2156     0432  0DA0               	rlf	??_Numpad_Read,f
  2157     0433  3EFF               	addlw	-1
  2158     0434  1D03               	skipz
  2159     0435  2C31               	goto	u2305
  2160     0436  3001               	movlw	(low ((_keypad-__stringbase)| (0+32768)))& (0+255)
  2161     0437  0720               	addwf	??_Numpad_Read,w
  2162     0438  00A1               	movwf	??_Numpad_Read+1
  2163     0439  0825               	movf	Numpad_Read@rowScan,w
  2164     043A  0721               	addwf	??_Numpad_Read+1,w
  2165     043B  0084               	movwf	4
  2166     043C  120A  118A  275D  120A  118A  	fcall	stringdir
  2167     0441  00A2               	movwf	Numpad_Read@currentKey
  2168     0442                     l2170:
  2169                           
  2170                           ;main.c: 194:                 oldKeyVal = 0;
  2171     0442  01F0               	clrf	Numpad_Read@oldKeyVal
  2172                           
  2173                           ;main.c: 195:                 while (!currentKeyVal) {
  2174     0443  2C5A               	goto	l2176
  2175     0444                     l2172:
  2176                           
  2177                           ;main.c: 196:                     currentKeyVal = (PORTD & (1 << rowScan));
  2178     0444  3001               	movlw	1
  2179     0445  00A0               	movwf	??_Numpad_Read
  2180     0446  0A25               	incf	Numpad_Read@rowScan,w
  2181     0447  2C4A               	goto	u2314
  2182     0448                     u2315:
  2183     0448  1003               	clrc
  2184     0449  0DA0               	rlf	??_Numpad_Read,f
  2185     044A                     u2314:
  2186     044A  3EFF               	addlw	-1
  2187     044B  1D03               	skipz
  2188     044C  2C48               	goto	u2315
  2189     044D  0820               	movf	??_Numpad_Read,w
  2190     044E  0508               	andwf	8,w	;volatile
  2191     044F  00A3               	movwf	Numpad_Read@currentKeyVal
  2192     0450                     l2174:
  2193                           
  2194                           ;main.c: 197:                     _delay((unsigned long)((20)*(20000000/4000.0)));
  2195     0450  3082               	movlw	130
  2196     0451  1283               	bcf	3,5	;RP0=0, select bank0
  2197     0452  1303               	bcf	3,6	;RP1=0, select bank0
  2198     0453  00A1               	movwf	??_Numpad_Read+1
  2199     0454  30DD               	movlw	221
  2200     0455  00A0               	movwf	??_Numpad_Read
  2201     0456                     u2587:
  2202     0456  0BA0               	decfsz	??_Numpad_Read,f
  2203     0457  2C56               	goto	u2587
  2204     0458  0BA1               	decfsz	??_Numpad_Read+1,f
  2205     0459  2C56               	goto	u2587
  2206     045A                     l2176:
  2207                           
  2208                           ;main.c: 195:                 while (!currentKeyVal) {
  2209     045A  1283               	bcf	3,5	;RP0=0, select bank0
  2210     045B  1303               	bcf	3,6	;RP1=0, select bank0
  2211     045C  0823               	movf	Numpad_Read@currentKeyVal,w
  2212     045D  1903               	btfsc	3,2
  2213     045E  2C60               	goto	u2321
  2214     045F  2C61               	goto	u2320
  2215     0460                     u2321:
  2216     0460  2C44               	goto	l2172
  2217     0461                     u2320:
  2218     0461                     l2178:
  2219                           
  2220                           ;main.c: 199:                 return currentKey;
  2221     0461  0822               	movf	Numpad_Read@currentKey,w
  2222     0462  2C7A               	goto	l136
  2223     0463                     l132:	
  2224                           ;main.c: 200:             }
  2225                           
  2226                           
  2227                           ;main.c: 202:             oldKeyVal = 1;
  2228     0463  01F0               	clrf	Numpad_Read@oldKeyVal
  2229     0464  0AF0               	incf	Numpad_Read@oldKeyVal,f
  2230     0465                     l2182:
  2231                           
  2232                           ;main.c: 203:         }
  2233     0465  3001               	movlw	1
  2234     0466  00A0               	movwf	??_Numpad_Read
  2235     0467  0820               	movf	??_Numpad_Read,w
  2236     0468  07A5               	addwf	Numpad_Read@rowScan,f
  2237     0469                     l2184:
  2238     0469  3004               	movlw	4
  2239     046A  0225               	subwf	Numpad_Read@rowScan,w
  2240     046B  1C03               	skipc
  2241     046C  2C6E               	goto	u2331
  2242     046D  2C6F               	goto	u2330
  2243     046E                     u2331:
  2244     046E  2C18               	goto	l2164
  2245     046F                     u2330:
  2246     046F                     l2186:
  2247                           
  2248                           ;main.c: 204:     }
  2249     046F  3001               	movlw	1
  2250     0470  00A0               	movwf	??_Numpad_Read
  2251     0471  0820               	movf	??_Numpad_Read,w
  2252     0472  07A4               	addwf	Numpad_Read@colScan,f
  2253     0473                     l2188:
  2254     0473  3003               	movlw	3
  2255     0474  0224               	subwf	Numpad_Read@colScan,w
  2256     0475  1C03               	skipc
  2257     0476  2C78               	goto	u2341
  2258     0477  2C79               	goto	u2340
  2259     0478                     u2341:
  2260     0478  2BF9               	goto	l2154
  2261     0479                     u2340:
  2262     0479                     l2190:
  2263                           
  2264                           ;main.c: 205:     return 0xff;
  2265     0479  30FF               	movlw	255
  2266     047A                     l136:
  2267     047A  0008               	return
  2268     047B                     __end_of_Numpad_Read:
  2269                           
  2270                           	psect	text7
  2271     018A                     __ptext7:	
  2272 ;; *************** function _Lcd_Write_Int *****************
  2273 ;; Defined at:
  2274 ;;		line 315 in file "main.c"
  2275 ;; Parameters:    Size  Location     Type
  2276 ;;  val             2   12[BANK0 ] int 
  2277 ;; Auto vars:     Size  Location     Type
  2278 ;;  t               2   72[BANK0 ] int 
  2279 ;;  buffer         50   17[BANK0 ] unsigned char [50]
  2280 ;;  i               2   74[BANK0 ] int 
  2281 ;;  n               2   70[BANK0 ] int 
  2282 ;;  n1              2   68[BANK0 ] unsigned int 
  2283 ;;  isNeg           1   67[BANK0 ] unsigned char 
  2284 ;; Return value:  Size  Location     Type
  2285 ;;                  2   12[BANK0 ] PTR unsigned char 
  2286 ;; Registers used:
  2287 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2288 ;; Tracked objects:
  2289 ;;		On entry : 0/0
  2290 ;;		On exit  : 0/0
  2291 ;;		Unchanged: 0/0
  2292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2293 ;;      Params:         0       2       0       0       0
  2294 ;;      Locals:         0      59       0       0       0
  2295 ;;      Temps:          0       3       0       0       0
  2296 ;;      Totals:         0      64       0       0       0
  2297 ;;Total ram usage:       64 bytes
  2298 ;; Hardware stack levels used: 1
  2299 ;; Hardware stack levels required when called: 4
  2300 ;; This function calls:
  2301 ;;		_Lcd_Write_String
  2302 ;;		___awdiv
  2303 ;;		___lwdiv
  2304 ;;		___lwmod
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309                           
  2310     018A                     _Lcd_Write_Int:	
  2311                           ;psect for function _Lcd_Write_Int
  2312                           
  2313     018A                     l2102:	
  2314                           ;incstack = 0
  2315                           ; Regs used in _Lcd_Write_Int: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2316                           
  2317                           
  2318                           ;main.c: 317:     int n = val;
  2319     018A  1283               	bcf	3,5	;RP0=0, select bank0
  2320     018B  1303               	bcf	3,6	;RP1=0, select bank0
  2321     018C  082D               	movf	Lcd_Write_Int@val+1,w
  2322     018D  00E7               	movwf	Lcd_Write_Int@n+1
  2323     018E  082C               	movf	Lcd_Write_Int@val,w
  2324     018F  00E6               	movwf	Lcd_Write_Int@n
  2325     0190                     l2104:
  2326                           
  2327                           ;main.c: 318:     char buffer[50];;main.c: 319:     int i = 0;
  2328     0190  01EA               	clrf	Lcd_Write_Int@i
  2329     0191  01EB               	clrf	Lcd_Write_Int@i+1
  2330     0192                     l2106:
  2331                           
  2332                           ;main.c: 320:     char isNeg = n < 0;
  2333     0192  1BE7               	btfsc	Lcd_Write_Int@n+1,7
  2334     0193  2995               	goto	u2191
  2335     0194  2997               	goto	u2190
  2336     0195                     u2191:
  2337     0195  3001               	movlw	1
  2338     0196  2998               	goto	u2200
  2339     0197                     u2190:
  2340     0197  3000               	movlw	0
  2341     0198                     u2200:
  2342     0198  00E3               	movwf	Lcd_Write_Int@isNeg
  2343     0199                     l2108:
  2344                           
  2345                           ;main.c: 322:     unsigned int n1 = isNeg ? -n : n;
  2346     0199  0863               	movf	Lcd_Write_Int@isNeg,w
  2347     019A  1D03               	btfss	3,2
  2348     019B  299D               	goto	u2211
  2349     019C  299E               	goto	u2210
  2350     019D                     u2211:
  2351     019D  29A3               	goto	l2112
  2352     019E                     u2210:
  2353     019E                     l2110:
  2354     019E  0867               	movf	Lcd_Write_Int@n+1,w
  2355     019F  00E5               	movwf	Lcd_Write_Int@n1+1
  2356     01A0  0866               	movf	Lcd_Write_Int@n,w
  2357     01A1  00E4               	movwf	Lcd_Write_Int@n1
  2358     01A2  29DE               	goto	l2120
  2359     01A3                     l2112:
  2360     01A3  0966               	comf	Lcd_Write_Int@n,w
  2361     01A4  00AE               	movwf	??_Lcd_Write_Int
  2362     01A5  0967               	comf	Lcd_Write_Int@n+1,w
  2363     01A6  00AF               	movwf	??_Lcd_Write_Int+1
  2364     01A7  0AAE               	incf	??_Lcd_Write_Int,f
  2365     01A8  1903               	skipnz
  2366     01A9  0AAF               	incf	??_Lcd_Write_Int+1,f
  2367     01AA  082E               	movf	??_Lcd_Write_Int,w
  2368     01AB  00E4               	movwf	Lcd_Write_Int@n1
  2369     01AC  082F               	movf	??_Lcd_Write_Int+1,w
  2370     01AD  00E5               	movwf	Lcd_Write_Int@n1+1
  2371     01AE  29DE               	goto	l2120
  2372     01AF                     l2114:
  2373                           
  2374                           ;main.c: 325:         buffer[i++] = n1 % 10 + '0';
  2375     01AF  086A               	movf	Lcd_Write_Int@i,w
  2376     01B0  3E31               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2377     01B1  0084               	movwf	4
  2378     01B2  300A               	movlw	10
  2379     01B3  00A0               	movwf	___lwmod@divisor
  2380     01B4  3000               	movlw	0
  2381     01B5  00A1               	movwf	___lwmod@divisor+1
  2382     01B6  0865               	movf	Lcd_Write_Int@n1+1,w
  2383     01B7  00A3               	movwf	___lwmod@dividend+1
  2384     01B8  0864               	movf	Lcd_Write_Int@n1,w
  2385     01B9  00A2               	movwf	___lwmod@dividend
  2386     01BA  120A  118A  26DE  120A  118A  	fcall	___lwmod
  2387     01BF  1283               	bcf	3,5	;RP0=0, select bank0
  2388     01C0  1303               	bcf	3,6	;RP1=0, select bank0
  2389     01C1  0820               	movf	?___lwmod,w
  2390     01C2  3E30               	addlw	48
  2391     01C3  1383               	bcf	3,7	;select IRP bank0
  2392     01C4  0080               	movwf	0
  2393     01C5                     l2116:
  2394     01C5  3001               	movlw	1
  2395     01C6  07EA               	addwf	Lcd_Write_Int@i,f
  2396     01C7  1803               	skipnc
  2397     01C8  0AEB               	incf	Lcd_Write_Int@i+1,f
  2398     01C9  3000               	movlw	0
  2399     01CA  07EB               	addwf	Lcd_Write_Int@i+1,f
  2400     01CB                     l2118:
  2401                           
  2402                           ;main.c: 326:         n1 = n1 / 10;
  2403     01CB  300A               	movlw	10
  2404     01CC  00A0               	movwf	___lwdiv@divisor
  2405     01CD  3000               	movlw	0
  2406     01CE  00A1               	movwf	___lwdiv@divisor+1
  2407     01CF  0865               	movf	Lcd_Write_Int@n1+1,w
  2408     01D0  00A3               	movwf	___lwdiv@dividend+1
  2409     01D1  0864               	movf	Lcd_Write_Int@n1,w
  2410     01D2  00A2               	movwf	___lwdiv@dividend
  2411     01D3  120A  118A  2615  120A  118A  	fcall	___lwdiv
  2412     01D8  1283               	bcf	3,5	;RP0=0, select bank0
  2413     01D9  1303               	bcf	3,6	;RP1=0, select bank0
  2414     01DA  0821               	movf	?___lwdiv+1,w
  2415     01DB  00E5               	movwf	Lcd_Write_Int@n1+1
  2416     01DC  0820               	movf	?___lwdiv,w
  2417     01DD  00E4               	movwf	Lcd_Write_Int@n1
  2418     01DE                     l2120:
  2419                           
  2420                           ;main.c: 324:     while (n1 != 0) {
  2421     01DE  0864               	movf	Lcd_Write_Int@n1,w
  2422     01DF  0465               	iorwf	Lcd_Write_Int@n1+1,w
  2423     01E0  1D03               	btfss	3,2
  2424     01E1  29E3               	goto	u2221
  2425     01E2  29E4               	goto	u2220
  2426     01E3                     u2221:
  2427     01E3  29AF               	goto	l2114
  2428     01E4                     u2220:
  2429     01E4                     l2122:
  2430                           
  2431                           ;main.c: 329:     if (isNeg)
  2432     01E4  0863               	movf	Lcd_Write_Int@isNeg,w
  2433     01E5  1903               	btfsc	3,2
  2434     01E6  29E8               	goto	u2231
  2435     01E7  29E9               	goto	u2230
  2436     01E8                     u2231:
  2437     01E8  29F5               	goto	l2128
  2438     01E9                     u2230:
  2439     01E9                     l2124:
  2440                           
  2441                           ;main.c: 330:         buffer[i++] = '-';
  2442     01E9  086A               	movf	Lcd_Write_Int@i,w
  2443     01EA  3E31               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2444     01EB  0084               	movwf	4
  2445     01EC  302D               	movlw	45
  2446     01ED  1383               	bcf	3,7	;select IRP bank0
  2447     01EE  0080               	movwf	0
  2448     01EF                     l2126:
  2449     01EF  3001               	movlw	1
  2450     01F0  07EA               	addwf	Lcd_Write_Int@i,f
  2451     01F1  1803               	skipnc
  2452     01F2  0AEB               	incf	Lcd_Write_Int@i+1,f
  2453     01F3  3000               	movlw	0
  2454     01F4  07EB               	addwf	Lcd_Write_Int@i+1,f
  2455     01F5                     l2128:
  2456                           
  2457                           ;main.c: 332:     buffer[i] = '\0';
  2458     01F5  086A               	movf	Lcd_Write_Int@i,w
  2459     01F6  3E31               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2460     01F7  0084               	movwf	4
  2461     01F8  1383               	bcf	3,7	;select IRP bank0
  2462     01F9  0180               	clrf	0
  2463     01FA                     l2130:
  2464                           
  2465                           ;main.c: 334:     for (int t = 0; t < i / 2; t++) {
  2466     01FA  01E8               	clrf	Lcd_Write_Int@t
  2467     01FB  01E9               	clrf	Lcd_Write_Int@t+1
  2468     01FC  2A39               	goto	l2136
  2469     01FD                     l2132:
  2470                           
  2471                           ;main.c: 335:         buffer[t] ^= buffer[i - t - 1];
  2472     01FD  3031               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2473     01FE  1283               	bcf	3,5	;RP0=0, select bank0
  2474     01FF  1303               	bcf	3,6	;RP1=0, select bank0
  2475     0200  00AE               	movwf	??_Lcd_Write_Int
  2476     0201  0868               	movf	Lcd_Write_Int@t,w
  2477     0202  02AE               	subwf	??_Lcd_Write_Int,f
  2478     0203  086A               	movf	Lcd_Write_Int@i,w
  2479     0204  072E               	addwf	??_Lcd_Write_Int,w
  2480     0205  00AF               	movwf	??_Lcd_Write_Int+1
  2481     0206  082F               	movf	??_Lcd_Write_Int+1,w
  2482     0207  3EFF               	addlw	255
  2483     0208  0084               	movwf	4
  2484     0209  1383               	bcf	3,7	;select IRP bank0
  2485     020A  0800               	movf	0,w
  2486     020B  00B0               	movwf	??_Lcd_Write_Int+2
  2487     020C  0868               	movf	Lcd_Write_Int@t,w
  2488     020D  3E31               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2489     020E  0084               	movwf	4
  2490     020F  0830               	movf	??_Lcd_Write_Int+2,w
  2491     0210  0680               	xorwf	0,f
  2492                           
  2493                           ;main.c: 336:         buffer[i - t - 1] ^= buffer[t];
  2494     0211  0868               	movf	Lcd_Write_Int@t,w
  2495     0212  3E31               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2496     0213  0084               	movwf	4
  2497     0214  0800               	movf	0,w
  2498     0215  00AE               	movwf	??_Lcd_Write_Int
  2499     0216  3031               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2500     0217  00AF               	movwf	??_Lcd_Write_Int+1
  2501     0218  0868               	movf	Lcd_Write_Int@t,w
  2502     0219  02AF               	subwf	??_Lcd_Write_Int+1,f
  2503     021A  086A               	movf	Lcd_Write_Int@i,w
  2504     021B  072F               	addwf	??_Lcd_Write_Int+1,w
  2505     021C  00B0               	movwf	??_Lcd_Write_Int+2
  2506     021D  0830               	movf	??_Lcd_Write_Int+2,w
  2507     021E  3EFF               	addlw	255
  2508     021F  0084               	movwf	4
  2509     0220  082E               	movf	??_Lcd_Write_Int,w
  2510     0221  0680               	xorwf	0,f
  2511                           
  2512                           ;main.c: 337:         buffer[t] ^= buffer[i - t - 1];
  2513     0222  3031               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2514     0223  00AE               	movwf	??_Lcd_Write_Int
  2515     0224  0868               	movf	Lcd_Write_Int@t,w
  2516     0225  02AE               	subwf	??_Lcd_Write_Int,f
  2517     0226  086A               	movf	Lcd_Write_Int@i,w
  2518     0227  072E               	addwf	??_Lcd_Write_Int,w
  2519     0228  00AF               	movwf	??_Lcd_Write_Int+1
  2520     0229  082F               	movf	??_Lcd_Write_Int+1,w
  2521     022A  3EFF               	addlw	255
  2522     022B  0084               	movwf	4
  2523     022C  0800               	movf	0,w
  2524     022D  00B0               	movwf	??_Lcd_Write_Int+2
  2525     022E  0868               	movf	Lcd_Write_Int@t,w
  2526     022F  3E31               	addlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2527     0230  0084               	movwf	4
  2528     0231  0830               	movf	??_Lcd_Write_Int+2,w
  2529     0232  0680               	xorwf	0,f
  2530     0233                     l2134:
  2531                           
  2532                           ;main.c: 338:     }
  2533     0233  3001               	movlw	1
  2534     0234  07E8               	addwf	Lcd_Write_Int@t,f
  2535     0235  1803               	skipnc
  2536     0236  0AE9               	incf	Lcd_Write_Int@t+1,f
  2537     0237  3000               	movlw	0
  2538     0238  07E9               	addwf	Lcd_Write_Int@t+1,f
  2539     0239                     l2136:
  2540     0239  3002               	movlw	2
  2541     023A  00A0               	movwf	___awdiv@divisor
  2542     023B  3000               	movlw	0
  2543     023C  00A1               	movwf	___awdiv@divisor+1
  2544     023D  086B               	movf	Lcd_Write_Int@i+1,w
  2545     023E  00A3               	movwf	___awdiv@dividend+1
  2546     023F  086A               	movf	Lcd_Write_Int@i,w
  2547     0240  00A2               	movwf	___awdiv@dividend
  2548     0241  120A  118A  2561  120A  118A  	fcall	___awdiv
  2549     0246  1283               	bcf	3,5	;RP0=0, select bank0
  2550     0247  1303               	bcf	3,6	;RP1=0, select bank0
  2551     0248  0869               	movf	Lcd_Write_Int@t+1,w
  2552     0249  3A80               	xorlw	128
  2553     024A  00AE               	movwf	??_Lcd_Write_Int
  2554     024B  0821               	movf	?___awdiv+1,w
  2555     024C  3A80               	xorlw	128
  2556     024D  022E               	subwf	??_Lcd_Write_Int,w
  2557     024E  1D03               	skipz
  2558     024F  2A52               	goto	u2245
  2559     0250  0820               	movf	?___awdiv,w
  2560     0251  0268               	subwf	Lcd_Write_Int@t,w
  2561     0252                     u2245:
  2562     0252  1C03               	skipc
  2563     0253  2A55               	goto	u2241
  2564     0254  2A56               	goto	u2240
  2565     0255                     u2241:
  2566     0255  29FD               	goto	l2132
  2567     0256                     u2240:
  2568     0256                     l2138:
  2569                           
  2570                           ;main.c: 340:     if (n == 0) {
  2571     0256  1283               	bcf	3,5	;RP0=0, select bank0
  2572     0257  1303               	bcf	3,6	;RP1=0, select bank0
  2573     0258  0866               	movf	Lcd_Write_Int@n,w
  2574     0259  0467               	iorwf	Lcd_Write_Int@n+1,w
  2575     025A  1D03               	btfss	3,2
  2576     025B  2A5D               	goto	u2251
  2577     025C  2A5E               	goto	u2250
  2578     025D                     u2251:
  2579     025D  2A61               	goto	l2144
  2580     025E                     u2250:
  2581     025E                     l2140:
  2582                           
  2583                           ;main.c: 341:         buffer[0] = '0';
  2584     025E  3030               	movlw	48
  2585     025F  00B1               	movwf	Lcd_Write_Int@buffer
  2586     0260                     l2142:
  2587                           
  2588                           ;main.c: 342:         buffer[1] = '\0';
  2589     0260  01B2               	clrf	Lcd_Write_Int@buffer+1
  2590     0261                     l2144:
  2591                           
  2592                           ;main.c: 345:     Lcd_Write_String(buffer);
  2593     0261  3031               	movlw	(low (Lcd_Write_Int@buffer| 0))& (0+255)
  2594     0262  00A5               	movwf	Lcd_Write_String@a
  2595     0263  3000               	movlw	0
  2596     0264  00A6               	movwf	Lcd_Write_String@a+1
  2597     0265  120A  118A  265B  120A  118A  	fcall	_Lcd_Write_String
  2598     026A                     l192:
  2599     026A  0008               	return
  2600     026B                     __end_of_Lcd_Write_Int:
  2601                           
  2602                           	psect	text8
  2603     06DE                     __ptext8:	
  2604 ;; *************** function ___lwmod *****************
  2605 ;; Defined at:
  2606 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  2607 ;; Parameters:    Size  Location     Type
  2608 ;;  divisor         2    0[BANK0 ] unsigned int 
  2609 ;;  dividend        2    2[BANK0 ] unsigned int 
  2610 ;; Auto vars:     Size  Location     Type
  2611 ;;  counter         1    5[BANK0 ] unsigned char 
  2612 ;; Return value:  Size  Location     Type
  2613 ;;                  2    0[BANK0 ] unsigned int 
  2614 ;; Registers used:
  2615 ;;		wreg, status,2, status,0
  2616 ;; Tracked objects:
  2617 ;;		On entry : 0/0
  2618 ;;		On exit  : 0/0
  2619 ;;		Unchanged: 0/0
  2620 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2621 ;;      Params:         0       4       0       0       0
  2622 ;;      Locals:         0       1       0       0       0
  2623 ;;      Temps:          0       1       0       0       0
  2624 ;;      Totals:         0       6       0       0       0
  2625 ;;Total ram usage:        6 bytes
  2626 ;; Hardware stack levels used: 1
  2627 ;; Hardware stack levels required when called: 1
  2628 ;; This function calls:
  2629 ;;		Nothing
  2630 ;; This function is called by:
  2631 ;;		_Lcd_Write_Int
  2632 ;;		_UART_TxInt
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635                           
  2636     06DE                     ___lwmod:	
  2637                           ;psect for function ___lwmod
  2638                           
  2639     06DE                     l2036:	
  2640                           ;incstack = 0
  2641                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  2642                           
  2643     06DE  1283               	bcf	3,5	;RP0=0, select bank0
  2644     06DF  1303               	bcf	3,6	;RP1=0, select bank0
  2645     06E0  0820               	movf	___lwmod@divisor,w
  2646     06E1  0421               	iorwf	___lwmod@divisor+1,w
  2647     06E2  1903               	btfsc	3,2
  2648     06E3  2EE5               	goto	u2121
  2649     06E4  2EE6               	goto	u2120
  2650     06E5                     u2121:
  2651     06E5  2F15               	goto	l2054
  2652     06E6                     u2120:
  2653     06E6                     l2038:
  2654     06E6  01A5               	clrf	___lwmod@counter
  2655     06E7  0AA5               	incf	___lwmod@counter,f
  2656     06E8  2EF4               	goto	l2044
  2657     06E9                     l2040:
  2658     06E9  3001               	movlw	1
  2659     06EA                     u2135:
  2660     06EA  1003               	clrc
  2661     06EB  0DA0               	rlf	___lwmod@divisor,f
  2662     06EC  0DA1               	rlf	___lwmod@divisor+1,f
  2663     06ED  3EFF               	addlw	-1
  2664     06EE  1D03               	skipz
  2665     06EF  2EEA               	goto	u2135
  2666     06F0                     l2042:
  2667     06F0  3001               	movlw	1
  2668     06F1  00A4               	movwf	??___lwmod
  2669     06F2  0824               	movf	??___lwmod,w
  2670     06F3  07A5               	addwf	___lwmod@counter,f
  2671     06F4                     l2044:
  2672     06F4  1FA1               	btfss	___lwmod@divisor+1,7
  2673     06F5  2EF7               	goto	u2141
  2674     06F6  2EF8               	goto	u2140
  2675     06F7                     u2141:
  2676     06F7  2EE9               	goto	l2040
  2677     06F8                     u2140:
  2678     06F8                     l2046:
  2679     06F8  0821               	movf	___lwmod@divisor+1,w
  2680     06F9  0223               	subwf	___lwmod@dividend+1,w
  2681     06FA  1D03               	skipz
  2682     06FB  2EFE               	goto	u2155
  2683     06FC  0820               	movf	___lwmod@divisor,w
  2684     06FD  0222               	subwf	___lwmod@dividend,w
  2685     06FE                     u2155:
  2686     06FE  1C03               	skipc
  2687     06FF  2F01               	goto	u2151
  2688     0700  2F02               	goto	u2150
  2689     0701                     u2151:
  2690     0701  2F08               	goto	l2050
  2691     0702                     u2150:
  2692     0702                     l2048:
  2693     0702  0820               	movf	___lwmod@divisor,w
  2694     0703  02A2               	subwf	___lwmod@dividend,f
  2695     0704  0821               	movf	___lwmod@divisor+1,w
  2696     0705  1C03               	skipc
  2697     0706  03A3               	decf	___lwmod@dividend+1,f
  2698     0707  02A3               	subwf	___lwmod@dividend+1,f
  2699     0708                     l2050:
  2700     0708  3001               	movlw	1
  2701     0709                     u2165:
  2702     0709  1003               	clrc
  2703     070A  0CA1               	rrf	___lwmod@divisor+1,f
  2704     070B  0CA0               	rrf	___lwmod@divisor,f
  2705     070C  3EFF               	addlw	-1
  2706     070D  1D03               	skipz
  2707     070E  2F09               	goto	u2165
  2708     070F                     l2052:
  2709     070F  3001               	movlw	1
  2710     0710  02A5               	subwf	___lwmod@counter,f
  2711     0711  1D03               	btfss	3,2
  2712     0712  2F14               	goto	u2171
  2713     0713  2F15               	goto	u2170
  2714     0714                     u2171:
  2715     0714  2EF8               	goto	l2046
  2716     0715                     u2170:
  2717     0715                     l2054:
  2718     0715  0823               	movf	___lwmod@dividend+1,w
  2719     0716  00A1               	movwf	?___lwmod+1
  2720     0717  0822               	movf	___lwmod@dividend,w
  2721     0718  00A0               	movwf	?___lwmod
  2722     0719                     l590:
  2723     0719  0008               	return
  2724     071A                     __end_of___lwmod:
  2725                           
  2726                           	psect	text9
  2727     0615                     __ptext9:	
  2728 ;; *************** function ___lwdiv *****************
  2729 ;; Defined at:
  2730 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  2731 ;; Parameters:    Size  Location     Type
  2732 ;;  divisor         2    0[BANK0 ] unsigned int 
  2733 ;;  dividend        2    2[BANK0 ] unsigned int 
  2734 ;; Auto vars:     Size  Location     Type
  2735 ;;  quotient        2    6[BANK0 ] unsigned int 
  2736 ;;  counter         1    5[BANK0 ] unsigned char 
  2737 ;; Return value:  Size  Location     Type
  2738 ;;                  2    0[BANK0 ] unsigned int 
  2739 ;; Registers used:
  2740 ;;		wreg, status,2, status,0
  2741 ;; Tracked objects:
  2742 ;;		On entry : 0/0
  2743 ;;		On exit  : 0/0
  2744 ;;		Unchanged: 0/0
  2745 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2746 ;;      Params:         0       4       0       0       0
  2747 ;;      Locals:         0       3       0       0       0
  2748 ;;      Temps:          0       1       0       0       0
  2749 ;;      Totals:         0       8       0       0       0
  2750 ;;Total ram usage:        8 bytes
  2751 ;; Hardware stack levels used: 1
  2752 ;; Hardware stack levels required when called: 1
  2753 ;; This function calls:
  2754 ;;		Nothing
  2755 ;; This function is called by:
  2756 ;;		_Lcd_Write_Int
  2757 ;;		_UART_TxInt
  2758 ;; This function uses a non-reentrant model
  2759 ;;
  2760                           
  2761     0615                     ___lwdiv:	
  2762                           ;psect for function ___lwdiv
  2763                           
  2764     0615                     l2010:	
  2765                           ;incstack = 0
  2766                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  2767                           
  2768     0615  1283               	bcf	3,5	;RP0=0, select bank0
  2769     0616  1303               	bcf	3,6	;RP1=0, select bank0
  2770     0617  01A6               	clrf	___lwdiv@quotient
  2771     0618  01A7               	clrf	___lwdiv@quotient+1
  2772     0619                     l2012:
  2773     0619  0820               	movf	___lwdiv@divisor,w
  2774     061A  0421               	iorwf	___lwdiv@divisor+1,w
  2775     061B  1903               	btfsc	3,2
  2776     061C  2E1E               	goto	u2051
  2777     061D  2E1F               	goto	u2050
  2778     061E                     u2051:
  2779     061E  2E56               	goto	l2032
  2780     061F                     u2050:
  2781     061F                     l2014:
  2782     061F  01A5               	clrf	___lwdiv@counter
  2783     0620  0AA5               	incf	___lwdiv@counter,f
  2784     0621  2E2D               	goto	l2020
  2785     0622                     l2016:
  2786     0622  3001               	movlw	1
  2787     0623                     u2065:
  2788     0623  1003               	clrc
  2789     0624  0DA0               	rlf	___lwdiv@divisor,f
  2790     0625  0DA1               	rlf	___lwdiv@divisor+1,f
  2791     0626  3EFF               	addlw	-1
  2792     0627  1D03               	skipz
  2793     0628  2E23               	goto	u2065
  2794     0629                     l2018:
  2795     0629  3001               	movlw	1
  2796     062A  00A4               	movwf	??___lwdiv
  2797     062B  0824               	movf	??___lwdiv,w
  2798     062C  07A5               	addwf	___lwdiv@counter,f
  2799     062D                     l2020:
  2800     062D  1FA1               	btfss	___lwdiv@divisor+1,7
  2801     062E  2E30               	goto	u2071
  2802     062F  2E31               	goto	u2070
  2803     0630                     u2071:
  2804     0630  2E22               	goto	l2016
  2805     0631                     u2070:
  2806     0631                     l2022:
  2807     0631  3001               	movlw	1
  2808     0632                     u2085:
  2809     0632  1003               	clrc
  2810     0633  0DA6               	rlf	___lwdiv@quotient,f
  2811     0634  0DA7               	rlf	___lwdiv@quotient+1,f
  2812     0635  3EFF               	addlw	-1
  2813     0636  1D03               	skipz
  2814     0637  2E32               	goto	u2085
  2815     0638  0821               	movf	___lwdiv@divisor+1,w
  2816     0639  0223               	subwf	___lwdiv@dividend+1,w
  2817     063A  1D03               	skipz
  2818     063B  2E3E               	goto	u2095
  2819     063C  0820               	movf	___lwdiv@divisor,w
  2820     063D  0222               	subwf	___lwdiv@dividend,w
  2821     063E                     u2095:
  2822     063E  1C03               	skipc
  2823     063F  2E41               	goto	u2091
  2824     0640  2E42               	goto	u2090
  2825     0641                     u2091:
  2826     0641  2E49               	goto	l2028
  2827     0642                     u2090:
  2828     0642                     l2024:
  2829     0642  0820               	movf	___lwdiv@divisor,w
  2830     0643  02A2               	subwf	___lwdiv@dividend,f
  2831     0644  0821               	movf	___lwdiv@divisor+1,w
  2832     0645  1C03               	skipc
  2833     0646  03A3               	decf	___lwdiv@dividend+1,f
  2834     0647  02A3               	subwf	___lwdiv@dividend+1,f
  2835     0648                     l2026:
  2836     0648  1426               	bsf	___lwdiv@quotient,0
  2837     0649                     l2028:
  2838     0649  3001               	movlw	1
  2839     064A                     u2105:
  2840     064A  1003               	clrc
  2841     064B  0CA1               	rrf	___lwdiv@divisor+1,f
  2842     064C  0CA0               	rrf	___lwdiv@divisor,f
  2843     064D  3EFF               	addlw	-1
  2844     064E  1D03               	skipz
  2845     064F  2E4A               	goto	u2105
  2846     0650                     l2030:
  2847     0650  3001               	movlw	1
  2848     0651  02A5               	subwf	___lwdiv@counter,f
  2849     0652  1D03               	btfss	3,2
  2850     0653  2E55               	goto	u2111
  2851     0654  2E56               	goto	u2110
  2852     0655                     u2111:
  2853     0655  2E31               	goto	l2022
  2854     0656                     u2110:
  2855     0656                     l2032:
  2856     0656  0827               	movf	___lwdiv@quotient+1,w
  2857     0657  00A1               	movwf	?___lwdiv+1
  2858     0658  0826               	movf	___lwdiv@quotient,w
  2859     0659  00A0               	movwf	?___lwdiv
  2860     065A                     l580:
  2861     065A  0008               	return
  2862     065B                     __end_of___lwdiv:
  2863                           
  2864                           	psect	text10
  2865     0561                     __ptext10:	
  2866 ;; *************** function ___awdiv *****************
  2867 ;; Defined at:
  2868 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\awdiv.c"
  2869 ;; Parameters:    Size  Location     Type
  2870 ;;  divisor         2    0[BANK0 ] int 
  2871 ;;  dividend        2    2[BANK0 ] int 
  2872 ;; Auto vars:     Size  Location     Type
  2873 ;;  quotient        2    7[BANK0 ] int 
  2874 ;;  sign            1    6[BANK0 ] unsigned char 
  2875 ;;  counter         1    5[BANK0 ] unsigned char 
  2876 ;; Return value:  Size  Location     Type
  2877 ;;                  2    0[BANK0 ] int 
  2878 ;; Registers used:
  2879 ;;		wreg, status,2, status,0
  2880 ;; Tracked objects:
  2881 ;;		On entry : 0/0
  2882 ;;		On exit  : 0/0
  2883 ;;		Unchanged: 0/0
  2884 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2885 ;;      Params:         0       4       0       0       0
  2886 ;;      Locals:         0       4       0       0       0
  2887 ;;      Temps:          0       1       0       0       0
  2888 ;;      Totals:         0       9       0       0       0
  2889 ;;Total ram usage:        9 bytes
  2890 ;; Hardware stack levels used: 1
  2891 ;; Hardware stack levels required when called: 1
  2892 ;; This function calls:
  2893 ;;		Nothing
  2894 ;; This function is called by:
  2895 ;;		_Lcd_Write_Int
  2896 ;;		_UART_TxInt
  2897 ;; This function uses a non-reentrant model
  2898 ;;
  2899                           
  2900     0561                     ___awdiv:	
  2901                           ;psect for function ___awdiv
  2902                           
  2903     0561                     l1966:	
  2904                           ;incstack = 0
  2905                           ; Regs used in ___awdiv: [wreg+status,2+status,0]
  2906                           
  2907     0561  1283               	bcf	3,5	;RP0=0, select bank0
  2908     0562  1303               	bcf	3,6	;RP1=0, select bank0
  2909     0563  01A6               	clrf	___awdiv@sign
  2910     0564                     l1968:
  2911     0564  1FA1               	btfss	___awdiv@divisor+1,7
  2912     0565  2D67               	goto	u1951
  2913     0566  2D68               	goto	u1950
  2914     0567                     u1951:
  2915     0567  2D6F               	goto	l1974
  2916     0568                     u1950:
  2917     0568                     l1970:
  2918     0568  09A0               	comf	___awdiv@divisor,f
  2919     0569  09A1               	comf	___awdiv@divisor+1,f
  2920     056A  0AA0               	incf	___awdiv@divisor,f
  2921     056B  1903               	skipnz
  2922     056C  0AA1               	incf	___awdiv@divisor+1,f
  2923     056D                     l1972:
  2924     056D  01A6               	clrf	___awdiv@sign
  2925     056E  0AA6               	incf	___awdiv@sign,f
  2926     056F                     l1974:
  2927     056F  1FA3               	btfss	___awdiv@dividend+1,7
  2928     0570  2D72               	goto	u1961
  2929     0571  2D73               	goto	u1960
  2930     0572                     u1961:
  2931     0572  2D7C               	goto	l1980
  2932     0573                     u1960:
  2933     0573                     l1976:
  2934     0573  09A2               	comf	___awdiv@dividend,f
  2935     0574  09A3               	comf	___awdiv@dividend+1,f
  2936     0575  0AA2               	incf	___awdiv@dividend,f
  2937     0576  1903               	skipnz
  2938     0577  0AA3               	incf	___awdiv@dividend+1,f
  2939     0578                     l1978:
  2940     0578  3001               	movlw	1
  2941     0579  00A4               	movwf	??___awdiv
  2942     057A  0824               	movf	??___awdiv,w
  2943     057B  06A6               	xorwf	___awdiv@sign,f
  2944     057C                     l1980:
  2945     057C  01A7               	clrf	___awdiv@quotient
  2946     057D  01A8               	clrf	___awdiv@quotient+1
  2947     057E                     l1982:
  2948     057E  0820               	movf	___awdiv@divisor,w
  2949     057F  0421               	iorwf	___awdiv@divisor+1,w
  2950     0580  1903               	btfsc	3,2
  2951     0581  2D83               	goto	u1971
  2952     0582  2D84               	goto	u1970
  2953     0583                     u1971:
  2954     0583  2DBB               	goto	l2002
  2955     0584                     u1970:
  2956     0584                     l1984:
  2957     0584  01A5               	clrf	___awdiv@counter
  2958     0585  0AA5               	incf	___awdiv@counter,f
  2959     0586  2D92               	goto	l1990
  2960     0587                     l1986:
  2961     0587  3001               	movlw	1
  2962     0588                     u1985:
  2963     0588  1003               	clrc
  2964     0589  0DA0               	rlf	___awdiv@divisor,f
  2965     058A  0DA1               	rlf	___awdiv@divisor+1,f
  2966     058B  3EFF               	addlw	-1
  2967     058C  1D03               	skipz
  2968     058D  2D88               	goto	u1985
  2969     058E                     l1988:
  2970     058E  3001               	movlw	1
  2971     058F  00A4               	movwf	??___awdiv
  2972     0590  0824               	movf	??___awdiv,w
  2973     0591  07A5               	addwf	___awdiv@counter,f
  2974     0592                     l1990:
  2975     0592  1FA1               	btfss	___awdiv@divisor+1,7
  2976     0593  2D95               	goto	u1991
  2977     0594  2D96               	goto	u1990
  2978     0595                     u1991:
  2979     0595  2D87               	goto	l1986
  2980     0596                     u1990:
  2981     0596                     l1992:
  2982     0596  3001               	movlw	1
  2983     0597                     u2005:
  2984     0597  1003               	clrc
  2985     0598  0DA7               	rlf	___awdiv@quotient,f
  2986     0599  0DA8               	rlf	___awdiv@quotient+1,f
  2987     059A  3EFF               	addlw	-1
  2988     059B  1D03               	skipz
  2989     059C  2D97               	goto	u2005
  2990     059D  0821               	movf	___awdiv@divisor+1,w
  2991     059E  0223               	subwf	___awdiv@dividend+1,w
  2992     059F  1D03               	skipz
  2993     05A0  2DA3               	goto	u2015
  2994     05A1  0820               	movf	___awdiv@divisor,w
  2995     05A2  0222               	subwf	___awdiv@dividend,w
  2996     05A3                     u2015:
  2997     05A3  1C03               	skipc
  2998     05A4  2DA6               	goto	u2011
  2999     05A5  2DA7               	goto	u2010
  3000     05A6                     u2011:
  3001     05A6  2DAE               	goto	l1998
  3002     05A7                     u2010:
  3003     05A7                     l1994:
  3004     05A7  0820               	movf	___awdiv@divisor,w
  3005     05A8  02A2               	subwf	___awdiv@dividend,f
  3006     05A9  0821               	movf	___awdiv@divisor+1,w
  3007     05AA  1C03               	skipc
  3008     05AB  03A3               	decf	___awdiv@dividend+1,f
  3009     05AC  02A3               	subwf	___awdiv@dividend+1,f
  3010     05AD                     l1996:
  3011     05AD  1427               	bsf	___awdiv@quotient,0
  3012     05AE                     l1998:
  3013     05AE  3001               	movlw	1
  3014     05AF                     u2025:
  3015     05AF  1003               	clrc
  3016     05B0  0CA1               	rrf	___awdiv@divisor+1,f
  3017     05B1  0CA0               	rrf	___awdiv@divisor,f
  3018     05B2  3EFF               	addlw	-1
  3019     05B3  1D03               	skipz
  3020     05B4  2DAF               	goto	u2025
  3021     05B5                     l2000:
  3022     05B5  3001               	movlw	1
  3023     05B6  02A5               	subwf	___awdiv@counter,f
  3024     05B7  1D03               	btfss	3,2
  3025     05B8  2DBA               	goto	u2031
  3026     05B9  2DBB               	goto	u2030
  3027     05BA                     u2031:
  3028     05BA  2D96               	goto	l1992
  3029     05BB                     u2030:
  3030     05BB                     l2002:
  3031     05BB  0826               	movf	___awdiv@sign,w
  3032     05BC  1903               	btfsc	3,2
  3033     05BD  2DBF               	goto	u2041
  3034     05BE  2DC0               	goto	u2040
  3035     05BF                     u2041:
  3036     05BF  2DC5               	goto	l2006
  3037     05C0                     u2040:
  3038     05C0                     l2004:
  3039     05C0  09A7               	comf	___awdiv@quotient,f
  3040     05C1  09A8               	comf	___awdiv@quotient+1,f
  3041     05C2  0AA7               	incf	___awdiv@quotient,f
  3042     05C3  1903               	skipnz
  3043     05C4  0AA8               	incf	___awdiv@quotient+1,f
  3044     05C5                     l2006:
  3045     05C5  0828               	movf	___awdiv@quotient+1,w
  3046     05C6  00A1               	movwf	?___awdiv+1
  3047     05C7  0827               	movf	___awdiv@quotient,w
  3048     05C8  00A0               	movwf	?___awdiv
  3049     05C9                     l461:
  3050     05C9  0008               	return
  3051     05CA                     __end_of___awdiv:
  3052                           
  3053                           	psect	text11
  3054     065B                     __ptext11:	
  3055 ;; *************** function _Lcd_Write_String *****************
  3056 ;; Defined at:
  3057 ;;		line 299 in file "main.c"
  3058 ;; Parameters:    Size  Location     Type
  3059 ;;  a               2    5[BANK0 ] PTR unsigned char 
  3060 ;;		 -> Lcd_Write_Int@buffer(50), STR_1(17), 
  3061 ;; Auto vars:     Size  Location     Type
  3062 ;;  i               2   10[BANK0 ] int 
  3063 ;; Return value:  Size  Location     Type
  3064 ;;                  1    wreg      void 
  3065 ;; Registers used:
  3066 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3067 ;; Tracked objects:
  3068 ;;		On entry : 0/0
  3069 ;;		On exit  : 0/0
  3070 ;;		Unchanged: 0/0
  3071 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3072 ;;      Params:         0       2       0       0       0
  3073 ;;      Locals:         0       2       0       0       0
  3074 ;;      Temps:          0       3       0       0       0
  3075 ;;      Totals:         0       7       0       0       0
  3076 ;;Total ram usage:        7 bytes
  3077 ;; Hardware stack levels used: 1
  3078 ;; Hardware stack levels required when called: 3
  3079 ;; This function calls:
  3080 ;;		_Lcd_Write_Char
  3081 ;; This function is called by:
  3082 ;;		_main
  3083 ;;		_Lcd_Write_Int
  3084 ;; This function uses a non-reentrant model
  3085 ;;
  3086                           
  3087     065B                     _Lcd_Write_String:	
  3088                           ;psect for function _Lcd_Write_String
  3089                           
  3090     065B                     l1896:	
  3091                           ;incstack = 0
  3092                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3093                           
  3094                           
  3095                           ;main.c: 300:     int i;;main.c: 301:     for (i = 0; a[i] != '\0'; i++)
  3096     065B  1283               	bcf	3,5	;RP0=0, select bank0
  3097     065C  1303               	bcf	3,6	;RP1=0, select bank0
  3098     065D  01AA               	clrf	Lcd_Write_String@i
  3099     065E  01AB               	clrf	Lcd_Write_String@i+1
  3100     065F  2E84               	goto	l1902
  3101     0660                     l1898:
  3102                           
  3103                           ;main.c: 302:         Lcd_Write_Char(a[i]);
  3104     0660  082A               	movf	Lcd_Write_String@i,w
  3105     0661  0725               	addwf	Lcd_Write_String@a,w
  3106     0662  00A8               	movwf	??_Lcd_Write_String+1
  3107     0663  0826               	movf	Lcd_Write_String@a+1,w
  3108     0664  00A7               	movwf	??_Lcd_Write_String
  3109     0665  1803               	skipnc
  3110     0666  0AA7               	incf	??_Lcd_Write_String,f
  3111     0667  1FAA               	btfss	Lcd_Write_String@i,7
  3112     0668  2E6A               	goto	u1810
  3113     0669  03A7               	decf	??_Lcd_Write_String,f
  3114     066A                     u1810:
  3115     066A  1283               	bcf	3,5	;RP0=0, select bank0
  3116     066B  1303               	bcf	3,6	;RP1=0, select bank0
  3117     066C  0827               	movf	??_Lcd_Write_String,w
  3118     066D  00A9               	movwf	??_Lcd_Write_String+2
  3119     066E  0829               	movf	??_Lcd_Write_String+2,w
  3120     066F  00FF               	movwf	btemp+1
  3121     0670  0828               	movf	??_Lcd_Write_String+1,w
  3122     0671  0084               	movwf	4
  3123     0672  120A  118A  2753  120A  118A  	fcall	stringtab
  3124     0677  120A  118A  271A  120A  118A  	fcall	_Lcd_Write_Char
  3125     067C                     l1900:
  3126     067C  3001               	movlw	1
  3127     067D  1283               	bcf	3,5	;RP0=0, select bank0
  3128     067E  1303               	bcf	3,6	;RP1=0, select bank0
  3129     067F  07AA               	addwf	Lcd_Write_String@i,f
  3130     0680  1803               	skipnc
  3131     0681  0AAB               	incf	Lcd_Write_String@i+1,f
  3132     0682  3000               	movlw	0
  3133     0683  07AB               	addwf	Lcd_Write_String@i+1,f
  3134     0684                     l1902:
  3135     0684  082A               	movf	Lcd_Write_String@i,w
  3136     0685  0725               	addwf	Lcd_Write_String@a,w
  3137     0686  00A8               	movwf	??_Lcd_Write_String+1
  3138     0687  0826               	movf	Lcd_Write_String@a+1,w
  3139     0688  00A7               	movwf	??_Lcd_Write_String
  3140     0689  1803               	skipnc
  3141     068A  0AA7               	incf	??_Lcd_Write_String,f
  3142     068B  1FAA               	btfss	Lcd_Write_String@i,7
  3143     068C  2E8E               	goto	u1820
  3144     068D  03A7               	decf	??_Lcd_Write_String,f
  3145     068E                     u1820:
  3146     068E  1283               	bcf	3,5	;RP0=0, select bank0
  3147     068F  1303               	bcf	3,6	;RP1=0, select bank0
  3148     0690  0827               	movf	??_Lcd_Write_String,w
  3149     0691  00A9               	movwf	??_Lcd_Write_String+2
  3150     0692  0829               	movf	??_Lcd_Write_String+2,w
  3151     0693  00FF               	movwf	btemp+1
  3152     0694  0828               	movf	??_Lcd_Write_String+1,w
  3153     0695  0084               	movwf	4
  3154     0696  120A  118A  2753  120A  118A  	fcall	stringtab
  3155     069B  3A00               	xorlw	0
  3156     069C  1D03               	skipz
  3157     069D  2E9F               	goto	u1831
  3158     069E  2EA0               	goto	u1830
  3159     069F                     u1831:
  3160     069F  2E60               	goto	l1898
  3161     06A0                     u1830:
  3162     06A0                     l171:
  3163     06A0  0008               	return
  3164     06A1                     __end_of_Lcd_Write_String:
  3165                           
  3166                           	psect	text12
  3167     071A                     __ptext12:	
  3168 ;; *************** function _Lcd_Write_Char *****************
  3169 ;; Defined at:
  3170 ;;		line 282 in file "main.c"
  3171 ;; Parameters:    Size  Location     Type
  3172 ;;  a               1    wreg     unsigned char 
  3173 ;; Auto vars:     Size  Location     Type
  3174 ;;  a               1    4[BANK0 ] unsigned char 
  3175 ;;  y               1    3[BANK0 ] unsigned char 
  3176 ;;  temp            1    2[BANK0 ] unsigned char 
  3177 ;; Return value:  Size  Location     Type
  3178 ;;                  1    wreg      void 
  3179 ;; Registers used:
  3180 ;;		wreg, status,2, status,0, pclath, cstack
  3181 ;; Tracked objects:
  3182 ;;		On entry : 0/0
  3183 ;;		On exit  : 0/0
  3184 ;;		Unchanged: 0/0
  3185 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3186 ;;      Params:         0       0       0       0       0
  3187 ;;      Locals:         0       3       0       0       0
  3188 ;;      Temps:          0       1       0       0       0
  3189 ;;      Totals:         0       4       0       0       0
  3190 ;;Total ram usage:        4 bytes
  3191 ;; Hardware stack levels used: 1
  3192 ;; Hardware stack levels required when called: 2
  3193 ;; This function calls:
  3194 ;;		_Lcd_Port
  3195 ;; This function is called by:
  3196 ;;		_Lcd_Write_String
  3197 ;; This function uses a non-reentrant model
  3198 ;;
  3199                           
  3200     071A                     _Lcd_Write_Char:	
  3201                           ;psect for function _Lcd_Write_Char
  3202                           
  3203                           
  3204                           ;incstack = 0
  3205                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3206                           ;Lcd_Write_Char@a stored from wreg
  3207     071A  1283               	bcf	3,5	;RP0=0, select bank0
  3208     071B  1303               	bcf	3,6	;RP1=0, select bank0
  3209     071C  00A4               	movwf	Lcd_Write_Char@a
  3210     071D                     l1868:
  3211                           
  3212                           ;main.c: 283:     char temp, y;;main.c: 284:     temp = a & 0x0F;
  3213     071D  0824               	movf	Lcd_Write_Char@a,w
  3214     071E  390F               	andlw	15
  3215     071F  00A2               	movwf	Lcd_Write_Char@temp
  3216                           
  3217                           ;main.c: 285:     y = a & 0xF0;
  3218     0720  0824               	movf	Lcd_Write_Char@a,w
  3219     0721  39F0               	andlw	240
  3220     0722  00A3               	movwf	Lcd_Write_Char@y
  3221     0723                     l1870:
  3222                           
  3223                           ;main.c: 287:     PORTEbits.RE2 = 1;
  3224     0723  1509               	bsf	9,2	;volatile
  3225     0724                     l1872:
  3226                           
  3227                           ;main.c: 289:     Lcd_Port(y >> 4);
  3228     0724  0823               	movf	Lcd_Write_Char@y,w
  3229     0725  00A1               	movwf	??_Lcd_Write_Char
  3230     0726  3004               	movlw	4
  3231     0727                     u1795:
  3232     0727  1003               	clrc
  3233     0728  0CA1               	rrf	??_Lcd_Write_Char,f
  3234     0729  3EFF               	addlw	-1
  3235     072A  1D03               	skipz
  3236     072B  2F27               	goto	u1795
  3237     072C  0821               	movf	??_Lcd_Write_Char,w
  3238     072D  120A  118A  27CF  120A  118A  	fcall	_Lcd_Port
  3239     0732                     l1874:
  3240                           
  3241                           ;main.c: 290:     PORTEbits.RE1 = 1;
  3242     0732  1283               	bcf	3,5	;RP0=0, select bank0
  3243     0733  1303               	bcf	3,6	;RP1=0, select bank0
  3244     0734  1489               	bsf	9,1	;volatile
  3245     0735                     l1876:
  3246                           
  3247                           ;main.c: 291:     _delay((unsigned long)((4)*(20000000/4000000.0)));
  3248     0735  3005               	movlw	5
  3249     0736  1283               	bcf	3,5	;RP0=0, select bank0
  3250     0737  1303               	bcf	3,6	;RP1=0, select bank0
  3251     0738  00A1               	movwf	??_Lcd_Write_Char
  3252     0739                     u2597:
  3253     0739  0BA1               	decfsz	??_Lcd_Write_Char,f
  3254     073A  2F39               	goto	u2597
  3255     073B  2F3C               	nop2
  3256     073C                     l1878:
  3257                           
  3258                           ;main.c: 292:     PORTEbits.RE1 = 0;
  3259     073C  1283               	bcf	3,5	;RP0=0, select bank0
  3260     073D  1303               	bcf	3,6	;RP1=0, select bank0
  3261     073E  1089               	bcf	9,1	;volatile
  3262     073F                     l1880:
  3263                           
  3264                           ;main.c: 293:     Lcd_Port(temp);
  3265     073F  0822               	movf	Lcd_Write_Char@temp,w
  3266     0740  120A  118A  27CF  120A  118A  	fcall	_Lcd_Port
  3267     0745                     l1882:
  3268                           
  3269                           ;main.c: 294:     PORTEbits.RE1 = 1;
  3270     0745  1283               	bcf	3,5	;RP0=0, select bank0
  3271     0746  1303               	bcf	3,6	;RP1=0, select bank0
  3272     0747  1489               	bsf	9,1	;volatile
  3273     0748                     l1884:
  3274                           
  3275                           ;main.c: 295:     _delay((unsigned long)((4)*(20000000/4000000.0)));
  3276     0748  3005               	movlw	5
  3277     0749  1283               	bcf	3,5	;RP0=0, select bank0
  3278     074A  1303               	bcf	3,6	;RP1=0, select bank0
  3279     074B  00A1               	movwf	??_Lcd_Write_Char
  3280     074C                     u2607:
  3281     074C  0BA1               	decfsz	??_Lcd_Write_Char,f
  3282     074D  2F4C               	goto	u2607
  3283     074E  2F4F               	nop2
  3284     074F                     l1886:
  3285                           
  3286                           ;main.c: 296:     PORTEbits.RE1 = 0;
  3287     074F  1283               	bcf	3,5	;RP0=0, select bank0
  3288     0750  1303               	bcf	3,6	;RP1=0, select bank0
  3289     0751  1089               	bcf	9,1	;volatile
  3290     0752                     l165:
  3291     0752  0008               	return
  3292     0753                     __end_of_Lcd_Write_Char:
  3293                           
  3294                           	psect	text13
  3295     05CA                     __ptext13:	
  3296 ;; *************** function _Lcd_Set_Cursor *****************
  3297 ;; Defined at:
  3298 ;;		line 265 in file "main.c"
  3299 ;; Parameters:    Size  Location     Type
  3300 ;;  riga            1    wreg     unsigned char 
  3301 ;;  colonna         1    4[BANK0 ] unsigned char 
  3302 ;; Auto vars:     Size  Location     Type
  3303 ;;  riga            1    6[BANK0 ] unsigned char 
  3304 ;;  temp            1    9[BANK0 ] unsigned char 
  3305 ;;  y               1    8[BANK0 ] unsigned char 
  3306 ;;  z               1    7[BANK0 ] unsigned char 
  3307 ;; Return value:  Size  Location     Type
  3308 ;;                  1    wreg      void 
  3309 ;; Registers used:
  3310 ;;		wreg, status,2, status,0, pclath, cstack
  3311 ;; Tracked objects:
  3312 ;;		On entry : 0/0
  3313 ;;		On exit  : 0/0
  3314 ;;		Unchanged: 0/0
  3315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3316 ;;      Params:         0       1       0       0       0
  3317 ;;      Locals:         0       4       0       0       0
  3318 ;;      Temps:          0       1       0       0       0
  3319 ;;      Totals:         0       6       0       0       0
  3320 ;;Total ram usage:        6 bytes
  3321 ;; Hardware stack levels used: 1
  3322 ;; Hardware stack levels required when called: 3
  3323 ;; This function calls:
  3324 ;;		_Lcd_Cmd
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330     05CA                     _Lcd_Set_Cursor:	
  3331                           ;psect for function _Lcd_Set_Cursor
  3332                           
  3333                           
  3334                           ;incstack = 0
  3335                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3336                           ;Lcd_Set_Cursor@riga stored from wreg
  3337     05CA  1283               	bcf	3,5	;RP0=0, select bank0
  3338     05CB  1303               	bcf	3,6	;RP1=0, select bank0
  3339     05CC  00A6               	movwf	Lcd_Set_Cursor@riga
  3340     05CD                     l2194:
  3341                           
  3342                           ;main.c: 266:     char temp, z, y;;main.c: 267:     if (riga == 0) {
  3343     05CD  0826               	movf	Lcd_Set_Cursor@riga,w
  3344     05CE  1D03               	btfss	3,2
  3345     05CF  2DD1               	goto	u2351
  3346     05D0  2DD2               	goto	u2350
  3347     05D1                     u2351:
  3348     05D1  2DF1               	goto	l2204
  3349     05D2                     u2350:
  3350     05D2                     l2196:
  3351                           
  3352                           ;main.c: 268:         temp = 0x80 + colonna;
  3353     05D2  0824               	movf	Lcd_Set_Cursor@colonna,w
  3354     05D3  3E80               	addlw	128
  3355     05D4  00A9               	movwf	Lcd_Set_Cursor@temp
  3356                           
  3357                           ;main.c: 269:         z = temp >> 4;
  3358     05D5  0829               	movf	Lcd_Set_Cursor@temp,w
  3359     05D6  00A5               	movwf	??_Lcd_Set_Cursor
  3360     05D7  3004               	movlw	4
  3361     05D8                     u2365:
  3362     05D8  1003               	clrc
  3363     05D9  0CA5               	rrf	??_Lcd_Set_Cursor,f
  3364     05DA  3EFF               	addlw	-1
  3365     05DB  1D03               	skipz
  3366     05DC  2DD8               	goto	u2365
  3367     05DD  0825               	movf	??_Lcd_Set_Cursor,w
  3368     05DE  00A7               	movwf	Lcd_Set_Cursor@z
  3369     05DF                     l2198:
  3370                           
  3371                           ;main.c: 270:         y = temp & 0x0F;
  3372     05DF  0829               	movf	Lcd_Set_Cursor@temp,w
  3373     05E0  390F               	andlw	15
  3374     05E1  00A8               	movwf	Lcd_Set_Cursor@y
  3375     05E2                     l2200:
  3376                           
  3377                           ;main.c: 271:         Lcd_Cmd(z);
  3378     05E2  0827               	movf	Lcd_Set_Cursor@z,w
  3379     05E3  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3380     05E8                     l2202:
  3381                           
  3382                           ;main.c: 272:         Lcd_Cmd(y);
  3383     05E8  1283               	bcf	3,5	;RP0=0, select bank0
  3384     05E9  1303               	bcf	3,6	;RP1=0, select bank0
  3385     05EA  0828               	movf	Lcd_Set_Cursor@y,w
  3386     05EB  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3387                           
  3388                           ;main.c: 273:     } else if (riga >= 1) {
  3389     05F0  2E14               	goto	l162
  3390     05F1                     l2204:
  3391     05F1  0826               	movf	Lcd_Set_Cursor@riga,w
  3392     05F2  1903               	btfsc	3,2
  3393     05F3  2DF5               	goto	u2371
  3394     05F4  2DF6               	goto	u2370
  3395     05F5                     u2371:
  3396     05F5  2E14               	goto	l162
  3397     05F6                     u2370:
  3398     05F6                     l2206:
  3399                           
  3400                           ;main.c: 274:         temp = 0xC0 + colonna;
  3401     05F6  0824               	movf	Lcd_Set_Cursor@colonna,w
  3402     05F7  3EC0               	addlw	192
  3403     05F8  00A9               	movwf	Lcd_Set_Cursor@temp
  3404                           
  3405                           ;main.c: 275:         z = temp >> 4;
  3406     05F9  0829               	movf	Lcd_Set_Cursor@temp,w
  3407     05FA  00A5               	movwf	??_Lcd_Set_Cursor
  3408     05FB  3004               	movlw	4
  3409     05FC                     u2385:
  3410     05FC  1003               	clrc
  3411     05FD  0CA5               	rrf	??_Lcd_Set_Cursor,f
  3412     05FE  3EFF               	addlw	-1
  3413     05FF  1D03               	skipz
  3414     0600  2DFC               	goto	u2385
  3415     0601  0825               	movf	??_Lcd_Set_Cursor,w
  3416     0602  00A7               	movwf	Lcd_Set_Cursor@z
  3417     0603                     l2208:
  3418                           
  3419                           ;main.c: 276:         y = temp & 0x0F;
  3420     0603  0829               	movf	Lcd_Set_Cursor@temp,w
  3421     0604  390F               	andlw	15
  3422     0605  00A8               	movwf	Lcd_Set_Cursor@y
  3423     0606                     l2210:
  3424                           
  3425                           ;main.c: 277:         Lcd_Cmd(z);
  3426     0606  0827               	movf	Lcd_Set_Cursor@z,w
  3427     0607  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3428     060C                     l2212:
  3429                           
  3430                           ;main.c: 278:         Lcd_Cmd(y);
  3431     060C  1283               	bcf	3,5	;RP0=0, select bank0
  3432     060D  1303               	bcf	3,6	;RP1=0, select bank0
  3433     060E  0828               	movf	Lcd_Set_Cursor@y,w
  3434     060F  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3435     0614                     l162:
  3436     0614  0008               	return
  3437     0615                     __end_of_Lcd_Set_Cursor:
  3438                           
  3439                           	psect	text14
  3440     04F3                     __ptext14:	
  3441 ;; *************** function _Lcd_Init *****************
  3442 ;; Defined at:
  3443 ;;		line 236 in file "main.c"
  3444 ;; Parameters:    Size  Location     Type
  3445 ;;		None
  3446 ;; Auto vars:     Size  Location     Type
  3447 ;;		None
  3448 ;; Return value:  Size  Location     Type
  3449 ;;                  1    wreg      void 
  3450 ;; Registers used:
  3451 ;;		wreg, status,2, status,0, pclath, cstack
  3452 ;; Tracked objects:
  3453 ;;		On entry : 0/0
  3454 ;;		On exit  : 0/0
  3455 ;;		Unchanged: 0/0
  3456 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3457 ;;      Params:         0       0       0       0       0
  3458 ;;      Locals:         0       0       0       0       0
  3459 ;;      Temps:          0       2       0       0       0
  3460 ;;      Totals:         0       2       0       0       0
  3461 ;;Total ram usage:        2 bytes
  3462 ;; Hardware stack levels used: 1
  3463 ;; Hardware stack levels required when called: 3
  3464 ;; This function calls:
  3465 ;;		_Lcd_Cmd
  3466 ;;		_Lcd_Port
  3467 ;; This function is called by:
  3468 ;;		_main
  3469 ;; This function uses a non-reentrant model
  3470 ;;
  3471                           
  3472     04F3                     _Lcd_Init:	
  3473                           ;psect for function _Lcd_Init
  3474                           
  3475     04F3                     l2058:	
  3476                           ;incstack = 0
  3477                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3478                           
  3479                           
  3480                           ;main.c: 237:     TRISD &= ~0xff;
  3481     04F3  1683               	bsf	3,5	;RP0=1, select bank1
  3482     04F4  1303               	bcf	3,6	;RP1=0, select bank1
  3483     04F5  0188               	clrf	8	;volatile
  3484     04F6                     l2060:
  3485                           
  3486                           ;main.c: 238:     TRISE &= ~0x06;
  3487     04F6  30F9               	movlw	249
  3488     04F7  1283               	bcf	3,5	;RP0=0, select bank0
  3489     04F8  1303               	bcf	3,6	;RP1=0, select bank0
  3490     04F9  00A4               	movwf	??_Lcd_Init
  3491     04FA  0824               	movf	??_Lcd_Init,w
  3492     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  3493     04FC  1303               	bcf	3,6	;RP1=0, select bank1
  3494     04FD  0589               	andwf	9,f	;volatile
  3495     04FE                     l2062:
  3496                           
  3497                           ;main.c: 239:     Lcd_Port(0x00);
  3498     04FE  3000               	movlw	0
  3499     04FF  120A  118A  27CF  120A  118A  	fcall	_Lcd_Port
  3500     0504                     l2064:
  3501                           
  3502                           ;main.c: 240:     _delay((unsigned long)((20)*(20000000/4000.0)));
  3503     0504  3082               	movlw	130
  3504     0505  1283               	bcf	3,5	;RP0=0, select bank0
  3505     0506  1303               	bcf	3,6	;RP1=0, select bank0
  3506     0507  00A5               	movwf	??_Lcd_Init+1
  3507     0508  30DD               	movlw	221
  3508     0509  00A4               	movwf	??_Lcd_Init
  3509     050A                     u2617:
  3510     050A  0BA4               	decfsz	??_Lcd_Init,f
  3511     050B  2D0A               	goto	u2617
  3512     050C  0BA5               	decfsz	??_Lcd_Init+1,f
  3513     050D  2D0A               	goto	u2617
  3514     050E                     l2066:
  3515                           
  3516                           ;main.c: 241:     Lcd_Cmd(0x03);
  3517     050E  3003               	movlw	3
  3518     050F  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3519     0514                     l2068:
  3520                           
  3521                           ;main.c: 242:     _delay((unsigned long)((5)*(20000000/4000.0)));
  3522     0514  3021               	movlw	33
  3523     0515  1283               	bcf	3,5	;RP0=0, select bank0
  3524     0516  1303               	bcf	3,6	;RP1=0, select bank0
  3525     0517  00A5               	movwf	??_Lcd_Init+1
  3526     0518  3075               	movlw	117
  3527     0519  00A4               	movwf	??_Lcd_Init
  3528     051A                     u2627:
  3529     051A  0BA4               	decfsz	??_Lcd_Init,f
  3530     051B  2D1A               	goto	u2627
  3531     051C  0BA5               	decfsz	??_Lcd_Init+1,f
  3532     051D  2D1A               	goto	u2627
  3533     051E  2D1F               	nop2
  3534     051F                     l2070:
  3535                           
  3536                           ;main.c: 243:     Lcd_Cmd(0x03);
  3537     051F  3003               	movlw	3
  3538     0520  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3539     0525                     l2072:
  3540                           
  3541                           ;main.c: 244:     _delay((unsigned long)((10)*(20000000/4000.0)));
  3542     0525  3041               	movlw	65
  3543     0526  1283               	bcf	3,5	;RP0=0, select bank0
  3544     0527  1303               	bcf	3,6	;RP1=0, select bank0
  3545     0528  00A5               	movwf	??_Lcd_Init+1
  3546     0529  30ED               	movlw	237
  3547     052A  00A4               	movwf	??_Lcd_Init
  3548     052B                     u2637:
  3549     052B  0BA4               	decfsz	??_Lcd_Init,f
  3550     052C  2D2B               	goto	u2637
  3551     052D  0BA5               	decfsz	??_Lcd_Init+1,f
  3552     052E  2D2B               	goto	u2637
  3553     052F  2D30               	nop2
  3554     0530                     l2074:
  3555                           
  3556                           ;main.c: 245:     Lcd_Cmd(0x03);
  3557     0530  3003               	movlw	3
  3558     0531  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3559     0536                     l2076:
  3560                           
  3561                           ;main.c: 247:     Lcd_Cmd(0x02);
  3562     0536  3002               	movlw	2
  3563     0537  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3564     053C                     l2078:
  3565                           
  3566                           ;main.c: 249:     Lcd_Cmd(0x02);
  3567     053C  3002               	movlw	2
  3568     053D  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3569     0542                     l2080:
  3570                           
  3571                           ;main.c: 250:     Lcd_Cmd(0x08);
  3572     0542  3008               	movlw	8
  3573     0543  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3574     0548                     l2082:
  3575                           
  3576                           ;main.c: 252:     Lcd_Cmd(0x00);
  3577     0548  3000               	movlw	0
  3578     0549  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3579     054E                     l2084:
  3580                           
  3581                           ;main.c: 253:     Lcd_Cmd(0x0C);
  3582     054E  300C               	movlw	12
  3583     054F  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3584     0554                     l2086:
  3585                           
  3586                           ;main.c: 255:     Lcd_Cmd(0x00);
  3587     0554  3000               	movlw	0
  3588     0555  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3589     055A                     l2088:
  3590                           
  3591                           ;main.c: 256:     Lcd_Cmd(0x06);
  3592     055A  3006               	movlw	6
  3593     055B  120A  118A  2784  120A  118A  	fcall	_Lcd_Cmd
  3594     0560                     l153:
  3595     0560  0008               	return
  3596     0561                     __end_of_Lcd_Init:
  3597                           
  3598                           	psect	text15
  3599     0784                     __ptext15:	
  3600 ;; *************** function _Lcd_Cmd *****************
  3601 ;; Defined at:
  3602 ;;		line 224 in file "main.c"
  3603 ;; Parameters:    Size  Location     Type
  3604 ;;  a               1    wreg     unsigned char 
  3605 ;; Auto vars:     Size  Location     Type
  3606 ;;  a               1    3[BANK0 ] unsigned char 
  3607 ;; Return value:  Size  Location     Type
  3608 ;;                  1    wreg      void 
  3609 ;; Registers used:
  3610 ;;		wreg, status,2, status,0, pclath, cstack
  3611 ;; Tracked objects:
  3612 ;;		On entry : 0/0
  3613 ;;		On exit  : 0/0
  3614 ;;		Unchanged: 0/0
  3615 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3616 ;;      Params:         0       0       0       0       0
  3617 ;;      Locals:         0       1       0       0       0
  3618 ;;      Temps:          0       2       0       0       0
  3619 ;;      Totals:         0       3       0       0       0
  3620 ;;Total ram usage:        3 bytes
  3621 ;; Hardware stack levels used: 1
  3622 ;; Hardware stack levels required when called: 2
  3623 ;; This function calls:
  3624 ;;		_Lcd_Port
  3625 ;; This function is called by:
  3626 ;;		_Lcd_Init
  3627 ;;		_Lcd_Set_Cursor
  3628 ;;		_Lcd_Clear
  3629 ;;		_Lcd_Shift_Right
  3630 ;;		_Lcd_Shift_Left
  3631 ;; This function uses a non-reentrant model
  3632 ;;
  3633                           
  3634     0784                     _Lcd_Cmd:	
  3635                           ;psect for function _Lcd_Cmd
  3636                           
  3637                           
  3638                           ;incstack = 0
  3639                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3640                           ;Lcd_Cmd@a stored from wreg
  3641     0784  1283               	bcf	3,5	;RP0=0, select bank0
  3642     0785  1303               	bcf	3,6	;RP1=0, select bank0
  3643     0786  00A3               	movwf	Lcd_Cmd@a
  3644     0787                     l1904:
  3645                           
  3646                           ;main.c: 225:     TRISD &= ~0xff;
  3647     0787  1683               	bsf	3,5	;RP0=1, select bank1
  3648     0788  1303               	bcf	3,6	;RP1=0, select bank1
  3649     0789  0188               	clrf	8	;volatile
  3650     078A                     l1906:
  3651                           
  3652                           ;main.c: 226:     TRISE &= ~0x06;
  3653     078A  30F9               	movlw	249
  3654     078B  1283               	bcf	3,5	;RP0=0, select bank0
  3655     078C  1303               	bcf	3,6	;RP1=0, select bank0
  3656     078D  00A1               	movwf	??_Lcd_Cmd
  3657     078E  0821               	movf	??_Lcd_Cmd,w
  3658     078F  1683               	bsf	3,5	;RP0=1, select bank1
  3659     0790  1303               	bcf	3,6	;RP1=0, select bank1
  3660     0791  0589               	andwf	9,f	;volatile
  3661     0792                     l1908:
  3662                           
  3663                           ;main.c: 229:     PORTEbits.RE2 = 0;
  3664     0792  1283               	bcf	3,5	;RP0=0, select bank0
  3665     0793  1303               	bcf	3,6	;RP1=0, select bank0
  3666     0794  1109               	bcf	9,2	;volatile
  3667     0795                     l1910:
  3668                           
  3669                           ;main.c: 230:     Lcd_Port(a);
  3670     0795  0823               	movf	Lcd_Cmd@a,w
  3671     0796  120A  118A  27CF  120A  118A  	fcall	_Lcd_Port
  3672     079B                     l1912:
  3673                           
  3674                           ;main.c: 231:     PORTEbits.RE1 = 1;
  3675     079B  1283               	bcf	3,5	;RP0=0, select bank0
  3676     079C  1303               	bcf	3,6	;RP1=0, select bank0
  3677     079D  1489               	bsf	9,1	;volatile
  3678     079E                     l1914:
  3679                           
  3680                           ;main.c: 232:     _delay((unsigned long)((4)*(20000000/4000.0)));
  3681     079E  301A               	movlw	26
  3682     079F  1283               	bcf	3,5	;RP0=0, select bank0
  3683     07A0  1303               	bcf	3,6	;RP1=0, select bank0
  3684     07A1  00A2               	movwf	??_Lcd_Cmd+1
  3685     07A2  30F7               	movlw	247
  3686     07A3  00A1               	movwf	??_Lcd_Cmd
  3687     07A4                     u2647:
  3688     07A4  0BA1               	decfsz	??_Lcd_Cmd,f
  3689     07A5  2FA4               	goto	u2647
  3690     07A6  0BA2               	decfsz	??_Lcd_Cmd+1,f
  3691     07A7  2FA4               	goto	u2647
  3692     07A8  2FA9               	nop2
  3693     07A9                     l1916:
  3694                           
  3695                           ;main.c: 233:     PORTEbits.RE1 = 0;
  3696     07A9  1283               	bcf	3,5	;RP0=0, select bank0
  3697     07AA  1303               	bcf	3,6	;RP1=0, select bank0
  3698     07AB  1089               	bcf	9,1	;volatile
  3699     07AC                     l150:
  3700     07AC  0008               	return
  3701     07AD                     __end_of_Lcd_Cmd:
  3702                           
  3703                           	psect	text16
  3704     07CF                     __ptext16:	
  3705 ;; *************** function _Lcd_Port *****************
  3706 ;; Defined at:
  3707 ;;		line 209 in file "main.c"
  3708 ;; Parameters:    Size  Location     Type
  3709 ;;  a               1    wreg     unsigned char 
  3710 ;; Auto vars:     Size  Location     Type
  3711 ;;  a               1    0[BANK0 ] unsigned char 
  3712 ;; Return value:  Size  Location     Type
  3713 ;;                  1    wreg      void 
  3714 ;; Registers used:
  3715 ;;		wreg
  3716 ;; Tracked objects:
  3717 ;;		On entry : 0/0
  3718 ;;		On exit  : 0/0
  3719 ;;		Unchanged: 0/0
  3720 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3721 ;;      Params:         0       0       0       0       0
  3722 ;;      Locals:         0       1       0       0       0
  3723 ;;      Temps:          0       0       0       0       0
  3724 ;;      Totals:         0       1       0       0       0
  3725 ;;Total ram usage:        1 bytes
  3726 ;; Hardware stack levels used: 1
  3727 ;; Hardware stack levels required when called: 1
  3728 ;; This function calls:
  3729 ;;		Nothing
  3730 ;; This function is called by:
  3731 ;;		_Lcd_Cmd
  3732 ;;		_Lcd_Init
  3733 ;;		_Lcd_Write_Char
  3734 ;; This function uses a non-reentrant model
  3735 ;;
  3736                           
  3737     07CF                     _Lcd_Port:	
  3738                           ;psect for function _Lcd_Port
  3739                           
  3740                           
  3741                           ;incstack = 0
  3742                           ; Regs used in _Lcd_Port: [wreg]
  3743                           ;Lcd_Port@a stored from wreg
  3744     07CF  1283               	bcf	3,5	;RP0=0, select bank0
  3745     07D0  1303               	bcf	3,6	;RP1=0, select bank0
  3746     07D1  00A0               	movwf	Lcd_Port@a
  3747     07D2                     l1858:
  3748                           
  3749                           ;main.c: 211:     if (a & 1) PORTDbits.RD4 = 1;
  3750     07D2  1C20               	btfss	Lcd_Port@a,0
  3751     07D3  2FD5               	goto	u1751
  3752     07D4  2FD6               	goto	u1750
  3753     07D5                     u1751:
  3754     07D5  2FD8               	goto	l139
  3755     07D6                     u1750:
  3756     07D6                     l1860:
  3757     07D6  1608               	bsf	8,4	;volatile
  3758     07D7  2FD9               	goto	l140
  3759     07D8                     l139:	
  3760                           ;main.c: 212:     else PORTDbits.RD4 = 0;
  3761                           
  3762     07D8  1208               	bcf	8,4	;volatile
  3763     07D9                     l140:
  3764                           
  3765                           ;main.c: 214:     if (a & 2) PORTDbits.RD5 = 1;
  3766     07D9  1CA0               	btfss	Lcd_Port@a,1
  3767     07DA  2FDC               	goto	u1761
  3768     07DB  2FDD               	goto	u1760
  3769     07DC                     u1761:
  3770     07DC  2FDF               	goto	l141
  3771     07DD                     u1760:
  3772     07DD                     l1862:
  3773     07DD  1688               	bsf	8,5	;volatile
  3774     07DE  2FE0               	goto	l142
  3775     07DF                     l141:	
  3776                           ;main.c: 215:     else PORTDbits.RD5 = 0;
  3777                           
  3778     07DF  1288               	bcf	8,5	;volatile
  3779     07E0                     l142:
  3780                           
  3781                           ;main.c: 217:     if (a & 4) PORTDbits.RD6 = 1;
  3782     07E0  1D20               	btfss	Lcd_Port@a,2
  3783     07E1  2FE3               	goto	u1771
  3784     07E2  2FE4               	goto	u1770
  3785     07E3                     u1771:
  3786     07E3  2FE6               	goto	l143
  3787     07E4                     u1770:
  3788     07E4                     l1864:
  3789     07E4  1708               	bsf	8,6	;volatile
  3790     07E5  2FE7               	goto	l144
  3791     07E6                     l143:	
  3792                           ;main.c: 218:     else PORTDbits.RD6 = 0;
  3793                           
  3794     07E6  1308               	bcf	8,6	;volatile
  3795     07E7                     l144:
  3796                           
  3797                           ;main.c: 220:     if (a & 8) PORTDbits.RD7 = 1;
  3798     07E7  1DA0               	btfss	Lcd_Port@a,3
  3799     07E8  2FEA               	goto	u1781
  3800     07E9  2FEB               	goto	u1780
  3801     07EA                     u1781:
  3802     07EA  2FED               	goto	l145
  3803     07EB                     u1780:
  3804     07EB                     l1866:
  3805     07EB  1788               	bsf	8,7	;volatile
  3806     07EC  2FEE               	goto	l147
  3807     07ED                     l145:	
  3808                           ;main.c: 221:     else PORTDbits.RD7 = 0;
  3809                           
  3810     07ED  1388               	bcf	8,7	;volatile
  3811     07EE                     l147:
  3812     07EE  0008               	return
  3813     07EF                     __end_of_Lcd_Port:
  3814                           
  3815                           	psect	text17
  3816     047B                     __ptext17:	
  3817 ;; *************** function _ISR *****************
  3818 ;; Defined at:
  3819 ;;		line 144 in file "main.c"
  3820 ;; Parameters:    Size  Location     Type
  3821 ;;		None
  3822 ;; Auto vars:     Size  Location     Type
  3823 ;;		None
  3824 ;; Return value:  Size  Location     Type
  3825 ;;                  1    wreg      void 
  3826 ;; Registers used:
  3827 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  3828 ;; Tracked objects:
  3829 ;;		On entry : 0/0
  3830 ;;		On exit  : 0/0
  3831 ;;		Unchanged: 0/0
  3832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3833 ;;      Params:         0       0       0       0       0
  3834 ;;      Locals:         0       0       0       0       0
  3835 ;;      Temps:          5       0       0       0       0
  3836 ;;      Totals:         5       0       0       0       0
  3837 ;;Total ram usage:        5 bytes
  3838 ;; Hardware stack levels used: 1
  3839 ;; This function calls:
  3840 ;;		Nothing
  3841 ;; This function is called by:
  3842 ;;		Interrupt level 1
  3843 ;; This function uses a non-reentrant model
  3844 ;;
  3845                           
  3846     047B                     _ISR:	
  3847                           ;psect for function _ISR
  3848                           
  3849     047B                     i1l1810:
  3850                           
  3851                           ;main.c: 145:     if (T0IF) {
  3852     047B  1D0B               	btfss	11,2	;volatile
  3853     047C  2C7E               	goto	u170_21
  3854     047D  2C7F               	goto	u170_20
  3855     047E                     u170_21:
  3856     047E  2CD3               	goto	i1l1840
  3857     047F                     u170_20:
  3858     047F                     i1l1812:
  3859                           
  3860                           ;main.c: 146:         static unsigned int interruptCounter, update_lcd_counter, update_U
      +                          ART_counter;;main.c: 147:         if (++interruptCounter > 625) {
  3861     047F  3001               	movlw	1
  3862     0480  1683               	bsf	3,5	;RP0=1, select bank1
  3863     0481  1303               	bcf	3,6	;RP1=0, select bank1
  3864     0482  07C4               	addwf	ISR@interruptCounter^(0+128),f
  3865     0483  1803               	skipnc
  3866     0484  0AC5               	incf	(ISR@interruptCounter+1)^(0+128),f
  3867     0485  3000               	movlw	0
  3868     0486  07C5               	addwf	(ISR@interruptCounter+1)^(0+128),f
  3869     0487  3002               	movlw	2
  3870     0488  0245               	subwf	(ISR@interruptCounter+1)^(0+128),w
  3871     0489  3072               	movlw	114
  3872     048A  1903               	skipnz
  3873     048B  0244               	subwf	ISR@interruptCounter^(0+128),w
  3874     048C  1C03               	skipc
  3875     048D  2C8F               	goto	u171_21
  3876     048E  2C90               	goto	u171_20
  3877     048F                     u171_21:
  3878     048F  2CCE               	goto	i1l1836
  3879     0490                     u171_20:
  3880     0490                     i1l1814:
  3881                           
  3882                           ;main.c: 149:             interruptCounter = 0;
  3883     0490  01C4               	clrf	ISR@interruptCounter^(0+128)
  3884     0491  01C5               	clrf	(ISR@interruptCounter+1)^(0+128)
  3885     0492                     i1l1816:
  3886                           
  3887                           ;main.c: 150:             MotorSpeed = ((TMR1H << 8) | TMR1L) << 2;
  3888     0492  1283               	bcf	3,5	;RP0=0, select bank0
  3889     0493  1303               	bcf	3,6	;RP1=0, select bank0
  3890     0494  080F               	movf	15,w	;volatile
  3891     0495  00F6               	movwf	??_ISR+1
  3892     0496  080E               	movf	14,w	;volatile
  3893     0497  00F5               	movwf	??_ISR
  3894     0498  1003               	clrc
  3895     0499  0DF5               	rlf	??_ISR,f
  3896     049A  0DF6               	rlf	??_ISR+1,f
  3897     049B  1003               	clrc
  3898     049C  0DF5               	rlf	??_ISR,f
  3899     049D  0DF6               	rlf	??_ISR+1,f
  3900     049E  0875               	movf	??_ISR,w
  3901     049F  00EC               	movwf	_MotorSpeed
  3902     04A0  0876               	movf	??_ISR+1,w
  3903     04A1  00ED               	movwf	_MotorSpeed+1
  3904     04A2                     i1l1818:
  3905                           
  3906                           ;main.c: 151:             TMR1H = 0;
  3907     04A2  018F               	clrf	15	;volatile
  3908     04A3                     i1l1820:
  3909                           
  3910                           ;main.c: 152:             TMR1L = 0;
  3911     04A3  018E               	clrf	14	;volatile
  3912     04A4                     i1l1822:
  3913                           
  3914                           ;main.c: 153:             update_speed = 1;
  3915     04A4  01F2               	clrf	_update_speed
  3916     04A5  0AF2               	incf	_update_speed,f
  3917     04A6                     i1l1824:
  3918                           
  3919                           ;main.c: 155:             if (++update_lcd_counter > 16) {
  3920     04A6  3001               	movlw	1
  3921     04A7  1683               	bsf	3,5	;RP0=1, select bank1
  3922     04A8  1303               	bcf	3,6	;RP1=0, select bank1
  3923     04A9  07C2               	addwf	ISR@update_lcd_counter^(0+128),f
  3924     04AA  1803               	skipnc
  3925     04AB  0AC3               	incf	(ISR@update_lcd_counter+1)^(0+128),f
  3926     04AC  3000               	movlw	0
  3927     04AD  07C3               	addwf	(ISR@update_lcd_counter+1)^(0+128),f
  3928     04AE  3000               	movlw	0
  3929     04AF  0243               	subwf	(ISR@update_lcd_counter+1)^(0+128),w
  3930     04B0  3011               	movlw	17
  3931     04B1  1903               	skipnz
  3932     04B2  0242               	subwf	ISR@update_lcd_counter^(0+128),w
  3933     04B3  1C03               	skipc
  3934     04B4  2CB6               	goto	u172_21
  3935     04B5  2CB7               	goto	u172_20
  3936     04B6                     u172_21:
  3937     04B6  2CBB               	goto	i1l1830
  3938     04B7                     u172_20:
  3939     04B7                     i1l1826:
  3940                           
  3941                           ;main.c: 156:                 update_lcd_counter = 0;
  3942     04B7  01C2               	clrf	ISR@update_lcd_counter^(0+128)
  3943     04B8  01C3               	clrf	(ISR@update_lcd_counter+1)^(0+128)
  3944     04B9                     i1l1828:
  3945                           
  3946                           ;main.c: 157:                 update_lcd = 1;
  3947     04B9  01F4               	clrf	_update_lcd
  3948     04BA  0AF4               	incf	_update_lcd,f
  3949     04BB                     i1l1830:
  3950                           
  3951                           ;main.c: 159:             if (++update_UART_counter > 160) {
  3952     04BB  3001               	movlw	1
  3953     04BC  07C0               	addwf	ISR@update_UART_counter^(0+128),f
  3954     04BD  1803               	skipnc
  3955     04BE  0AC1               	incf	(ISR@update_UART_counter+1)^(0+128),f
  3956     04BF  3000               	movlw	0
  3957     04C0  07C1               	addwf	(ISR@update_UART_counter+1)^(0+128),f
  3958     04C1  3000               	movlw	0
  3959     04C2  0241               	subwf	(ISR@update_UART_counter+1)^(0+128),w
  3960     04C3  30A1               	movlw	161
  3961     04C4  1903               	skipnz
  3962     04C5  0240               	subwf	ISR@update_UART_counter^(0+128),w
  3963     04C6  1C03               	skipc
  3964     04C7  2CC9               	goto	u173_21
  3965     04C8  2CCA               	goto	u173_20
  3966     04C9                     u173_21:
  3967     04C9  2CCE               	goto	i1l1836
  3968     04CA                     u173_20:
  3969     04CA                     i1l1832:
  3970                           
  3971                           ;main.c: 160:                 update_UART_counter = 0;
  3972     04CA  01C0               	clrf	ISR@update_UART_counter^(0+128)
  3973     04CB  01C1               	clrf	(ISR@update_UART_counter+1)^(0+128)
  3974     04CC                     i1l1834:
  3975                           
  3976                           ;main.c: 161:                 update_UART = 1;
  3977     04CC  01F3               	clrf	_update_UART
  3978     04CD  0AF3               	incf	_update_UART,f
  3979     04CE                     i1l1836:
  3980                           
  3981                           ;main.c: 164:         TMR0 = 131;
  3982     04CE  3083               	movlw	131
  3983     04CF  1283               	bcf	3,5	;RP0=0, select bank0
  3984     04D0  1303               	bcf	3,6	;RP1=0, select bank0
  3985     04D1  0081               	movwf	1	;volatile
  3986     04D2                     i1l1838:
  3987                           
  3988                           ;main.c: 165:         T0IF = 0;
  3989     04D2  110B               	bcf	11,2	;volatile
  3990     04D3                     i1l1840:
  3991                           
  3992                           ;main.c: 168:     if (RCIF) {
  3993     04D3  1283               	bcf	3,5	;RP0=0, select bank0
  3994     04D4  1303               	bcf	3,6	;RP1=0, select bank0
  3995     04D5  1E8C               	btfss	12,5	;volatile
  3996     04D6  2CD8               	goto	u174_21
  3997     04D7  2CD9               	goto	u174_20
  3998     04D8                     u174_21:
  3999     04D8  2CEA               	goto	i1l123
  4000     04D9                     u174_20:
  4001     04D9                     i1l1842:
  4002                           
  4003                           ;main.c: 169:         Uart_Data[data_i++] = RCREG;
  4004     04D9  086E               	movf	_data_i,w
  4005     04DA  3EA0               	addlw	(low (_Uart_Data| 0))& (0+255)
  4006     04DB  0084               	movwf	4
  4007     04DC  081A               	movf	26,w	;volatile
  4008     04DD  1383               	bcf	3,7	;select IRP bank1
  4009     04DE  0080               	movwf	0
  4010     04DF                     i1l1844:
  4011     04DF  3001               	movlw	1
  4012     04E0  00F5               	movwf	??_ISR
  4013     04E1  0875               	movf	??_ISR,w
  4014     04E2  07EE               	addwf	_data_i,f
  4015     04E3                     i1l1846:
  4016                           
  4017                           ;main.c: 170:         Uart_Data[data_i] = '\0';
  4018     04E3  086E               	movf	_data_i,w
  4019     04E4  3EA0               	addlw	(low (_Uart_Data| 0))& (0+255)
  4020     04E5  0084               	movwf	4
  4021     04E6  0180               	clrf	0
  4022     04E7                     i1l1848:
  4023                           
  4024                           ;main.c: 171:         data_received = 1;
  4025     04E7  01F1               	clrf	_data_received
  4026     04E8  0AF1               	incf	_data_received,f
  4027     04E9                     i1l1850:
  4028                           
  4029                           ;main.c: 172:         RCIF = 0;
  4030     04E9  128C               	bcf	12,5	;volatile
  4031     04EA                     i1l123:
  4032     04EA  0879               	movf	??_ISR+4,w
  4033     04EB  008A               	movwf	10
  4034     04EC  0878               	movf	??_ISR+3,w
  4035     04ED  0084               	movwf	4
  4036     04EE  0E77               	swapf	??_ISR+2,w
  4037     04EF  0083               	movwf	3
  4038     04F0  0EFE               	swapf	btemp,f
  4039     04F1  0E7E               	swapf	btemp,w
  4040     04F2  0009               	retfie
  4041     04F3                     __end_of_ISR:
  4042     007E                     btemp	set	126	;btemp
  4043     007E                     wtemp0	set	126
  4044                           
  4045                           	psect	intentry
  4046     0004                     __pintentry:	
  4047                           ;incstack = 0
  4048                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0]
  4049                           
  4050     0004                     interrupt_function:
  4051     007E                     saved_w	set	btemp
  4052     0004  00FE               	movwf	btemp
  4053     0005  0E03               	swapf	3,w
  4054     0006  00F7               	movwf	??_ISR+2
  4055     0007  0804               	movf	4,w
  4056     0008  00F8               	movwf	??_ISR+3
  4057     0009  080A               	movf	10,w
  4058     000A  00F9               	movwf	??_ISR+4
  4059     000B  120A  118A  2C7B   	ljmp	_ISR
  4060                           
  4061                           	psect	idloc
  4062                           
  4063                           ;Config register IDLOC0 @ 0x2000
  4064                           ;	unspecified, using default values
  4065     2000                     	org	8192
  4066     2000  3FFF               	dw	16383
  4067                           
  4068                           ;Config register IDLOC1 @ 0x2001
  4069                           ;	unspecified, using default values
  4070     2001                     	org	8193
  4071     2001  3FFF               	dw	16383
  4072                           
  4073                           ;Config register IDLOC2 @ 0x2002
  4074                           ;	unspecified, using default values
  4075     2002                     	org	8194
  4076     2002  3FFF               	dw	16383
  4077                           
  4078                           ;Config register IDLOC3 @ 0x2003
  4079                           ;	unspecified, using default values
  4080     2003                     	org	8195
  4081     2003  3FFF               	dw	16383
  4082                           
  4083                           	psect	config
  4084                           
  4085                           ;Config register CONFIG @ 0x2007
  4086                           ;	Oscillator Selection bits
  4087                           ;	FOSC = HS, HS oscillator
  4088                           ;	Watchdog Timer Enable bit
  4089                           ;	WDTE = OFF, WDT disabled
  4090                           ;	Power-up Timer Enable bit
  4091                           ;	PWRTE = ON, PWRT enabled
  4092                           ;	Brown-out Reset Enable bit
  4093                           ;	BOREN = ON, BOR enabled
  4094                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  4095                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
  4096                           ;	Data EEPROM Memory Code Protection bit
  4097                           ;	CPD = OFF, Data EEPROM code protection off
  4098                           ;	Flash Program Memory Write Enable bits
  4099                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  4100                           ;	In-Circuit Debugger Mode bit
  4101                           ;	DEBUG = 0x1, unprogrammed default
  4102                           ;	Flash Program Memory Code Protection bit
  4103                           ;	CP = OFF, Code protection off
  4104     2007                     	org	8199
  4105     2007  3FF2               	dw	16370

Data Sizes:
    Strings     17
    Constant    16
    Data        0
    BSS         47
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5      10
    BANK0            80     76      80
    BANK1            80      4      42
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    UART_TxString@str	PTR const unsigned char  size(1) Largest target is 50
		 -> UART_TxInt@buffer(BANK0[50]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 50
		 -> Lcd_Write_Int@buffer(BANK0[50]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_Lcd_Write_Int
    _UART_init->___aldiv
    _UART_TxInt->___awdiv
    _UART_TxString->_UART_TxChar
    _Lcd_Write_Int->_Lcd_Write_String
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 4     4      0   10605
                                              0 BANK1      4     4      0
                           _Lcd_Init
                     _Lcd_Set_Cursor
                      _Lcd_Write_Int
                   _Lcd_Write_String
                        _Numpad_Read
                         _UART_TxInt
                          _UART_init
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            8     4      4     746
                                             15 BANK0      8     4      4
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              0 BANK0     15     7      8
 ---------------------------------------------------------------------------------
 (1) _UART_TxInt                                          64    62      2    3460
                                              9 BANK0     64    62      2
                      _UART_TxString
                            ___awdiv
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) _UART_TxString                                        3     3      0     197
                                              2 BANK0      3     3      0
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (3) _UART_TxChar                                          2     2      0      31
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (2) _Numpad_Read                                          6     6      0     393
                                              0 BANK0      6     6      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_Int                                       64    62      2    4097
                                             12 BANK0     64    62      2
                   _Lcd_Write_String
                            ___awdiv
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     592
                                              0 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     601
                                              0 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 (2) ___awdiv                                              9     5      4     805
                                              0 BANK0      9     5      4
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     564
                                              5 BANK0      7     5      2
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       4     4      0     254
                                              1 BANK0      4     4      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       6     5      1     905
                                              4 BANK0      6     5      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     279
                                              4 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0     155
                                              1 BANK0      3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     124
                                              0 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _ISR                                                  5     5      0       0
                                              0 COMMON     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_Int
     _Lcd_Write_String
       _Lcd_Write_Char
         _Lcd_Port
     ___awdiv
     ___lwdiv
     ___lwmod
   _Lcd_Write_String
   _Numpad_Read
   _UART_TxInt
     _UART_TxString
       _UART_TxChar
     ___awdiv
     ___lwdiv
     ___lwmod
   _UART_init
     ___aldiv

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      5       A       1       71.4%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0      84       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     4C      50       5      100.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      4      2A       7       52.5%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0      84      12        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Fri Jan 27 12:50:05 2023

                       pc 0002              _update_speed 0072              ___awdiv@sign 0026  
                      fsr 0004  Numpad_Read@currentKeyVal 0023                       l201 0FFF  
                     l140 07D9                       l132 0463                       l141 07DF  
                     l142 07E0                       l150 07AC                       l222 0348  
                     l143 07E6                       l207 07CE                       l144 07E7  
                     l136 047A                       l145 07ED                       l153 0560  
                     l162 0614                       l147 07EE                       l139 07D8  
                     l171 06A0                       l165 0752                       l192 026A  
                     l195 06DD                       l461 05C9                       l373 035D  
                     l198 0FF4                       l383 03E5                       l580 065A  
                     l590 0719                       _PR2 0092                       _ISR 047B  
                     fsr0 0004                       indf 0000                      ?_ISR 0075  
   ISR@update_lcd_counter 00C2                      l2000 05B5                      l2002 05BB  
                    l2010 0615                      l2004 05C0                      l2020 062D  
                    l2012 0619                      l2100 06DC                      l2006 05C5  
                    l2030 0650                      l2022 0631                      l2014 061F  
                    l2110 019E                      l2102 018A                      l2200 05E2  
                    l2024 0642                      l2016 0622                      l2032 0656  
                    l2040 06E9                      l2120 01DE                      l2112 01A3  
                    l2104 0190                      l2210 0606                      l2202 05E8  
                    l2026 0648                      l2018 0629                      l2050 0708  
                    l2042 06F0                      l2130 01FA                      l2122 01E4  
                    l2114 01AF                      l2106 0192                      l2060 04F6  
                    l2212 060C                      l2204 05F1                      l2028 0649  
                    l2052 070F                      l2044 06F4                      l2036 06DE  
                    l2140 025E                      l2132 01FD                      l2124 01E9  
                    l2116 01C5                      l2108 0199                      l2220 027A  
                    l2300 010B                      l2070 051F                      l2062 04FE  
                    l2206 05F6                      l2046 06F8                      l2038 06E6  
                    l2054 0715                      l2142 0260                      l2134 0233  
                    l2126 01EF                      l2118 01CB                      l2230 02AC  
                    l2222 027F                      l2214 026B                      l2302 010E  
                    l2310 0133                      l2080 0542                      l2072 0525  
                    l2064 0504                      l2208 0603                      l2048 0702  
                    l2144 0261                      l2136 0239                      l2128 01F5  
                    l2240 02D6                      l2232 02BF                      l2224 0284  
                    l2216 0271                      l2320 0153                      l2312 0138  
                    l2304 0124                      l2082 0548                      l2074 0530  
                    l2066 050E                      l2058 04F3                      l2138 0256  
                    l2170 0442                      l2154 03F9                      l2146 03E6  
                    l2250 0337                      l2242 02DB                      l2234 02C5  
                    l2226 0290                      l2218 0273                      l2090 06A1  
                    l2330 0183                      l2322 0158                      l2314 0143  
                    l2306 012A                      l2084 054E                      l2076 0536  
                    l2068 0514                      l2172 0444                      l2164 0418  
                    l2156 040B                      l2148 03F6                      l2252 033F  
                    l2244 02DE                      l2236 02CA                      l2228 02A6  
                    l2092 06A9                      l2324 0165                      l2316 0144  
                    l2308 0132                      l2260 0045                      l2086 0554  
                    l2078 053C                      l2190 0479                      l2182 0465  
                    l2174 0450                      l2166 0429                      l2158 0415  
                    l2254 0341                      l2246 0314                      l2238 02D0  
                    l2094 06AD                      l2326 016C                      l2318 0149  
                    l2270 0062                      l2262 0049                      l2088 055A  
                    l2184 0469                      l2176 045A                      l2168 042E  
                    l2256 0342                      l2248 031A                      l2096 06DA  
                    l2328 0182                      l2280 009B                      l2272 006C  
                    l2264 004D                      l2194 05CD                      l2186 046F  
                    l2178 0461                      l2098 06DB                      l2290 00D1  
                    l2282 00A2                      l2274 0080                      l2266 004E  
                    l2258 0029                      l2196 05D2                      l1900 067C  
                    l2188 0473                      l2292 00E5                      l2284 00B8  
                    l2276 0088                      l2268 0053                      l1910 0795  
                    l2198 05DF                      l1902 0684                      l2286 00BD  
                    l2294 00E6                      l2278 008E                      l1912 079B  
                    l1904 0787                      l1920 07B2                      l2296 00EB  
                    l2288 00C6                      l1914 079E                      l1906 078A  
                    l1922 07BD                      l1930 0350                      l2298 0104  
                    l1860 07D6                      l1916 07A9                      l1908 0792  
                    l1924 07C3                      l1940 0380                      l1932 0361  
                    l1862 07DD                      l1870 0723                      l1918 07B0  
                    l1950 03AF                      l1942 0383                      l1934 036C  
                    l1926 0349                      l1864 07E4                      l1880 073F  
                    l1872 0724                      l1960 03D2                      l1952 03BD  
                    l1944 0390                      l1936 0370                      l1928 034C  
                    l1866 07EB                      l1858 07D2                      l1882 0745  
                    l1874 0732                      l1970 0568                      l1890 0FF3  
                    l1962 03DD                      l1954 03BE                      l1946 0394  
                    l1938 0378                      l1884 0748                      l1876 0735  
                    l1868 071D                      l1980 057C                      l1972 056D  
                    l1892 0FF9                      l1956 03C7                      l1948 039D  
                    l1886 074F                      l1878 073C                      l1990 0592  
                    l1982 057E                      l1974 056F                      l1966 0561  
                    l1894 0FFD                      l1958 03CD                      l1896 065B  
                    l1992 0596                      l1984 0584                      l1976 0573  
                    l1968 0564                      l1888 0FED                      l1898 0660  
                    l1994 05A7                      l1986 0587                      l1978 0578  
                    l1996 05AD                      l1988 058E                      l1998 05AE  
                    STR_1 0773                      _T0IF 005A                      u2010 05A7  
                    u2011 05A6                      u2005 0597                      u2030 05BB  
                    u2110 0656                      u2031 05BA                      u2015 05A3  
                    u2111 0655                      u2040 05C0                      u2120 06E6  
                    u2200 0198                      u2041 05BF                      u2025 05AF  
                    u2105 064A                      u2121 06E5                      u2050 061F  
                    u2210 019E                      u2051 061E                      u2211 019D  
                    u2140 06F8                      u2220 01E4                      u2141 06F7  
                    u2221 01E3                      u2070 0631                      u2150 0702  
                    u2230 01E9                      u2071 0630                      u2151 0701  
                    u2135 06EA                      u2231 01E8                      u2240 0256  
                    u2320 0461                      u2400 0279                      u2065 0623  
                    u2241 0255                      u2321 0460                      u2305 0431  
                    u2090 0642                      u2170 0715                      u2250 025E  
                    u2330 046F                      u2314 044A                      u2410 027F  
                    u2091 0641                      u2171 0714                      u2155 06FE  
                    u2251 025D                      u2331 046E                      u2315 0448  
                    u2411 027E                      u2340 0479                      u2420 02C5  
                    u2180 06BB                      u2500 010B                      u2085 0632  
                    u2165 0709                      u2245 0252                      u2341 0478  
                    u2421 02C4                      u2501 010A                      u2350 05D2  
                    u2190 0197                      u2430 02CA                      u2510 0124  
                    u2351 05D1                      u2095 063E                      u2191 0195  
                    u2431 02C9                      u2511 0123                      u2280 0429  
                    u2264 0403                      u1800 0FF9                      u2440 0337  
                    u2520 012A                      u2281 0428                      u2265 0401  
                    u1801 0FF8                      u2441 0336                      u2185 06B6  
                    u2521 0129                      u2370 05F6                      u1810 066A  
                    u2290 042E                      u2274 041E                      u2450 033F  
                    u2530 0138                      u2371 05F5                      u2291 042D  
                    u2275 041C                      u2451 033E                      u2531 0137  
                    u2515 0120                      u1820 068E                      u2540 0149  
                    u2460 008E                      u2365 05D8                      u2445 0333  
                    u2541 0148                      u2461 008D                      u1750 07D6  
                    u1830 06A0                      u2390 0278                      u1910 03AF  
                    u2550 0153                      u2470 00BD                      u1751 07D5  
                    u2607 074C                      u1831 069F                      u2391 0276  
                    u1911 03AE                      u2551 0152                      u2471 00BC  
                    _PIE1 008C                      u1760 07DD                      u1840 07CE  
                    u2560 0158                      u2480 00EB                      u1761 07DC  
                    u2617 050A                      u2385 05FC                      u1841 07CD  
                    u1905 0396                      u2561 0157                      u2481 00EA  
                    u1770 07E4                      u1930 03CD                      u1850 0350  
                    u2490 0104                      u1771 07E3                      u2627 051A  
                    u1931 03CC                      u1915 03AB                      u1851 034F  
                    u2491 0103                      u1780 07EB                      u1940 03D2  
                    u1860 0361                      u1781 07EA                      u2637 052B  
                    u1941 03D1                      u1925 03BF                      u1861 0360  
                    u1950 0568                      u1870 0380                      u2647 07A4  
                    u1951 0567                      u1871 037F                      u2495 0100  
                    u1960 0573                      u1961 0572                      u2577 0411  
                    u1970 0584                      u1890 0394                      u1795 0727  
                    u1971 0583                      u2587 0456                      u1891 0393  
                    u2597 0739                      u1885 0385                      u1990 0596  
                    u1991 0595                      u1985 0588                      _RCIF 0065  
                    _PIR1 000C                      _TMR0 0001         ?_Lcd_Write_String 0025  
                    _main 0029                      btemp 007E                      start 000E  
      ??_Lcd_Write_String 0027           __end_of_Lcd_Cmd 07AD                     ??_ISR 0075  
         __end_of___aldiv 03E6                     ?_main 0075           __end_of___awdiv 05CA  
         ___awdiv@divisor 0020                     _T1CON 0010           __end_of___lwdiv 065B  
                   i1l123 04EA           __end_of___lwmod 071A           ___awdiv@counter 0025  
                   _RCREG 001A                     _RCSTA 0018                     _TMR1H 000F  
                   _TMR1L 000E                     _SPBRG 0099                     _PORTB 0006  
                   _PORTD 0008                     _TRISB 0086                     _TRISC 0087  
                   _TRISD 0088                     _TRISE 0089                     _TXREG 0019  
                   _TXSTA 0098               ?_UART_TxInt 0029                     _Speed 076F  
                   pclath 000A                     status 0003                     wtemp0 007E  
        __end_of_Lcd_Init 0561          __end_of_Lcd_Port 07EF           __initialization 0011  
            __end_of_main 018A                    ??_main 00C6                    _CCPR1L 0015  
        ___awdiv@dividend 0022                    i1l1810 047B                    i1l1820 04A3  
                  i1l1812 047F                    i1l1830 04BB                    i1l1822 04A4  
                  i1l1814 0490                    i1l1832 04CA                    i1l1824 04A6  
                  i1l1816 0492                    i1l1840 04D3                    i1l1850 04E9  
                  i1l1842 04D9                    i1l1834 04CC                    i1l1826 04B7  
                  i1l1818 04A2                    i1l1844 04DF                    i1l1828 04B9  
                  i1l1836 04CE                    i1l1846 04E3                    i1l1838 04D2  
                  i1l1848 04E7                    _INTCON 000B                    u170_20 047F  
                  u170_21 047E                    u171_20 0490                    u171_21 048F  
                  u172_20 04B7                    u172_21 04B6                    u173_20 04CA  
                  u173_21 04C9                    u174_20 04D9                    u174_21 04D8  
               ??_Lcd_Cmd 0021                    _TMR2ON 0092              ?_UART_TxChar 0075  
              _MotorSpeed 006C                 ??___aldiv 0028         __end_of_UART_init 06DE  
               ??___awdiv 0024                    _data_i 006E                 ??___lwdiv 0024  
               ??___lwmod 0024                    _keypad 0763          ___awdiv@quotient 0027  
   __end_of_Lcd_Write_Int 026B             ??_Numpad_Read 0020                    saved_w 007E  
        Lcd_Write_Int@val 002C           Lcd_Set_Cursor@y 0028           Lcd_Set_Cursor@z 0027  
 __end_of__initialization 0025     __end_of_UART_TxString 07CF            __pcstackCOMMON 0075  
           __end_of_Speed 0773       ISR@interruptCounter 00C4            _Lcd_Set_Cursor 05CA  
               ?_Lcd_Init 0075                 ?_Lcd_Port 0075            Lcd_Write_Int@i 006A  
          Lcd_Write_Int@n 0066            Lcd_Write_Int@t 0068       __end_of_Numpad_Read 047B  
              __pbssBANK0 006C                __pbssBANK1 00A0                __pmaintext 0029  
              __pintentry 0004                   _CCP1CON 0017    __end_of_Lcd_Set_Cursor 0615  
            ??_UART_TxInt 002B                ??_Lcd_Init 0024                ??_Lcd_Port 0020  
              __stringtab 0753            _Lcd_Write_Char 071A                   _Lcd_Cmd 0784  
                 ___aldiv 0349        __end_of_UART_TxInt 0349                   ___awdiv 0561  
                 ___lwdiv 0615                   ___lwmod 06DE           ?_Lcd_Set_Cursor 0024  
                 __ptext1 06A1                   __ptext2 0349                   __ptext3 026B  
                 __ptext4 07AD                   __ptext5 0FEA                   __ptext6 03E6  
                 __ptext7 018A                   __ptext8 06DE                   __ptext9 0615  
             UART_TxInt@i 0067               UART_TxInt@n 0063               UART_TxInt@t 0065  
             _Numpad_Read 03E6          ___aldiv@dividend 0024      Numpad_Read@oldKeyVal 0070  
                 clrloop0 07F0    __end_of_Lcd_Write_Char 0753      end_of_initialization 0025  
          UART_TxString@i 0024             _SelectedSpeed 006F          ___aldiv@quotient 002B  
               Lcd_Port@a 0020                 _UART_init 06A1                 _PORTDbits 0008  
               _PORTEbits 0009                _update_lcd 0074    ISR@update_UART_counter 00C0  
         ?_Lcd_Write_Char 0075         Lcd_Write_String@a 0025         Lcd_Write_String@i 002A  
        _Lcd_Write_String 065B                ?_UART_init 002F            __end_of_keypad 076F  
           _data_received 0071       start_initialization 0011               __end_of_ISR 04F3  
   Lcd_Set_Cursor@colonna 0024                 _Uart_Data 00A0        Numpad_Read@colScan 0024  
         Lcd_Write_Char@a 0024           Lcd_Write_Char@y 0023           Lcd_Write_Int@n1 0064  
      Numpad_Read@rowScan 0025               __pbssCOMMON 0070                 ___latbits 0002  
           __pcstackBANK0 0020             __pcstackBANK1 00C6                  ?_Lcd_Cmd 0075  
        ___lwdiv@dividend 0022          ??_Lcd_Set_Cursor 0025                  ?___aldiv 0020  
                ?___awdiv 0020                  ?___lwdiv 0020                  ?___lwmod 0020  
               __pstrings 0753               ??_UART_init 0033             _Lcd_Write_Int 018A  
        UART_TxInt@buffer 002E              ?_Numpad_Read 0075             UART_TxChar@ch 0021  
        ___lwdiv@quotient 0026             UART_TxInt@val 0029           ___aldiv@divisor 0020  
       interrupt_function 0004           ___aldiv@counter 0029                 clear_ram0 07EF  
           ??_UART_TxChar 0020             _UART_TxString 07AD                  Lcd_Cmd@a 0023  
             __stringbase 0762            ?_Lcd_Write_Int 002C          ??_Lcd_Write_Char 0021  
                _Lcd_Init 04F3                  _Lcd_Port 07CF  __end_of_Lcd_Write_String 06A1  
        main@speed_buffer 00C9            ?_UART_TxString 0075       __end_of_UART_TxChar 1000  
      __end_of__stringtab 0763          main@numpad_value 00C8           ___lwdiv@divisor 0020  
         ___lwdiv@counter 0025                  __ptext10 0561                  __ptext11 065B  
                __ptext12 071A                  __ptext13 05CA                  __ptext14 04F3  
                __ptext15 0784                  __ptext16 07CF                  __ptext17 047B  
        UART_TxString@str 0023           UART_TxInt@isNeg 0060              UART_TxInt@n1 0061  
   Numpad_Read@currentKey 0022           ??_Lcd_Write_Int 002E       Lcd_Write_Int@buffer 0031  
      Lcd_Write_Char@temp 0022                  intlevel1 0000         UART_init@baudrate 002F  
        ___lwmod@dividend 0022           ??_UART_TxString 0022                 stringcode 075D  
             _UART_TxChar 0FEA        Lcd_Set_Cursor@riga 0026        Lcd_Set_Cursor@temp 0029  
      Lcd_Write_Int@isNeg 0063                _OPTION_REG 0081           ___lwmod@divisor 0020  
         ___lwmod@counter 0025                  stringdir 075D                  stringtab 0753  
              _UART_TxInt 026B              ___aldiv@sign 002A               _update_UART 0073  
